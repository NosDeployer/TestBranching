//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.FleetManagement.Units {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("UnitInformationReportTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class UnitInformationReportTDS : global::System.Data.DataSet {
        
        private UnitInformationReportDataTable tableUnitInformationReport;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UnitInformationReportTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected UnitInformationReportTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["UnitInformationReport"] != null)) {
                    base.Tables.Add(new UnitInformationReportDataTable(ds.Tables["UnitInformationReport"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UnitInformationReportDataTable UnitInformationReport {
            get {
                return this.tableUnitInformationReport;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            UnitInformationReportTDS cln = ((UnitInformationReportTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["UnitInformationReport"] != null)) {
                    base.Tables.Add(new UnitInformationReportDataTable(ds.Tables["UnitInformationReport"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableUnitInformationReport = ((UnitInformationReportDataTable)(base.Tables["UnitInformationReport"]));
            if ((initTable == true)) {
                if ((this.tableUnitInformationReport != null)) {
                    this.tableUnitInformationReport.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "UnitInformationReportTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/UnitInformationReportTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableUnitInformationReport = new UnitInformationReportDataTable();
            base.Tables.Add(this.tableUnitInformationReport);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUnitInformationReport() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            UnitInformationReportTDS ds = new UnitInformationReportTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void UnitInformationReportRowChangeEventHandler(object sender, UnitInformationReportRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UnitInformationReportDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnUnitCode;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnVIN;
            
            private global::System.Data.DataColumn columnManufacturer;
            
            private global::System.Data.DataColumn columnModel;
            
            private global::System.Data.DataColumn columnYear_;
            
            private global::System.Data.DataColumn columnIsTowable;
            
            private global::System.Data.DataColumn columnCompanyLevelID;
            
            private global::System.Data.DataColumn columnAcquisitionDate;
            
            private global::System.Data.DataColumn columnDispositionDate;
            
            private global::System.Data.DataColumn columnDispositionReason;
            
            private global::System.Data.DataColumn columnDailyRate;
            
            private global::System.Data.DataColumn columnOwnerType;
            
            private global::System.Data.DataColumn columnOwnerCountry;
            
            private global::System.Data.DataColumn columnOwnerState;
            
            private global::System.Data.DataColumn columnOwnerName;
            
            private global::System.Data.DataColumn columnOwnerContact;
            
            private global::System.Data.DataColumn columnQualifiedDate;
            
            private global::System.Data.DataColumn columnNotQualifiedDate;
            
            private global::System.Data.DataColumn columnNotQualifiedExplain;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnNotes;
            
            private global::System.Data.DataColumn columnCategories;
            
            private global::System.Data.DataColumn columnLicenseCountry;
            
            private global::System.Data.DataColumn columnLicenseState;
            
            private global::System.Data.DataColumn columnLicensePlateNumbver;
            
            private global::System.Data.DataColumn columnAportionedTagNumber;
            
            private global::System.Data.DataColumn columnActualWeight;
            
            private global::System.Data.DataColumn columnRegisteredWeight;
            
            private global::System.Data.DataColumn columnTireSizeFront;
            
            private global::System.Data.DataColumn columnTireSizeBack;
            
            private global::System.Data.DataColumn columnNumberOfAxes;
            
            private global::System.Data.DataColumn columnFuelType;
            
            private global::System.Data.DataColumn columnBeginningOdometer;
            
            private global::System.Data.DataColumn columnIsReeferEquipped;
            
            private global::System.Data.DataColumn columnIsPTOEquipped;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnCompanyLevel;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitInformationReportDataTable() {
                this.TableName = "UnitInformationReport";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitInformationReportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UnitInformationReportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitCodeColumn {
                get {
                    return this.columnUnitCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VINColumn {
                get {
                    return this.columnVIN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManufacturerColumn {
                get {
                    return this.columnManufacturer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModelColumn {
                get {
                    return this.columnModel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Year_Column {
                get {
                    return this.columnYear_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsTowableColumn {
                get {
                    return this.columnIsTowable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyLevelIDColumn {
                get {
                    return this.columnCompanyLevelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcquisitionDateColumn {
                get {
                    return this.columnAcquisitionDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DispositionDateColumn {
                get {
                    return this.columnDispositionDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DispositionReasonColumn {
                get {
                    return this.columnDispositionReason;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DailyRateColumn {
                get {
                    return this.columnDailyRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerTypeColumn {
                get {
                    return this.columnOwnerType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerCountryColumn {
                get {
                    return this.columnOwnerCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerStateColumn {
                get {
                    return this.columnOwnerState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerNameColumn {
                get {
                    return this.columnOwnerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerContactColumn {
                get {
                    return this.columnOwnerContact;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QualifiedDateColumn {
                get {
                    return this.columnQualifiedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotQualifiedDateColumn {
                get {
                    return this.columnNotQualifiedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotQualifiedExplainColumn {
                get {
                    return this.columnNotQualifiedExplain;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotesColumn {
                get {
                    return this.columnNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoriesColumn {
                get {
                    return this.columnCategories;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LicenseCountryColumn {
                get {
                    return this.columnLicenseCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LicenseStateColumn {
                get {
                    return this.columnLicenseState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LicensePlateNumbverColumn {
                get {
                    return this.columnLicensePlateNumbver;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AportionedTagNumberColumn {
                get {
                    return this.columnAportionedTagNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActualWeightColumn {
                get {
                    return this.columnActualWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegisteredWeightColumn {
                get {
                    return this.columnRegisteredWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TireSizeFrontColumn {
                get {
                    return this.columnTireSizeFront;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TireSizeBackColumn {
                get {
                    return this.columnTireSizeBack;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumberOfAxesColumn {
                get {
                    return this.columnNumberOfAxes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FuelTypeColumn {
                get {
                    return this.columnFuelType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BeginningOdometerColumn {
                get {
                    return this.columnBeginningOdometer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsReeferEquippedColumn {
                get {
                    return this.columnIsReeferEquipped;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPTOEquippedColumn {
                get {
                    return this.columnIsPTOEquipped;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyLevelColumn {
                get {
                    return this.columnCompanyLevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitInformationReportRow this[int index] {
                get {
                    return ((UnitInformationReportRow)(this.Rows[index]));
                }
            }
            
            public event UnitInformationReportRowChangeEventHandler UnitInformationReportRowChanging;
            
            public event UnitInformationReportRowChangeEventHandler UnitInformationReportRowChanged;
            
            public event UnitInformationReportRowChangeEventHandler UnitInformationReportRowDeleting;
            
            public event UnitInformationReportRowChangeEventHandler UnitInformationReportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUnitInformationReportRow(UnitInformationReportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitInformationReportRow AddUnitInformationReportRow(
                        string UnitCode, 
                        string Description, 
                        string VIN, 
                        string Manufacturer, 
                        string Model, 
                        string Year_, 
                        bool IsTowable, 
                        int CompanyLevelID, 
                        System.DateTime AcquisitionDate, 
                        System.DateTime DispositionDate, 
                        string DispositionReason, 
                        decimal DailyRate, 
                        string OwnerType, 
                        long OwnerCountry, 
                        long OwnerState, 
                        string OwnerName, 
                        string OwnerContact, 
                        System.DateTime QualifiedDate, 
                        System.DateTime NotQualifiedDate, 
                        string NotQualifiedExplain, 
                        string State, 
                        string Type, 
                        string Notes, 
                        string Categories, 
                        long LicenseCountry, 
                        long LicenseState, 
                        string LicensePlateNumbver, 
                        string AportionedTagNumber, 
                        string ActualWeight, 
                        string RegisteredWeight, 
                        string TireSizeFront, 
                        string TireSizeBack, 
                        string NumberOfAxes, 
                        string FuelType, 
                        string BeginningOdometer, 
                        bool IsReeferEquipped, 
                        bool IsPTOEquipped, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        string CompanyLevel) {
                UnitInformationReportRow rowUnitInformationReportRow = ((UnitInformationReportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        UnitCode,
                        Description,
                        VIN,
                        Manufacturer,
                        Model,
                        Year_,
                        IsTowable,
                        CompanyLevelID,
                        AcquisitionDate,
                        DispositionDate,
                        DispositionReason,
                        DailyRate,
                        OwnerType,
                        OwnerCountry,
                        OwnerState,
                        OwnerName,
                        OwnerContact,
                        QualifiedDate,
                        NotQualifiedDate,
                        NotQualifiedExplain,
                        State,
                        Type,
                        Notes,
                        Categories,
                        LicenseCountry,
                        LicenseState,
                        LicensePlateNumbver,
                        AportionedTagNumber,
                        ActualWeight,
                        RegisteredWeight,
                        TireSizeFront,
                        TireSizeBack,
                        NumberOfAxes,
                        FuelType,
                        BeginningOdometer,
                        IsReeferEquipped,
                        IsPTOEquipped,
                        Deleted,
                        COMPANY_ID,
                        CompanyLevel};
                rowUnitInformationReportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUnitInformationReportRow);
                return rowUnitInformationReportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitInformationReportRow FindByUnitID(int UnitID) {
                return ((UnitInformationReportRow)(this.Rows.Find(new object[] {
                            UnitID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UnitInformationReportDataTable cln = ((UnitInformationReportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UnitInformationReportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUnitID = base.Columns["UnitID"];
                this.columnUnitCode = base.Columns["UnitCode"];
                this.columnDescription = base.Columns["Description"];
                this.columnVIN = base.Columns["VIN"];
                this.columnManufacturer = base.Columns["Manufacturer"];
                this.columnModel = base.Columns["Model"];
                this.columnYear_ = base.Columns["Year_"];
                this.columnIsTowable = base.Columns["IsTowable"];
                this.columnCompanyLevelID = base.Columns["CompanyLevelID"];
                this.columnAcquisitionDate = base.Columns["AcquisitionDate"];
                this.columnDispositionDate = base.Columns["DispositionDate"];
                this.columnDispositionReason = base.Columns["DispositionReason"];
                this.columnDailyRate = base.Columns["DailyRate"];
                this.columnOwnerType = base.Columns["OwnerType"];
                this.columnOwnerCountry = base.Columns["OwnerCountry"];
                this.columnOwnerState = base.Columns["OwnerState"];
                this.columnOwnerName = base.Columns["OwnerName"];
                this.columnOwnerContact = base.Columns["OwnerContact"];
                this.columnQualifiedDate = base.Columns["QualifiedDate"];
                this.columnNotQualifiedDate = base.Columns["NotQualifiedDate"];
                this.columnNotQualifiedExplain = base.Columns["NotQualifiedExplain"];
                this.columnState = base.Columns["State"];
                this.columnType = base.Columns["Type"];
                this.columnNotes = base.Columns["Notes"];
                this.columnCategories = base.Columns["Categories"];
                this.columnLicenseCountry = base.Columns["LicenseCountry"];
                this.columnLicenseState = base.Columns["LicenseState"];
                this.columnLicensePlateNumbver = base.Columns["LicensePlateNumbver"];
                this.columnAportionedTagNumber = base.Columns["AportionedTagNumber"];
                this.columnActualWeight = base.Columns["ActualWeight"];
                this.columnRegisteredWeight = base.Columns["RegisteredWeight"];
                this.columnTireSizeFront = base.Columns["TireSizeFront"];
                this.columnTireSizeBack = base.Columns["TireSizeBack"];
                this.columnNumberOfAxes = base.Columns["NumberOfAxes"];
                this.columnFuelType = base.Columns["FuelType"];
                this.columnBeginningOdometer = base.Columns["BeginningOdometer"];
                this.columnIsReeferEquipped = base.Columns["IsReeferEquipped"];
                this.columnIsPTOEquipped = base.Columns["IsPTOEquipped"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnCompanyLevel = base.Columns["CompanyLevel"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnUnitCode = new global::System.Data.DataColumn("UnitCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitCode);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnVIN = new global::System.Data.DataColumn("VIN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVIN);
                this.columnManufacturer = new global::System.Data.DataColumn("Manufacturer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturer);
                this.columnModel = new global::System.Data.DataColumn("Model", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModel);
                this.columnYear_ = new global::System.Data.DataColumn("Year_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear_);
                this.columnIsTowable = new global::System.Data.DataColumn("IsTowable", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsTowable);
                this.columnCompanyLevelID = new global::System.Data.DataColumn("CompanyLevelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyLevelID);
                this.columnAcquisitionDate = new global::System.Data.DataColumn("AcquisitionDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcquisitionDate);
                this.columnDispositionDate = new global::System.Data.DataColumn("DispositionDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDispositionDate);
                this.columnDispositionReason = new global::System.Data.DataColumn("DispositionReason", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDispositionReason);
                this.columnDailyRate = new global::System.Data.DataColumn("DailyRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDailyRate);
                this.columnOwnerType = new global::System.Data.DataColumn("OwnerType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerType);
                this.columnOwnerCountry = new global::System.Data.DataColumn("OwnerCountry", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerCountry);
                this.columnOwnerState = new global::System.Data.DataColumn("OwnerState", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerState);
                this.columnOwnerName = new global::System.Data.DataColumn("OwnerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerName);
                this.columnOwnerContact = new global::System.Data.DataColumn("OwnerContact", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerContact);
                this.columnQualifiedDate = new global::System.Data.DataColumn("QualifiedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQualifiedDate);
                this.columnNotQualifiedDate = new global::System.Data.DataColumn("NotQualifiedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotQualifiedDate);
                this.columnNotQualifiedExplain = new global::System.Data.DataColumn("NotQualifiedExplain", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotQualifiedExplain);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnNotes = new global::System.Data.DataColumn("Notes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnCategories = new global::System.Data.DataColumn("Categories", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategories);
                this.columnLicenseCountry = new global::System.Data.DataColumn("LicenseCountry", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLicenseCountry);
                this.columnLicenseState = new global::System.Data.DataColumn("LicenseState", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLicenseState);
                this.columnLicensePlateNumbver = new global::System.Data.DataColumn("LicensePlateNumbver", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLicensePlateNumbver);
                this.columnAportionedTagNumber = new global::System.Data.DataColumn("AportionedTagNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAportionedTagNumber);
                this.columnActualWeight = new global::System.Data.DataColumn("ActualWeight", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActualWeight);
                this.columnRegisteredWeight = new global::System.Data.DataColumn("RegisteredWeight", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegisteredWeight);
                this.columnTireSizeFront = new global::System.Data.DataColumn("TireSizeFront", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTireSizeFront);
                this.columnTireSizeBack = new global::System.Data.DataColumn("TireSizeBack", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTireSizeBack);
                this.columnNumberOfAxes = new global::System.Data.DataColumn("NumberOfAxes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumberOfAxes);
                this.columnFuelType = new global::System.Data.DataColumn("FuelType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFuelType);
                this.columnBeginningOdometer = new global::System.Data.DataColumn("BeginningOdometer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBeginningOdometer);
                this.columnIsReeferEquipped = new global::System.Data.DataColumn("IsReeferEquipped", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsReeferEquipped);
                this.columnIsPTOEquipped = new global::System.Data.DataColumn("IsPTOEquipped", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPTOEquipped);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnCompanyLevel = new global::System.Data.DataColumn("CompanyLevel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyLevel);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUnitID}, true));
                this.columnUnitID.AutoIncrement = true;
                this.columnUnitID.AllowDBNull = false;
                this.columnUnitID.ReadOnly = true;
                this.columnUnitID.Unique = true;
                this.columnUnitCode.AllowDBNull = false;
                this.columnUnitCode.MaxLength = 25;
                this.columnDescription.MaxLength = 250;
                this.columnVIN.MaxLength = 50;
                this.columnManufacturer.MaxLength = 100;
                this.columnModel.MaxLength = 25;
                this.columnYear_.MaxLength = 5;
                this.columnIsTowable.AllowDBNull = false;
                this.columnCompanyLevelID.AllowDBNull = false;
                this.columnDispositionReason.MaxLength = 100;
                this.columnOwnerType.MaxLength = 25;
                this.columnOwnerName.MaxLength = 100;
                this.columnOwnerContact.MaxLength = 255;
                this.columnNotQualifiedExplain.MaxLength = 1073741823;
                this.columnState.AllowDBNull = false;
                this.columnState.MaxLength = 25;
                this.columnType.MaxLength = 25;
                this.columnNotes.MaxLength = 1073741823;
                this.columnCategories.MaxLength = 1073741823;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitInformationReportRow NewUnitInformationReportRow() {
                return ((UnitInformationReportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UnitInformationReportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UnitInformationReportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UnitInformationReportRowChanged != null)) {
                    this.UnitInformationReportRowChanged(this, new UnitInformationReportRowChangeEvent(((UnitInformationReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UnitInformationReportRowChanging != null)) {
                    this.UnitInformationReportRowChanging(this, new UnitInformationReportRowChangeEvent(((UnitInformationReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UnitInformationReportRowDeleted != null)) {
                    this.UnitInformationReportRowDeleted(this, new UnitInformationReportRowChangeEvent(((UnitInformationReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UnitInformationReportRowDeleting != null)) {
                    this.UnitInformationReportRowDeleting(this, new UnitInformationReportRowChangeEvent(((UnitInformationReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUnitInformationReportRow(UnitInformationReportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                UnitInformationReportTDS ds = new UnitInformationReportTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UnitInformationReportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UnitInformationReportRow : global::System.Data.DataRow {
            
            private UnitInformationReportDataTable tableUnitInformationReport;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitInformationReportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUnitInformationReport = ((UnitInformationReportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    return ((int)(this[this.tableUnitInformationReport.UnitIDColumn]));
                }
                set {
                    this[this.tableUnitInformationReport.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitCode {
                get {
                    return ((string)(this[this.tableUnitInformationReport.UnitCodeColumn]));
                }
                set {
                    this[this.tableUnitInformationReport.UnitCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableUnitInformationReport.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'UnitInformationReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VIN {
                get {
                    try {
                        return ((string)(this[this.tableUnitInformationReport.VINColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VIN\' in table \'UnitInformationReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.VINColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Manufacturer {
                get {
                    try {
                        return ((string)(this[this.tableUnitInformationReport.ManufacturerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Manufacturer\' in table \'UnitInformationReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.ManufacturerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Model {
                get {
                    try {
                        return ((string)(this[this.tableUnitInformationReport.ModelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Model\' in table \'UnitInformationReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.ModelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Year_ {
                get {
                    try {
                        return ((string)(this[this.tableUnitInformationReport.Year_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Year_\' in table \'UnitInformationReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.Year_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTowable {
                get {
                    return ((bool)(this[this.tableUnitInformationReport.IsTowableColumn]));
                }
                set {
                    this[this.tableUnitInformationReport.IsTowableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CompanyLevelID {
                get {
                    return ((int)(this[this.tableUnitInformationReport.CompanyLevelIDColumn]));
                }
                set {
                    this[this.tableUnitInformationReport.CompanyLevelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AcquisitionDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUnitInformationReport.AcquisitionDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AcquisitionDate\' in table \'UnitInformationReport\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.AcquisitionDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DispositionDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUnitInformationReport.DispositionDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DispositionDate\' in table \'UnitInformationReport\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.DispositionDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DispositionReason {
                get {
                    try {
                        return ((string)(this[this.tableUnitInformationReport.DispositionReasonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DispositionReason\' in table \'UnitInformationReport\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.DispositionReasonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DailyRate {
                get {
                    try {
                        return ((decimal)(this[this.tableUnitInformationReport.DailyRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DailyRate\' in table \'UnitInformationReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.DailyRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerType {
                get {
                    try {
                        return ((string)(this[this.tableUnitInformationReport.OwnerTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerType\' in table \'UnitInformationReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.OwnerTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long OwnerCountry {
                get {
                    try {
                        return ((long)(this[this.tableUnitInformationReport.OwnerCountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerCountry\' in table \'UnitInformationReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.OwnerCountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long OwnerState {
                get {
                    try {
                        return ((long)(this[this.tableUnitInformationReport.OwnerStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerState\' in table \'UnitInformationReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.OwnerStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerName {
                get {
                    try {
                        return ((string)(this[this.tableUnitInformationReport.OwnerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerName\' in table \'UnitInformationReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.OwnerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerContact {
                get {
                    try {
                        return ((string)(this[this.tableUnitInformationReport.OwnerContactColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerContact\' in table \'UnitInformationReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.OwnerContactColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime QualifiedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUnitInformationReport.QualifiedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QualifiedDate\' in table \'UnitInformationReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.QualifiedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime NotQualifiedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUnitInformationReport.NotQualifiedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NotQualifiedDate\' in table \'UnitInformationReport\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.NotQualifiedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NotQualifiedExplain {
                get {
                    try {
                        return ((string)(this[this.tableUnitInformationReport.NotQualifiedExplainColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NotQualifiedExplain\' in table \'UnitInformationReport\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.NotQualifiedExplainColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    return ((string)(this[this.tableUnitInformationReport.StateColumn]));
                }
                set {
                    this[this.tableUnitInformationReport.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableUnitInformationReport.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'UnitInformationReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Notes {
                get {
                    try {
                        return ((string)(this[this.tableUnitInformationReport.NotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Notes\' in table \'UnitInformationReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.NotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Categories {
                get {
                    try {
                        return ((string)(this[this.tableUnitInformationReport.CategoriesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Categories\' in table \'UnitInformationReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.CategoriesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long LicenseCountry {
                get {
                    try {
                        return ((long)(this[this.tableUnitInformationReport.LicenseCountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LicenseCountry\' in table \'UnitInformationReport\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.LicenseCountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long LicenseState {
                get {
                    try {
                        return ((long)(this[this.tableUnitInformationReport.LicenseStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LicenseState\' in table \'UnitInformationReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.LicenseStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LicensePlateNumbver {
                get {
                    try {
                        return ((string)(this[this.tableUnitInformationReport.LicensePlateNumbverColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LicensePlateNumbver\' in table \'UnitInformationReport\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.LicensePlateNumbverColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AportionedTagNumber {
                get {
                    try {
                        return ((string)(this[this.tableUnitInformationReport.AportionedTagNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AportionedTagNumber\' in table \'UnitInformationReport\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.AportionedTagNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ActualWeight {
                get {
                    try {
                        return ((string)(this[this.tableUnitInformationReport.ActualWeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActualWeight\' in table \'UnitInformationReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.ActualWeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RegisteredWeight {
                get {
                    try {
                        return ((string)(this[this.tableUnitInformationReport.RegisteredWeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RegisteredWeight\' in table \'UnitInformationReport\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.RegisteredWeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TireSizeFront {
                get {
                    try {
                        return ((string)(this[this.tableUnitInformationReport.TireSizeFrontColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TireSizeFront\' in table \'UnitInformationReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.TireSizeFrontColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TireSizeBack {
                get {
                    try {
                        return ((string)(this[this.tableUnitInformationReport.TireSizeBackColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TireSizeBack\' in table \'UnitInformationReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.TireSizeBackColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NumberOfAxes {
                get {
                    try {
                        return ((string)(this[this.tableUnitInformationReport.NumberOfAxesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NumberOfAxes\' in table \'UnitInformationReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.NumberOfAxesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FuelType {
                get {
                    try {
                        return ((string)(this[this.tableUnitInformationReport.FuelTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FuelType\' in table \'UnitInformationReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.FuelTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BeginningOdometer {
                get {
                    try {
                        return ((string)(this[this.tableUnitInformationReport.BeginningOdometerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BeginningOdometer\' in table \'UnitInformationReport\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.BeginningOdometerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReeferEquipped {
                get {
                    try {
                        return ((bool)(this[this.tableUnitInformationReport.IsReeferEquippedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsReeferEquipped\' in table \'UnitInformationReport\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.IsReeferEquippedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPTOEquipped {
                get {
                    try {
                        return ((bool)(this[this.tableUnitInformationReport.IsPTOEquippedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPTOEquipped\' in table \'UnitInformationReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.IsPTOEquippedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    try {
                        return ((bool)(this[this.tableUnitInformationReport.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'UnitInformationReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    try {
                        return ((int)(this[this.tableUnitInformationReport.COMPANY_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPANY_ID\' in table \'UnitInformationReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompanyLevel {
                get {
                    try {
                        return ((string)(this[this.tableUnitInformationReport.CompanyLevelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompanyLevel\' in table \'UnitInformationReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitInformationReport.CompanyLevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableUnitInformationReport.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableUnitInformationReport.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVINNull() {
                return this.IsNull(this.tableUnitInformationReport.VINColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVINNull() {
                this[this.tableUnitInformationReport.VINColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufacturerNull() {
                return this.IsNull(this.tableUnitInformationReport.ManufacturerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufacturerNull() {
                this[this.tableUnitInformationReport.ManufacturerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModelNull() {
                return this.IsNull(this.tableUnitInformationReport.ModelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModelNull() {
                this[this.tableUnitInformationReport.ModelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYear_Null() {
                return this.IsNull(this.tableUnitInformationReport.Year_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYear_Null() {
                this[this.tableUnitInformationReport.Year_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcquisitionDateNull() {
                return this.IsNull(this.tableUnitInformationReport.AcquisitionDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcquisitionDateNull() {
                this[this.tableUnitInformationReport.AcquisitionDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDispositionDateNull() {
                return this.IsNull(this.tableUnitInformationReport.DispositionDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDispositionDateNull() {
                this[this.tableUnitInformationReport.DispositionDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDispositionReasonNull() {
                return this.IsNull(this.tableUnitInformationReport.DispositionReasonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDispositionReasonNull() {
                this[this.tableUnitInformationReport.DispositionReasonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDailyRateNull() {
                return this.IsNull(this.tableUnitInformationReport.DailyRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDailyRateNull() {
                this[this.tableUnitInformationReport.DailyRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerTypeNull() {
                return this.IsNull(this.tableUnitInformationReport.OwnerTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerTypeNull() {
                this[this.tableUnitInformationReport.OwnerTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerCountryNull() {
                return this.IsNull(this.tableUnitInformationReport.OwnerCountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerCountryNull() {
                this[this.tableUnitInformationReport.OwnerCountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerStateNull() {
                return this.IsNull(this.tableUnitInformationReport.OwnerStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerStateNull() {
                this[this.tableUnitInformationReport.OwnerStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerNameNull() {
                return this.IsNull(this.tableUnitInformationReport.OwnerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerNameNull() {
                this[this.tableUnitInformationReport.OwnerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerContactNull() {
                return this.IsNull(this.tableUnitInformationReport.OwnerContactColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerContactNull() {
                this[this.tableUnitInformationReport.OwnerContactColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQualifiedDateNull() {
                return this.IsNull(this.tableUnitInformationReport.QualifiedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQualifiedDateNull() {
                this[this.tableUnitInformationReport.QualifiedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotQualifiedDateNull() {
                return this.IsNull(this.tableUnitInformationReport.NotQualifiedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotQualifiedDateNull() {
                this[this.tableUnitInformationReport.NotQualifiedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotQualifiedExplainNull() {
                return this.IsNull(this.tableUnitInformationReport.NotQualifiedExplainColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotQualifiedExplainNull() {
                this[this.tableUnitInformationReport.NotQualifiedExplainColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableUnitInformationReport.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableUnitInformationReport.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotesNull() {
                return this.IsNull(this.tableUnitInformationReport.NotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotesNull() {
                this[this.tableUnitInformationReport.NotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoriesNull() {
                return this.IsNull(this.tableUnitInformationReport.CategoriesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoriesNull() {
                this[this.tableUnitInformationReport.CategoriesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLicenseCountryNull() {
                return this.IsNull(this.tableUnitInformationReport.LicenseCountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLicenseCountryNull() {
                this[this.tableUnitInformationReport.LicenseCountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLicenseStateNull() {
                return this.IsNull(this.tableUnitInformationReport.LicenseStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLicenseStateNull() {
                this[this.tableUnitInformationReport.LicenseStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLicensePlateNumbverNull() {
                return this.IsNull(this.tableUnitInformationReport.LicensePlateNumbverColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLicensePlateNumbverNull() {
                this[this.tableUnitInformationReport.LicensePlateNumbverColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAportionedTagNumberNull() {
                return this.IsNull(this.tableUnitInformationReport.AportionedTagNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAportionedTagNumberNull() {
                this[this.tableUnitInformationReport.AportionedTagNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActualWeightNull() {
                return this.IsNull(this.tableUnitInformationReport.ActualWeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActualWeightNull() {
                this[this.tableUnitInformationReport.ActualWeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegisteredWeightNull() {
                return this.IsNull(this.tableUnitInformationReport.RegisteredWeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegisteredWeightNull() {
                this[this.tableUnitInformationReport.RegisteredWeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTireSizeFrontNull() {
                return this.IsNull(this.tableUnitInformationReport.TireSizeFrontColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTireSizeFrontNull() {
                this[this.tableUnitInformationReport.TireSizeFrontColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTireSizeBackNull() {
                return this.IsNull(this.tableUnitInformationReport.TireSizeBackColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTireSizeBackNull() {
                this[this.tableUnitInformationReport.TireSizeBackColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumberOfAxesNull() {
                return this.IsNull(this.tableUnitInformationReport.NumberOfAxesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumberOfAxesNull() {
                this[this.tableUnitInformationReport.NumberOfAxesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFuelTypeNull() {
                return this.IsNull(this.tableUnitInformationReport.FuelTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFuelTypeNull() {
                this[this.tableUnitInformationReport.FuelTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBeginningOdometerNull() {
                return this.IsNull(this.tableUnitInformationReport.BeginningOdometerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBeginningOdometerNull() {
                this[this.tableUnitInformationReport.BeginningOdometerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsReeferEquippedNull() {
                return this.IsNull(this.tableUnitInformationReport.IsReeferEquippedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsReeferEquippedNull() {
                this[this.tableUnitInformationReport.IsReeferEquippedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPTOEquippedNull() {
                return this.IsNull(this.tableUnitInformationReport.IsPTOEquippedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPTOEquippedNull() {
                this[this.tableUnitInformationReport.IsPTOEquippedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull() {
                return this.IsNull(this.tableUnitInformationReport.DeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull() {
                this[this.tableUnitInformationReport.DeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPANY_IDNull() {
                return this.IsNull(this.tableUnitInformationReport.COMPANY_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPANY_IDNull() {
                this[this.tableUnitInformationReport.COMPANY_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyLevelNull() {
                return this.IsNull(this.tableUnitInformationReport.CompanyLevelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyLevelNull() {
                this[this.tableUnitInformationReport.CompanyLevelColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UnitInformationReportRowChangeEvent : global::System.EventArgs {
            
            private UnitInformationReportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitInformationReportRowChangeEvent(UnitInformationReportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitInformationReportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591