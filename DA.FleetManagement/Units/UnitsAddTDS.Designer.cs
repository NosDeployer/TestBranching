//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.FleetManagement.Units {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("UnitsAddTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class UnitsAddTDS : global::System.Data.DataSet {
        
        private UnitsAddNewDataTable tableUnitsAddNew;
        
        private UnitsChecklistRulesTempDataTable tableUnitsChecklistRulesTemp;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UnitsAddTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected UnitsAddTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["UnitsAddNew"] != null)) {
                    base.Tables.Add(new UnitsAddNewDataTable(ds.Tables["UnitsAddNew"]));
                }
                if ((ds.Tables["UnitsChecklistRulesTemp"] != null)) {
                    base.Tables.Add(new UnitsChecklistRulesTempDataTable(ds.Tables["UnitsChecklistRulesTemp"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UnitsAddNewDataTable UnitsAddNew {
            get {
                return this.tableUnitsAddNew;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UnitsChecklistRulesTempDataTable UnitsChecklistRulesTemp {
            get {
                return this.tableUnitsChecklistRulesTemp;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            UnitsAddTDS cln = ((UnitsAddTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["UnitsAddNew"] != null)) {
                    base.Tables.Add(new UnitsAddNewDataTable(ds.Tables["UnitsAddNew"]));
                }
                if ((ds.Tables["UnitsChecklistRulesTemp"] != null)) {
                    base.Tables.Add(new UnitsChecklistRulesTempDataTable(ds.Tables["UnitsChecklistRulesTemp"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableUnitsAddNew = ((UnitsAddNewDataTable)(base.Tables["UnitsAddNew"]));
            if ((initTable == true)) {
                if ((this.tableUnitsAddNew != null)) {
                    this.tableUnitsAddNew.InitVars();
                }
            }
            this.tableUnitsChecklistRulesTemp = ((UnitsChecklistRulesTempDataTable)(base.Tables["UnitsChecklistRulesTemp"]));
            if ((initTable == true)) {
                if ((this.tableUnitsChecklistRulesTemp != null)) {
                    this.tableUnitsChecklistRulesTemp.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "UnitsAddTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/UnitsAddTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableUnitsAddNew = new UnitsAddNewDataTable();
            base.Tables.Add(this.tableUnitsAddNew);
            this.tableUnitsChecklistRulesTemp = new UnitsChecklistRulesTempDataTable();
            base.Tables.Add(this.tableUnitsChecklistRulesTemp);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUnitsAddNew() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUnitsChecklistRulesTemp() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            UnitsAddTDS ds = new UnitsAddTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void UnitsAddNewRowChangeEventHandler(object sender, UnitsAddNewRowChangeEvent e);
        
        public delegate void UnitsChecklistRulesTempRowChangeEventHandler(object sender, UnitsChecklistRulesTempRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UnitsAddNewDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnCode;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnVIN;
            
            private global::System.Data.DataColumn columnManufacturer;
            
            private global::System.Data.DataColumn columnModel;
            
            private global::System.Data.DataColumn columnYear_;
            
            private global::System.Data.DataColumn columnIsTowable;
            
            private global::System.Data.DataColumn columnLicenseCountry;
            
            private global::System.Data.DataColumn columnLicenseState;
            
            private global::System.Data.DataColumn columnLicensePlateNumber;
            
            private global::System.Data.DataColumn columnApportionedTagNumber;
            
            private global::System.Data.DataColumn columnCompanyLevelID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsAddNewDataTable() {
                this.TableName = "UnitsAddNew";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitsAddNewDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UnitsAddNewDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodeColumn {
                get {
                    return this.columnCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VINColumn {
                get {
                    return this.columnVIN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManufacturerColumn {
                get {
                    return this.columnManufacturer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModelColumn {
                get {
                    return this.columnModel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Year_Column {
                get {
                    return this.columnYear_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsTowableColumn {
                get {
                    return this.columnIsTowable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LicenseCountryColumn {
                get {
                    return this.columnLicenseCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LicenseStateColumn {
                get {
                    return this.columnLicenseState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LicensePlateNumberColumn {
                get {
                    return this.columnLicensePlateNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApportionedTagNumberColumn {
                get {
                    return this.columnApportionedTagNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyLevelIDColumn {
                get {
                    return this.columnCompanyLevelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsAddNewRow this[int index] {
                get {
                    return ((UnitsAddNewRow)(this.Rows[index]));
                }
            }
            
            public event UnitsAddNewRowChangeEventHandler UnitsAddNewRowChanging;
            
            public event UnitsAddNewRowChangeEventHandler UnitsAddNewRowChanged;
            
            public event UnitsAddNewRowChangeEventHandler UnitsAddNewRowDeleting;
            
            public event UnitsAddNewRowChangeEventHandler UnitsAddNewRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUnitsAddNewRow(UnitsAddNewRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsAddNewRow AddUnitsAddNewRow(int UnitID, string Type, string Code, string Description, string VIN, string Manufacturer, string Model, string Year_, bool IsTowable, long LicenseCountry, long LicenseState, string LicensePlateNumber, string ApportionedTagNumber, int CompanyLevelID) {
                UnitsAddNewRow rowUnitsAddNewRow = ((UnitsAddNewRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UnitID,
                        Type,
                        Code,
                        Description,
                        VIN,
                        Manufacturer,
                        Model,
                        Year_,
                        IsTowable,
                        LicenseCountry,
                        LicenseState,
                        LicensePlateNumber,
                        ApportionedTagNumber,
                        CompanyLevelID};
                rowUnitsAddNewRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUnitsAddNewRow);
                return rowUnitsAddNewRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsAddNewRow FindByUnitID(int UnitID) {
                return ((UnitsAddNewRow)(this.Rows.Find(new object[] {
                            UnitID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UnitsAddNewDataTable cln = ((UnitsAddNewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UnitsAddNewDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUnitID = base.Columns["UnitID"];
                this.columnType = base.Columns["Type"];
                this.columnCode = base.Columns["Code"];
                this.columnDescription = base.Columns["Description"];
                this.columnVIN = base.Columns["VIN"];
                this.columnManufacturer = base.Columns["Manufacturer"];
                this.columnModel = base.Columns["Model"];
                this.columnYear_ = base.Columns["Year_"];
                this.columnIsTowable = base.Columns["IsTowable"];
                this.columnLicenseCountry = base.Columns["LicenseCountry"];
                this.columnLicenseState = base.Columns["LicenseState"];
                this.columnLicensePlateNumber = base.Columns["LicensePlateNumber"];
                this.columnApportionedTagNumber = base.Columns["ApportionedTagNumber"];
                this.columnCompanyLevelID = base.Columns["CompanyLevelID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnCode = new global::System.Data.DataColumn("Code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCode);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnVIN = new global::System.Data.DataColumn("VIN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVIN);
                this.columnManufacturer = new global::System.Data.DataColumn("Manufacturer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturer);
                this.columnModel = new global::System.Data.DataColumn("Model", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModel);
                this.columnYear_ = new global::System.Data.DataColumn("Year_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear_);
                this.columnIsTowable = new global::System.Data.DataColumn("IsTowable", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsTowable);
                this.columnLicenseCountry = new global::System.Data.DataColumn("LicenseCountry", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLicenseCountry);
                this.columnLicenseState = new global::System.Data.DataColumn("LicenseState", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLicenseState);
                this.columnLicensePlateNumber = new global::System.Data.DataColumn("LicensePlateNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLicensePlateNumber);
                this.columnApportionedTagNumber = new global::System.Data.DataColumn("ApportionedTagNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApportionedTagNumber);
                this.columnCompanyLevelID = new global::System.Data.DataColumn("CompanyLevelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyLevelID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUnitID}, true));
                this.columnUnitID.AllowDBNull = false;
                this.columnUnitID.Unique = true;
                this.columnCode.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsAddNewRow NewUnitsAddNewRow() {
                return ((UnitsAddNewRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UnitsAddNewRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UnitsAddNewRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UnitsAddNewRowChanged != null)) {
                    this.UnitsAddNewRowChanged(this, new UnitsAddNewRowChangeEvent(((UnitsAddNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UnitsAddNewRowChanging != null)) {
                    this.UnitsAddNewRowChanging(this, new UnitsAddNewRowChangeEvent(((UnitsAddNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UnitsAddNewRowDeleted != null)) {
                    this.UnitsAddNewRowDeleted(this, new UnitsAddNewRowChangeEvent(((UnitsAddNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UnitsAddNewRowDeleting != null)) {
                    this.UnitsAddNewRowDeleting(this, new UnitsAddNewRowChangeEvent(((UnitsAddNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUnitsAddNewRow(UnitsAddNewRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                UnitsAddTDS ds = new UnitsAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UnitsAddNewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UnitsChecklistRulesTempDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRuleID;
            
            private global::System.Data.DataColumn columnCount;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnFrequency;
            
            private global::System.Data.DataColumn columnLastService;
            
            private global::System.Data.DataColumn columnNextDue;
            
            private global::System.Data.DataColumn columnDone;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnSelected;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsChecklistRulesTempDataTable() {
                this.TableName = "UnitsChecklistRulesTemp";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitsChecklistRulesTempDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UnitsChecklistRulesTempDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RuleIDColumn {
                get {
                    return this.columnRuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountColumn {
                get {
                    return this.columnCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FrequencyColumn {
                get {
                    return this.columnFrequency;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastServiceColumn {
                get {
                    return this.columnLastService;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NextDueColumn {
                get {
                    return this.columnNextDue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DoneColumn {
                get {
                    return this.columnDone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsChecklistRulesTempRow this[int index] {
                get {
                    return ((UnitsChecklistRulesTempRow)(this.Rows[index]));
                }
            }
            
            public event UnitsChecklistRulesTempRowChangeEventHandler UnitsChecklistRulesTempRowChanging;
            
            public event UnitsChecklistRulesTempRowChangeEventHandler UnitsChecklistRulesTempRowChanged;
            
            public event UnitsChecklistRulesTempRowChangeEventHandler UnitsChecklistRulesTempRowDeleting;
            
            public event UnitsChecklistRulesTempRowChangeEventHandler UnitsChecklistRulesTempRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUnitsChecklistRulesTempRow(UnitsChecklistRulesTempRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsChecklistRulesTempRow AddUnitsChecklistRulesTempRow(int RuleID, int Count, string Name, string Frequency, System.DateTime LastService, System.DateTime NextDue, bool Done, string State, bool Selected) {
                UnitsChecklistRulesTempRow rowUnitsChecklistRulesTempRow = ((UnitsChecklistRulesTempRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RuleID,
                        Count,
                        Name,
                        Frequency,
                        LastService,
                        NextDue,
                        Done,
                        State,
                        Selected};
                rowUnitsChecklistRulesTempRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUnitsChecklistRulesTempRow);
                return rowUnitsChecklistRulesTempRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsChecklistRulesTempRow FindByCountRuleID(int Count, int RuleID) {
                return ((UnitsChecklistRulesTempRow)(this.Rows.Find(new object[] {
                            Count,
                            RuleID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UnitsChecklistRulesTempDataTable cln = ((UnitsChecklistRulesTempDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UnitsChecklistRulesTempDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRuleID = base.Columns["RuleID"];
                this.columnCount = base.Columns["Count"];
                this.columnName = base.Columns["Name"];
                this.columnFrequency = base.Columns["Frequency"];
                this.columnLastService = base.Columns["LastService"];
                this.columnNextDue = base.Columns["NextDue"];
                this.columnDone = base.Columns["Done"];
                this.columnState = base.Columns["State"];
                this.columnSelected = base.Columns["Selected"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRuleID = new global::System.Data.DataColumn("RuleID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRuleID);
                this.columnCount = new global::System.Data.DataColumn("Count", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCount);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnFrequency = new global::System.Data.DataColumn("Frequency", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrequency);
                this.columnLastService = new global::System.Data.DataColumn("LastService", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastService);
                this.columnNextDue = new global::System.Data.DataColumn("NextDue", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNextDue);
                this.columnDone = new global::System.Data.DataColumn("Done", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDone);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCount,
                                this.columnRuleID}, true));
                this.columnRuleID.AllowDBNull = false;
                this.columnCount.AllowDBNull = false;
                this.columnDone.AllowDBNull = false;
                this.columnState.AllowDBNull = false;
                this.columnState.MaxLength = 25;
                this.columnSelected.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsChecklistRulesTempRow NewUnitsChecklistRulesTempRow() {
                return ((UnitsChecklistRulesTempRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UnitsChecklistRulesTempRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UnitsChecklistRulesTempRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UnitsChecklistRulesTempRowChanged != null)) {
                    this.UnitsChecklistRulesTempRowChanged(this, new UnitsChecklistRulesTempRowChangeEvent(((UnitsChecklistRulesTempRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UnitsChecklistRulesTempRowChanging != null)) {
                    this.UnitsChecklistRulesTempRowChanging(this, new UnitsChecklistRulesTempRowChangeEvent(((UnitsChecklistRulesTempRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UnitsChecklistRulesTempRowDeleted != null)) {
                    this.UnitsChecklistRulesTempRowDeleted(this, new UnitsChecklistRulesTempRowChangeEvent(((UnitsChecklistRulesTempRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UnitsChecklistRulesTempRowDeleting != null)) {
                    this.UnitsChecklistRulesTempRowDeleting(this, new UnitsChecklistRulesTempRowChangeEvent(((UnitsChecklistRulesTempRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUnitsChecklistRulesTempRow(UnitsChecklistRulesTempRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                UnitsAddTDS ds = new UnitsAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UnitsChecklistRulesTempDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UnitsAddNewRow : global::System.Data.DataRow {
            
            private UnitsAddNewDataTable tableUnitsAddNew;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitsAddNewRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUnitsAddNew = ((UnitsAddNewDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    return ((int)(this[this.tableUnitsAddNew.UnitIDColumn]));
                }
                set {
                    this[this.tableUnitsAddNew.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableUnitsAddNew.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'UnitsAddNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsAddNew.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Code {
                get {
                    return ((string)(this[this.tableUnitsAddNew.CodeColumn]));
                }
                set {
                    this[this.tableUnitsAddNew.CodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableUnitsAddNew.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'UnitsAddNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsAddNew.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VIN {
                get {
                    try {
                        return ((string)(this[this.tableUnitsAddNew.VINColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VIN\' in table \'UnitsAddNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsAddNew.VINColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Manufacturer {
                get {
                    try {
                        return ((string)(this[this.tableUnitsAddNew.ManufacturerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Manufacturer\' in table \'UnitsAddNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsAddNew.ManufacturerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Model {
                get {
                    try {
                        return ((string)(this[this.tableUnitsAddNew.ModelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Model\' in table \'UnitsAddNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsAddNew.ModelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Year_ {
                get {
                    try {
                        return ((string)(this[this.tableUnitsAddNew.Year_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Year_\' in table \'UnitsAddNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsAddNew.Year_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTowable {
                get {
                    try {
                        return ((bool)(this[this.tableUnitsAddNew.IsTowableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsTowable\' in table \'UnitsAddNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsAddNew.IsTowableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long LicenseCountry {
                get {
                    try {
                        return ((long)(this[this.tableUnitsAddNew.LicenseCountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LicenseCountry\' in table \'UnitsAddNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsAddNew.LicenseCountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long LicenseState {
                get {
                    try {
                        return ((long)(this[this.tableUnitsAddNew.LicenseStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LicenseState\' in table \'UnitsAddNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsAddNew.LicenseStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LicensePlateNumber {
                get {
                    try {
                        return ((string)(this[this.tableUnitsAddNew.LicensePlateNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LicensePlateNumber\' in table \'UnitsAddNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsAddNew.LicensePlateNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ApportionedTagNumber {
                get {
                    try {
                        return ((string)(this[this.tableUnitsAddNew.ApportionedTagNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApportionedTagNumber\' in table \'UnitsAddNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsAddNew.ApportionedTagNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CompanyLevelID {
                get {
                    try {
                        return ((int)(this[this.tableUnitsAddNew.CompanyLevelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompanyLevelID\' in table \'UnitsAddNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsAddNew.CompanyLevelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableUnitsAddNew.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableUnitsAddNew.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableUnitsAddNew.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableUnitsAddNew.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVINNull() {
                return this.IsNull(this.tableUnitsAddNew.VINColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVINNull() {
                this[this.tableUnitsAddNew.VINColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufacturerNull() {
                return this.IsNull(this.tableUnitsAddNew.ManufacturerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufacturerNull() {
                this[this.tableUnitsAddNew.ManufacturerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModelNull() {
                return this.IsNull(this.tableUnitsAddNew.ModelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModelNull() {
                this[this.tableUnitsAddNew.ModelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYear_Null() {
                return this.IsNull(this.tableUnitsAddNew.Year_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYear_Null() {
                this[this.tableUnitsAddNew.Year_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsTowableNull() {
                return this.IsNull(this.tableUnitsAddNew.IsTowableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsTowableNull() {
                this[this.tableUnitsAddNew.IsTowableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLicenseCountryNull() {
                return this.IsNull(this.tableUnitsAddNew.LicenseCountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLicenseCountryNull() {
                this[this.tableUnitsAddNew.LicenseCountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLicenseStateNull() {
                return this.IsNull(this.tableUnitsAddNew.LicenseStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLicenseStateNull() {
                this[this.tableUnitsAddNew.LicenseStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLicensePlateNumberNull() {
                return this.IsNull(this.tableUnitsAddNew.LicensePlateNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLicensePlateNumberNull() {
                this[this.tableUnitsAddNew.LicensePlateNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApportionedTagNumberNull() {
                return this.IsNull(this.tableUnitsAddNew.ApportionedTagNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApportionedTagNumberNull() {
                this[this.tableUnitsAddNew.ApportionedTagNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyLevelIDNull() {
                return this.IsNull(this.tableUnitsAddNew.CompanyLevelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyLevelIDNull() {
                this[this.tableUnitsAddNew.CompanyLevelIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UnitsChecklistRulesTempRow : global::System.Data.DataRow {
            
            private UnitsChecklistRulesTempDataTable tableUnitsChecklistRulesTemp;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitsChecklistRulesTempRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUnitsChecklistRulesTemp = ((UnitsChecklistRulesTempDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RuleID {
                get {
                    return ((int)(this[this.tableUnitsChecklistRulesTemp.RuleIDColumn]));
                }
                set {
                    this[this.tableUnitsChecklistRulesTemp.RuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return ((int)(this[this.tableUnitsChecklistRulesTemp.CountColumn]));
                }
                set {
                    this[this.tableUnitsChecklistRulesTemp.CountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableUnitsChecklistRulesTemp.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'UnitsChecklistRulesTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsChecklistRulesTemp.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Frequency {
                get {
                    try {
                        return ((string)(this[this.tableUnitsChecklistRulesTemp.FrequencyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Frequency\' in table \'UnitsChecklistRulesTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsChecklistRulesTemp.FrequencyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastService {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUnitsChecklistRulesTemp.LastServiceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastService\' in table \'UnitsChecklistRulesTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsChecklistRulesTemp.LastServiceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime NextDue {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUnitsChecklistRulesTemp.NextDueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NextDue\' in table \'UnitsChecklistRulesTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsChecklistRulesTemp.NextDueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Done {
                get {
                    return ((bool)(this[this.tableUnitsChecklistRulesTemp.DoneColumn]));
                }
                set {
                    this[this.tableUnitsChecklistRulesTemp.DoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    return ((string)(this[this.tableUnitsChecklistRulesTemp.StateColumn]));
                }
                set {
                    this[this.tableUnitsChecklistRulesTemp.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    return ((bool)(this[this.tableUnitsChecklistRulesTemp.SelectedColumn]));
                }
                set {
                    this[this.tableUnitsChecklistRulesTemp.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableUnitsChecklistRulesTemp.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableUnitsChecklistRulesTemp.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFrequencyNull() {
                return this.IsNull(this.tableUnitsChecklistRulesTemp.FrequencyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFrequencyNull() {
                this[this.tableUnitsChecklistRulesTemp.FrequencyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastServiceNull() {
                return this.IsNull(this.tableUnitsChecklistRulesTemp.LastServiceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastServiceNull() {
                this[this.tableUnitsChecklistRulesTemp.LastServiceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNextDueNull() {
                return this.IsNull(this.tableUnitsChecklistRulesTemp.NextDueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNextDueNull() {
                this[this.tableUnitsChecklistRulesTemp.NextDueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UnitsAddNewRowChangeEvent : global::System.EventArgs {
            
            private UnitsAddNewRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsAddNewRowChangeEvent(UnitsAddNewRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsAddNewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UnitsChecklistRulesTempRowChangeEvent : global::System.EventArgs {
            
            private UnitsChecklistRulesTempRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsChecklistRulesTempRowChangeEvent(UnitsChecklistRulesTempRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsChecklistRulesTempRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591