//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.FleetManagement.Units {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("UnitInformationTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class UnitInformationTDS : global::System.Data.DataSet {
        
        private UnitDetailsDataTable tableUnitDetails;
        
        private ChecklistDetailsDataTable tableChecklistDetails;
        
        private ServiceDetailsDataTable tableServiceDetails;
        
        private InspectionDetailsDataTable tableInspectionDetails;
        
        private NoteInformationDataTable tableNoteInformation;
        
        private CostInformationDataTable tableCostInformation;
        
        private CostExceptionsInformationDataTable tableCostExceptionsInformation;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UnitInformationTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected UnitInformationTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["UnitDetails"] != null)) {
                    base.Tables.Add(new UnitDetailsDataTable(ds.Tables["UnitDetails"]));
                }
                if ((ds.Tables["ChecklistDetails"] != null)) {
                    base.Tables.Add(new ChecklistDetailsDataTable(ds.Tables["ChecklistDetails"]));
                }
                if ((ds.Tables["ServiceDetails"] != null)) {
                    base.Tables.Add(new ServiceDetailsDataTable(ds.Tables["ServiceDetails"]));
                }
                if ((ds.Tables["InspectionDetails"] != null)) {
                    base.Tables.Add(new InspectionDetailsDataTable(ds.Tables["InspectionDetails"]));
                }
                if ((ds.Tables["NoteInformation"] != null)) {
                    base.Tables.Add(new NoteInformationDataTable(ds.Tables["NoteInformation"]));
                }
                if ((ds.Tables["CostInformation"] != null)) {
                    base.Tables.Add(new CostInformationDataTable(ds.Tables["CostInformation"]));
                }
                if ((ds.Tables["CostExceptionsInformation"] != null)) {
                    base.Tables.Add(new CostExceptionsInformationDataTable(ds.Tables["CostExceptionsInformation"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UnitDetailsDataTable UnitDetails {
            get {
                return this.tableUnitDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ChecklistDetailsDataTable ChecklistDetails {
            get {
                return this.tableChecklistDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServiceDetailsDataTable ServiceDetails {
            get {
                return this.tableServiceDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InspectionDetailsDataTable InspectionDetails {
            get {
                return this.tableInspectionDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NoteInformationDataTable NoteInformation {
            get {
                return this.tableNoteInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CostInformationDataTable CostInformation {
            get {
                return this.tableCostInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CostExceptionsInformationDataTable CostExceptionsInformation {
            get {
                return this.tableCostExceptionsInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            UnitInformationTDS cln = ((UnitInformationTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["UnitDetails"] != null)) {
                    base.Tables.Add(new UnitDetailsDataTable(ds.Tables["UnitDetails"]));
                }
                if ((ds.Tables["ChecklistDetails"] != null)) {
                    base.Tables.Add(new ChecklistDetailsDataTable(ds.Tables["ChecklistDetails"]));
                }
                if ((ds.Tables["ServiceDetails"] != null)) {
                    base.Tables.Add(new ServiceDetailsDataTable(ds.Tables["ServiceDetails"]));
                }
                if ((ds.Tables["InspectionDetails"] != null)) {
                    base.Tables.Add(new InspectionDetailsDataTable(ds.Tables["InspectionDetails"]));
                }
                if ((ds.Tables["NoteInformation"] != null)) {
                    base.Tables.Add(new NoteInformationDataTable(ds.Tables["NoteInformation"]));
                }
                if ((ds.Tables["CostInformation"] != null)) {
                    base.Tables.Add(new CostInformationDataTable(ds.Tables["CostInformation"]));
                }
                if ((ds.Tables["CostExceptionsInformation"] != null)) {
                    base.Tables.Add(new CostExceptionsInformationDataTable(ds.Tables["CostExceptionsInformation"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableUnitDetails = ((UnitDetailsDataTable)(base.Tables["UnitDetails"]));
            if ((initTable == true)) {
                if ((this.tableUnitDetails != null)) {
                    this.tableUnitDetails.InitVars();
                }
            }
            this.tableChecklistDetails = ((ChecklistDetailsDataTable)(base.Tables["ChecklistDetails"]));
            if ((initTable == true)) {
                if ((this.tableChecklistDetails != null)) {
                    this.tableChecklistDetails.InitVars();
                }
            }
            this.tableServiceDetails = ((ServiceDetailsDataTable)(base.Tables["ServiceDetails"]));
            if ((initTable == true)) {
                if ((this.tableServiceDetails != null)) {
                    this.tableServiceDetails.InitVars();
                }
            }
            this.tableInspectionDetails = ((InspectionDetailsDataTable)(base.Tables["InspectionDetails"]));
            if ((initTable == true)) {
                if ((this.tableInspectionDetails != null)) {
                    this.tableInspectionDetails.InitVars();
                }
            }
            this.tableNoteInformation = ((NoteInformationDataTable)(base.Tables["NoteInformation"]));
            if ((initTable == true)) {
                if ((this.tableNoteInformation != null)) {
                    this.tableNoteInformation.InitVars();
                }
            }
            this.tableCostInformation = ((CostInformationDataTable)(base.Tables["CostInformation"]));
            if ((initTable == true)) {
                if ((this.tableCostInformation != null)) {
                    this.tableCostInformation.InitVars();
                }
            }
            this.tableCostExceptionsInformation = ((CostExceptionsInformationDataTable)(base.Tables["CostExceptionsInformation"]));
            if ((initTable == true)) {
                if ((this.tableCostExceptionsInformation != null)) {
                    this.tableCostExceptionsInformation.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "UnitInformationTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/UnitInformationTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableUnitDetails = new UnitDetailsDataTable();
            base.Tables.Add(this.tableUnitDetails);
            this.tableChecklistDetails = new ChecklistDetailsDataTable();
            base.Tables.Add(this.tableChecklistDetails);
            this.tableServiceDetails = new ServiceDetailsDataTable();
            base.Tables.Add(this.tableServiceDetails);
            this.tableInspectionDetails = new InspectionDetailsDataTable();
            base.Tables.Add(this.tableInspectionDetails);
            this.tableNoteInformation = new NoteInformationDataTable();
            base.Tables.Add(this.tableNoteInformation);
            this.tableCostInformation = new CostInformationDataTable();
            base.Tables.Add(this.tableCostInformation);
            this.tableCostExceptionsInformation = new CostExceptionsInformationDataTable();
            base.Tables.Add(this.tableCostExceptionsInformation);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUnitDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeChecklistDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServiceDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInspectionDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNoteInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCostInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCostExceptionsInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            UnitInformationTDS ds = new UnitInformationTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void UnitDetailsRowChangeEventHandler(object sender, UnitDetailsRowChangeEvent e);
        
        public delegate void ChecklistDetailsRowChangeEventHandler(object sender, ChecklistDetailsRowChangeEvent e);
        
        public delegate void ServiceDetailsRowChangeEventHandler(object sender, ServiceDetailsRowChangeEvent e);
        
        public delegate void InspectionDetailsRowChangeEventHandler(object sender, InspectionDetailsRowChangeEvent e);
        
        public delegate void NoteInformationRowChangeEventHandler(object sender, NoteInformationRowChangeEvent e);
        
        public delegate void CostInformationRowChangeEventHandler(object sender, CostInformationRowChangeEvent e);
        
        public delegate void CostExceptionsInformationRowChangeEventHandler(object sender, CostExceptionsInformationRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UnitDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnUnitCode;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnVIN;
            
            private global::System.Data.DataColumn columnManufacturer;
            
            private global::System.Data.DataColumn columnModel;
            
            private global::System.Data.DataColumn columnYear_;
            
            private global::System.Data.DataColumn columnIsTowable;
            
            private global::System.Data.DataColumn columnCompanyLevelID;
            
            private global::System.Data.DataColumn columnAcquisitionDate;
            
            private global::System.Data.DataColumn columnDispositionDate;
            
            private global::System.Data.DataColumn columnDispositionReason;
            
            private global::System.Data.DataColumn columnOwnerType;
            
            private global::System.Data.DataColumn columnOwnerCountry;
            
            private global::System.Data.DataColumn columnOwnerState;
            
            private global::System.Data.DataColumn columnOwnerName;
            
            private global::System.Data.DataColumn columnOwnerContact;
            
            private global::System.Data.DataColumn columnQualifiedDate;
            
            private global::System.Data.DataColumn columnNotQualifiedDate;
            
            private global::System.Data.DataColumn columnNotQualifiedExplain;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnNotes;
            
            private global::System.Data.DataColumn columnCategories;
            
            private global::System.Data.DataColumn columnLicenseCountry;
            
            private global::System.Data.DataColumn columnLicenseState;
            
            private global::System.Data.DataColumn columnLicensePlateNumbver;
            
            private global::System.Data.DataColumn columnAportionedTagNumber;
            
            private global::System.Data.DataColumn columnActualWeight;
            
            private global::System.Data.DataColumn columnRegisteredWeight;
            
            private global::System.Data.DataColumn columnTireSizeFront;
            
            private global::System.Data.DataColumn columnTireSizeBack;
            
            private global::System.Data.DataColumn columnNumberOfAxes;
            
            private global::System.Data.DataColumn columnFuelType;
            
            private global::System.Data.DataColumn columnBeginningOdometer;
            
            private global::System.Data.DataColumn columnIsReeferEquipped;
            
            private global::System.Data.DataColumn columnIsPTOEquipped;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInsuranceClass;
            
            private global::System.Data.DataColumn columnInsuranceClassRyderSpecified;
            
            private global::System.Data.DataColumn columnPurchasePrice;
            
            private global::System.Data.DataColumn columnScrapDate;
            
            private global::System.Data.DataColumn columnSaleProceeds;
            
            private global::System.Data.DataColumn columnLIBRARY_CATEGORIES_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitDetailsDataTable() {
                this.TableName = "UnitDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UnitDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitCodeColumn {
                get {
                    return this.columnUnitCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VINColumn {
                get {
                    return this.columnVIN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManufacturerColumn {
                get {
                    return this.columnManufacturer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModelColumn {
                get {
                    return this.columnModel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Year_Column {
                get {
                    return this.columnYear_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsTowableColumn {
                get {
                    return this.columnIsTowable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyLevelIDColumn {
                get {
                    return this.columnCompanyLevelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcquisitionDateColumn {
                get {
                    return this.columnAcquisitionDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DispositionDateColumn {
                get {
                    return this.columnDispositionDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DispositionReasonColumn {
                get {
                    return this.columnDispositionReason;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerTypeColumn {
                get {
                    return this.columnOwnerType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerCountryColumn {
                get {
                    return this.columnOwnerCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerStateColumn {
                get {
                    return this.columnOwnerState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerNameColumn {
                get {
                    return this.columnOwnerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerContactColumn {
                get {
                    return this.columnOwnerContact;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QualifiedDateColumn {
                get {
                    return this.columnQualifiedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotQualifiedDateColumn {
                get {
                    return this.columnNotQualifiedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotQualifiedExplainColumn {
                get {
                    return this.columnNotQualifiedExplain;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotesColumn {
                get {
                    return this.columnNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoriesColumn {
                get {
                    return this.columnCategories;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LicenseCountryColumn {
                get {
                    return this.columnLicenseCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LicenseStateColumn {
                get {
                    return this.columnLicenseState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LicensePlateNumbverColumn {
                get {
                    return this.columnLicensePlateNumbver;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AportionedTagNumberColumn {
                get {
                    return this.columnAportionedTagNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActualWeightColumn {
                get {
                    return this.columnActualWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegisteredWeightColumn {
                get {
                    return this.columnRegisteredWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TireSizeFrontColumn {
                get {
                    return this.columnTireSizeFront;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TireSizeBackColumn {
                get {
                    return this.columnTireSizeBack;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumberOfAxesColumn {
                get {
                    return this.columnNumberOfAxes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FuelTypeColumn {
                get {
                    return this.columnFuelType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BeginningOdometerColumn {
                get {
                    return this.columnBeginningOdometer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsReeferEquippedColumn {
                get {
                    return this.columnIsReeferEquipped;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPTOEquippedColumn {
                get {
                    return this.columnIsPTOEquipped;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuranceClassColumn {
                get {
                    return this.columnInsuranceClass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuranceClassRyderSpecifiedColumn {
                get {
                    return this.columnInsuranceClassRyderSpecified;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PurchasePriceColumn {
                get {
                    return this.columnPurchasePrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScrapDateColumn {
                get {
                    return this.columnScrapDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SaleProceedsColumn {
                get {
                    return this.columnSaleProceeds;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LIBRARY_CATEGORIES_IDColumn {
                get {
                    return this.columnLIBRARY_CATEGORIES_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitDetailsRow this[int index] {
                get {
                    return ((UnitDetailsRow)(this.Rows[index]));
                }
            }
            
            public event UnitDetailsRowChangeEventHandler UnitDetailsRowChanging;
            
            public event UnitDetailsRowChangeEventHandler UnitDetailsRowChanged;
            
            public event UnitDetailsRowChangeEventHandler UnitDetailsRowDeleting;
            
            public event UnitDetailsRowChangeEventHandler UnitDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUnitDetailsRow(UnitDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitDetailsRow AddUnitDetailsRow(
                        string UnitCode, 
                        string Description, 
                        string VIN, 
                        string Manufacturer, 
                        string Model, 
                        string Year_, 
                        bool IsTowable, 
                        int CompanyLevelID, 
                        System.DateTime AcquisitionDate, 
                        System.DateTime DispositionDate, 
                        string DispositionReason, 
                        string OwnerType, 
                        long OwnerCountry, 
                        long OwnerState, 
                        string OwnerName, 
                        string OwnerContact, 
                        System.DateTime QualifiedDate, 
                        System.DateTime NotQualifiedDate, 
                        string NotQualifiedExplain, 
                        string State, 
                        string Type, 
                        string Notes, 
                        string Categories, 
                        long LicenseCountry, 
                        long LicenseState, 
                        string LicensePlateNumbver, 
                        string AportionedTagNumber, 
                        string ActualWeight, 
                        string RegisteredWeight, 
                        string TireSizeFront, 
                        string TireSizeBack, 
                        string NumberOfAxes, 
                        string FuelType, 
                        string BeginningOdometer, 
                        bool IsReeferEquipped, 
                        bool IsPTOEquipped, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        string InsuranceClass, 
                        string InsuranceClassRyderSpecified, 
                        decimal PurchasePrice, 
                        System.DateTime ScrapDate, 
                        decimal SaleProceeds, 
                        int LIBRARY_CATEGORIES_ID) {
                UnitDetailsRow rowUnitDetailsRow = ((UnitDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        UnitCode,
                        Description,
                        VIN,
                        Manufacturer,
                        Model,
                        Year_,
                        IsTowable,
                        CompanyLevelID,
                        AcquisitionDate,
                        DispositionDate,
                        DispositionReason,
                        OwnerType,
                        OwnerCountry,
                        OwnerState,
                        OwnerName,
                        OwnerContact,
                        QualifiedDate,
                        NotQualifiedDate,
                        NotQualifiedExplain,
                        State,
                        Type,
                        Notes,
                        Categories,
                        LicenseCountry,
                        LicenseState,
                        LicensePlateNumbver,
                        AportionedTagNumber,
                        ActualWeight,
                        RegisteredWeight,
                        TireSizeFront,
                        TireSizeBack,
                        NumberOfAxes,
                        FuelType,
                        BeginningOdometer,
                        IsReeferEquipped,
                        IsPTOEquipped,
                        Deleted,
                        COMPANY_ID,
                        InsuranceClass,
                        InsuranceClassRyderSpecified,
                        PurchasePrice,
                        ScrapDate,
                        SaleProceeds,
                        LIBRARY_CATEGORIES_ID};
                rowUnitDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUnitDetailsRow);
                return rowUnitDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitDetailsRow FindByUnitID(int UnitID) {
                return ((UnitDetailsRow)(this.Rows.Find(new object[] {
                            UnitID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UnitDetailsDataTable cln = ((UnitDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UnitDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUnitID = base.Columns["UnitID"];
                this.columnUnitCode = base.Columns["UnitCode"];
                this.columnDescription = base.Columns["Description"];
                this.columnVIN = base.Columns["VIN"];
                this.columnManufacturer = base.Columns["Manufacturer"];
                this.columnModel = base.Columns["Model"];
                this.columnYear_ = base.Columns["Year_"];
                this.columnIsTowable = base.Columns["IsTowable"];
                this.columnCompanyLevelID = base.Columns["CompanyLevelID"];
                this.columnAcquisitionDate = base.Columns["AcquisitionDate"];
                this.columnDispositionDate = base.Columns["DispositionDate"];
                this.columnDispositionReason = base.Columns["DispositionReason"];
                this.columnOwnerType = base.Columns["OwnerType"];
                this.columnOwnerCountry = base.Columns["OwnerCountry"];
                this.columnOwnerState = base.Columns["OwnerState"];
                this.columnOwnerName = base.Columns["OwnerName"];
                this.columnOwnerContact = base.Columns["OwnerContact"];
                this.columnQualifiedDate = base.Columns["QualifiedDate"];
                this.columnNotQualifiedDate = base.Columns["NotQualifiedDate"];
                this.columnNotQualifiedExplain = base.Columns["NotQualifiedExplain"];
                this.columnState = base.Columns["State"];
                this.columnType = base.Columns["Type"];
                this.columnNotes = base.Columns["Notes"];
                this.columnCategories = base.Columns["Categories"];
                this.columnLicenseCountry = base.Columns["LicenseCountry"];
                this.columnLicenseState = base.Columns["LicenseState"];
                this.columnLicensePlateNumbver = base.Columns["LicensePlateNumbver"];
                this.columnAportionedTagNumber = base.Columns["AportionedTagNumber"];
                this.columnActualWeight = base.Columns["ActualWeight"];
                this.columnRegisteredWeight = base.Columns["RegisteredWeight"];
                this.columnTireSizeFront = base.Columns["TireSizeFront"];
                this.columnTireSizeBack = base.Columns["TireSizeBack"];
                this.columnNumberOfAxes = base.Columns["NumberOfAxes"];
                this.columnFuelType = base.Columns["FuelType"];
                this.columnBeginningOdometer = base.Columns["BeginningOdometer"];
                this.columnIsReeferEquipped = base.Columns["IsReeferEquipped"];
                this.columnIsPTOEquipped = base.Columns["IsPTOEquipped"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInsuranceClass = base.Columns["InsuranceClass"];
                this.columnInsuranceClassRyderSpecified = base.Columns["InsuranceClassRyderSpecified"];
                this.columnPurchasePrice = base.Columns["PurchasePrice"];
                this.columnScrapDate = base.Columns["ScrapDate"];
                this.columnSaleProceeds = base.Columns["SaleProceeds"];
                this.columnLIBRARY_CATEGORIES_ID = base.Columns["LIBRARY_CATEGORIES_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnUnitCode = new global::System.Data.DataColumn("UnitCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitCode);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnVIN = new global::System.Data.DataColumn("VIN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVIN);
                this.columnManufacturer = new global::System.Data.DataColumn("Manufacturer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturer);
                this.columnModel = new global::System.Data.DataColumn("Model", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModel);
                this.columnYear_ = new global::System.Data.DataColumn("Year_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear_);
                this.columnIsTowable = new global::System.Data.DataColumn("IsTowable", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsTowable);
                this.columnCompanyLevelID = new global::System.Data.DataColumn("CompanyLevelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyLevelID);
                this.columnAcquisitionDate = new global::System.Data.DataColumn("AcquisitionDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcquisitionDate);
                this.columnDispositionDate = new global::System.Data.DataColumn("DispositionDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDispositionDate);
                this.columnDispositionReason = new global::System.Data.DataColumn("DispositionReason", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDispositionReason);
                this.columnOwnerType = new global::System.Data.DataColumn("OwnerType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerType);
                this.columnOwnerCountry = new global::System.Data.DataColumn("OwnerCountry", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerCountry);
                this.columnOwnerState = new global::System.Data.DataColumn("OwnerState", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerState);
                this.columnOwnerName = new global::System.Data.DataColumn("OwnerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerName);
                this.columnOwnerContact = new global::System.Data.DataColumn("OwnerContact", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerContact);
                this.columnQualifiedDate = new global::System.Data.DataColumn("QualifiedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQualifiedDate);
                this.columnNotQualifiedDate = new global::System.Data.DataColumn("NotQualifiedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotQualifiedDate);
                this.columnNotQualifiedExplain = new global::System.Data.DataColumn("NotQualifiedExplain", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotQualifiedExplain);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnNotes = new global::System.Data.DataColumn("Notes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnCategories = new global::System.Data.DataColumn("Categories", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategories);
                this.columnLicenseCountry = new global::System.Data.DataColumn("LicenseCountry", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLicenseCountry);
                this.columnLicenseState = new global::System.Data.DataColumn("LicenseState", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLicenseState);
                this.columnLicensePlateNumbver = new global::System.Data.DataColumn("LicensePlateNumbver", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLicensePlateNumbver);
                this.columnAportionedTagNumber = new global::System.Data.DataColumn("AportionedTagNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAportionedTagNumber);
                this.columnActualWeight = new global::System.Data.DataColumn("ActualWeight", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActualWeight);
                this.columnRegisteredWeight = new global::System.Data.DataColumn("RegisteredWeight", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegisteredWeight);
                this.columnTireSizeFront = new global::System.Data.DataColumn("TireSizeFront", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTireSizeFront);
                this.columnTireSizeBack = new global::System.Data.DataColumn("TireSizeBack", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTireSizeBack);
                this.columnNumberOfAxes = new global::System.Data.DataColumn("NumberOfAxes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumberOfAxes);
                this.columnFuelType = new global::System.Data.DataColumn("FuelType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFuelType);
                this.columnBeginningOdometer = new global::System.Data.DataColumn("BeginningOdometer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBeginningOdometer);
                this.columnIsReeferEquipped = new global::System.Data.DataColumn("IsReeferEquipped", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsReeferEquipped);
                this.columnIsPTOEquipped = new global::System.Data.DataColumn("IsPTOEquipped", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPTOEquipped);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInsuranceClass = new global::System.Data.DataColumn("InsuranceClass", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsuranceClass);
                this.columnInsuranceClassRyderSpecified = new global::System.Data.DataColumn("InsuranceClassRyderSpecified", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsuranceClassRyderSpecified);
                this.columnPurchasePrice = new global::System.Data.DataColumn("PurchasePrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPurchasePrice);
                this.columnScrapDate = new global::System.Data.DataColumn("ScrapDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScrapDate);
                this.columnSaleProceeds = new global::System.Data.DataColumn("SaleProceeds", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSaleProceeds);
                this.columnLIBRARY_CATEGORIES_ID = new global::System.Data.DataColumn("LIBRARY_CATEGORIES_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLIBRARY_CATEGORIES_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUnitID}, true));
                this.columnUnitID.AutoIncrement = true;
                this.columnUnitID.AllowDBNull = false;
                this.columnUnitID.ReadOnly = true;
                this.columnUnitID.Unique = true;
                this.columnUnitCode.AllowDBNull = false;
                this.columnUnitCode.MaxLength = 25;
                this.columnDescription.MaxLength = 250;
                this.columnVIN.MaxLength = 50;
                this.columnManufacturer.MaxLength = 100;
                this.columnModel.MaxLength = 25;
                this.columnYear_.MaxLength = 5;
                this.columnIsTowable.AllowDBNull = false;
                this.columnCompanyLevelID.AllowDBNull = false;
                this.columnDispositionReason.MaxLength = 100;
                this.columnOwnerType.MaxLength = 25;
                this.columnOwnerName.MaxLength = 100;
                this.columnOwnerContact.MaxLength = 255;
                this.columnNotQualifiedExplain.MaxLength = 1073741823;
                this.columnState.AllowDBNull = false;
                this.columnState.MaxLength = 25;
                this.columnType.MaxLength = 25;
                this.columnNotes.MaxLength = 1073741823;
                this.columnCategories.MaxLength = 1073741823;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitDetailsRow NewUnitDetailsRow() {
                return ((UnitDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UnitDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UnitDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UnitDetailsRowChanged != null)) {
                    this.UnitDetailsRowChanged(this, new UnitDetailsRowChangeEvent(((UnitDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UnitDetailsRowChanging != null)) {
                    this.UnitDetailsRowChanging(this, new UnitDetailsRowChangeEvent(((UnitDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UnitDetailsRowDeleted != null)) {
                    this.UnitDetailsRowDeleted(this, new UnitDetailsRowChangeEvent(((UnitDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UnitDetailsRowDeleting != null)) {
                    this.UnitDetailsRowDeleting(this, new UnitDetailsRowChangeEvent(((UnitDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUnitDetailsRow(UnitDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                UnitInformationTDS ds = new UnitInformationTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UnitDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ChecklistDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRuleID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnFrequency;
            
            private global::System.Data.DataColumn columnLastService;
            
            private global::System.Data.DataColumn columnNextDue;
            
            private global::System.Data.DataColumn columnDone;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChecklistDetailsDataTable() {
                this.TableName = "ChecklistDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ChecklistDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ChecklistDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RuleIDColumn {
                get {
                    return this.columnRuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FrequencyColumn {
                get {
                    return this.columnFrequency;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastServiceColumn {
                get {
                    return this.columnLastService;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NextDueColumn {
                get {
                    return this.columnNextDue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DoneColumn {
                get {
                    return this.columnDone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChecklistDetailsRow this[int index] {
                get {
                    return ((ChecklistDetailsRow)(this.Rows[index]));
                }
            }
            
            public event ChecklistDetailsRowChangeEventHandler ChecklistDetailsRowChanging;
            
            public event ChecklistDetailsRowChangeEventHandler ChecklistDetailsRowChanged;
            
            public event ChecklistDetailsRowChangeEventHandler ChecklistDetailsRowDeleting;
            
            public event ChecklistDetailsRowChangeEventHandler ChecklistDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddChecklistDetailsRow(ChecklistDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChecklistDetailsRow AddChecklistDetailsRow(int RuleID, string Name, string Frequency, System.DateTime LastService, System.DateTime NextDue, bool Done, string State, bool Deleted) {
                ChecklistDetailsRow rowChecklistDetailsRow = ((ChecklistDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RuleID,
                        Name,
                        Frequency,
                        LastService,
                        NextDue,
                        Done,
                        State,
                        Deleted};
                rowChecklistDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowChecklistDetailsRow);
                return rowChecklistDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChecklistDetailsRow FindByRuleID(int RuleID) {
                return ((ChecklistDetailsRow)(this.Rows.Find(new object[] {
                            RuleID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ChecklistDetailsDataTable cln = ((ChecklistDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ChecklistDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRuleID = base.Columns["RuleID"];
                this.columnName = base.Columns["Name"];
                this.columnFrequency = base.Columns["Frequency"];
                this.columnLastService = base.Columns["LastService"];
                this.columnNextDue = base.Columns["NextDue"];
                this.columnDone = base.Columns["Done"];
                this.columnState = base.Columns["State"];
                this.columnDeleted = base.Columns["Deleted"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRuleID = new global::System.Data.DataColumn("RuleID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRuleID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnFrequency = new global::System.Data.DataColumn("Frequency", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrequency);
                this.columnLastService = new global::System.Data.DataColumn("LastService", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastService);
                this.columnNextDue = new global::System.Data.DataColumn("NextDue", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNextDue);
                this.columnDone = new global::System.Data.DataColumn("Done", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDone);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRuleID}, true));
                this.columnRuleID.AllowDBNull = false;
                this.columnRuleID.Unique = true;
                this.columnDone.AllowDBNull = false;
                this.columnState.AllowDBNull = false;
                this.columnState.MaxLength = 25;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChecklistDetailsRow NewChecklistDetailsRow() {
                return ((ChecklistDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ChecklistDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ChecklistDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ChecklistDetailsRowChanged != null)) {
                    this.ChecklistDetailsRowChanged(this, new ChecklistDetailsRowChangeEvent(((ChecklistDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ChecklistDetailsRowChanging != null)) {
                    this.ChecklistDetailsRowChanging(this, new ChecklistDetailsRowChangeEvent(((ChecklistDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ChecklistDetailsRowDeleted != null)) {
                    this.ChecklistDetailsRowDeleted(this, new ChecklistDetailsRowChangeEvent(((ChecklistDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ChecklistDetailsRowDeleting != null)) {
                    this.ChecklistDetailsRowDeleting(this, new ChecklistDetailsRowChangeEvent(((ChecklistDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveChecklistDetailsRow(ChecklistDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                UnitInformationTDS ds = new UnitInformationTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ChecklistDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServiceDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnServiceID;
            
            private global::System.Data.DataColumn columnNumber;
            
            private global::System.Data.DataColumn columnDateTime_;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnSelected;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceDetailsDataTable() {
                this.TableName = "ServiceDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServiceDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServiceDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceIDColumn {
                get {
                    return this.columnServiceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateTime_Column {
                get {
                    return this.columnDateTime_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceDetailsRow this[int index] {
                get {
                    return ((ServiceDetailsRow)(this.Rows[index]));
                }
            }
            
            public event ServiceDetailsRowChangeEventHandler ServiceDetailsRowChanging;
            
            public event ServiceDetailsRowChangeEventHandler ServiceDetailsRowChanged;
            
            public event ServiceDetailsRowChangeEventHandler ServiceDetailsRowDeleting;
            
            public event ServiceDetailsRowChangeEventHandler ServiceDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServiceDetailsRow(ServiceDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceDetailsRow AddServiceDetailsRow(string Number, System.DateTime DateTime_, string Description, string State, bool Selected) {
                ServiceDetailsRow rowServiceDetailsRow = ((ServiceDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Number,
                        DateTime_,
                        Description,
                        State,
                        Selected};
                rowServiceDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowServiceDetailsRow);
                return rowServiceDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceDetailsRow FindByServiceID(int ServiceID) {
                return ((ServiceDetailsRow)(this.Rows.Find(new object[] {
                            ServiceID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ServiceDetailsDataTable cln = ((ServiceDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ServiceDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnServiceID = base.Columns["ServiceID"];
                this.columnNumber = base.Columns["Number"];
                this.columnDateTime_ = base.Columns["DateTime_"];
                this.columnDescription = base.Columns["Description"];
                this.columnState = base.Columns["State"];
                this.columnSelected = base.Columns["Selected"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnServiceID = new global::System.Data.DataColumn("ServiceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceID);
                this.columnNumber = new global::System.Data.DataColumn("Number", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumber);
                this.columnDateTime_ = new global::System.Data.DataColumn("DateTime_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTime_);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnServiceID}, true));
                this.columnServiceID.AutoIncrement = true;
                this.columnServiceID.AllowDBNull = false;
                this.columnServiceID.ReadOnly = true;
                this.columnServiceID.Unique = true;
                this.columnNumber.AllowDBNull = false;
                this.columnNumber.MaxLength = 25;
                this.columnDateTime_.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnDescription.MaxLength = 1073741823;
                this.columnState.AllowDBNull = false;
                this.columnState.MaxLength = 25;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceDetailsRow NewServiceDetailsRow() {
                return ((ServiceDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ServiceDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ServiceDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServiceDetailsRowChanged != null)) {
                    this.ServiceDetailsRowChanged(this, new ServiceDetailsRowChangeEvent(((ServiceDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServiceDetailsRowChanging != null)) {
                    this.ServiceDetailsRowChanging(this, new ServiceDetailsRowChangeEvent(((ServiceDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServiceDetailsRowDeleted != null)) {
                    this.ServiceDetailsRowDeleted(this, new ServiceDetailsRowChangeEvent(((ServiceDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServiceDetailsRowDeleting != null)) {
                    this.ServiceDetailsRowDeleting(this, new ServiceDetailsRowChangeEvent(((ServiceDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServiceDetailsRow(ServiceDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                UnitInformationTDS ds = new UnitInformationTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServiceDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InspectionDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnInspectionID;
            
            private global::System.Data.DataColumn columnDate_;
            
            private global::System.Data.DataColumn columnCountry;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnResult;
            
            private global::System.Data.DataColumn columnCost;
            
            private global::System.Data.DataColumn columnNotes;
            
            private global::System.Data.DataColumn columnInspectedBy;
            
            private global::System.Data.DataColumn columnAttach;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionDetailsDataTable() {
                this.TableName = "InspectionDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InspectionDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InspectionDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InspectionIDColumn {
                get {
                    return this.columnInspectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Date_Column {
                get {
                    return this.columnDate_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResultColumn {
                get {
                    return this.columnResult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostColumn {
                get {
                    return this.columnCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotesColumn {
                get {
                    return this.columnNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InspectedByColumn {
                get {
                    return this.columnInspectedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AttachColumn {
                get {
                    return this.columnAttach;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionDetailsRow this[int index] {
                get {
                    return ((InspectionDetailsRow)(this.Rows[index]));
                }
            }
            
            public event InspectionDetailsRowChangeEventHandler InspectionDetailsRowChanging;
            
            public event InspectionDetailsRowChangeEventHandler InspectionDetailsRowChanged;
            
            public event InspectionDetailsRowChangeEventHandler InspectionDetailsRowDeleting;
            
            public event InspectionDetailsRowChangeEventHandler InspectionDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInspectionDetailsRow(InspectionDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionDetailsRow AddInspectionDetailsRow(int InspectionID, System.DateTime Date_, long Country, long State, string Type, string Result, decimal Cost, string Notes, string InspectedBy, string Attach, bool Deleted, bool InDatabase) {
                InspectionDetailsRow rowInspectionDetailsRow = ((InspectionDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        InspectionID,
                        Date_,
                        Country,
                        State,
                        Type,
                        Result,
                        Cost,
                        Notes,
                        InspectedBy,
                        Attach,
                        Deleted,
                        InDatabase};
                rowInspectionDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInspectionDetailsRow);
                return rowInspectionDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionDetailsRow FindByInspectionID(int InspectionID) {
                return ((InspectionDetailsRow)(this.Rows.Find(new object[] {
                            InspectionID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InspectionDetailsDataTable cln = ((InspectionDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InspectionDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInspectionID = base.Columns["InspectionID"];
                this.columnDate_ = base.Columns["Date_"];
                this.columnCountry = base.Columns["Country"];
                this.columnState = base.Columns["State"];
                this.columnType = base.Columns["Type"];
                this.columnResult = base.Columns["Result"];
                this.columnCost = base.Columns["Cost"];
                this.columnNotes = base.Columns["Notes"];
                this.columnInspectedBy = base.Columns["InspectedBy"];
                this.columnAttach = base.Columns["Attach"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnInDatabase = base.Columns["InDatabase"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInspectionID = new global::System.Data.DataColumn("InspectionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspectionID);
                this.columnDate_ = new global::System.Data.DataColumn("Date_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate_);
                this.columnCountry = new global::System.Data.DataColumn("Country", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountry);
                this.columnState = new global::System.Data.DataColumn("State", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnResult = new global::System.Data.DataColumn("Result", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResult);
                this.columnCost = new global::System.Data.DataColumn("Cost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCost);
                this.columnNotes = new global::System.Data.DataColumn("Notes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnInspectedBy = new global::System.Data.DataColumn("InspectedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspectedBy);
                this.columnAttach = new global::System.Data.DataColumn("Attach", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAttach);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnInspectionID}, true));
                this.columnInspectionID.AllowDBNull = false;
                this.columnInspectionID.Unique = true;
                this.columnDate_.AllowDBNull = false;
                this.columnCountry.AllowDBNull = false;
                this.columnState.AllowDBNull = false;
                this.columnType.AllowDBNull = false;
                this.columnType.MaxLength = 25;
                this.columnResult.MaxLength = 25;
                this.columnNotes.MaxLength = 1073741823;
                this.columnInspectedBy.MaxLength = 100;
                this.columnAttach.MaxLength = 10;
                this.columnDeleted.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionDetailsRow NewInspectionDetailsRow() {
                return ((InspectionDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InspectionDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InspectionDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InspectionDetailsRowChanged != null)) {
                    this.InspectionDetailsRowChanged(this, new InspectionDetailsRowChangeEvent(((InspectionDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InspectionDetailsRowChanging != null)) {
                    this.InspectionDetailsRowChanging(this, new InspectionDetailsRowChangeEvent(((InspectionDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InspectionDetailsRowDeleted != null)) {
                    this.InspectionDetailsRowDeleted(this, new InspectionDetailsRowChangeEvent(((InspectionDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InspectionDetailsRowDeleting != null)) {
                    this.InspectionDetailsRowDeleting(this, new InspectionDetailsRowChangeEvent(((InspectionDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInspectionDetailsRow(InspectionDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                UnitInformationTDS ds = new UnitInformationTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InspectionDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NoteInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnDateTime_;
            
            private global::System.Data.DataColumn columnNote;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnLIBRARY_FILES_ID;
            
            private global::System.Data.DataColumn columnORIGINAL_FILENAME;
            
            private global::System.Data.DataColumn columnFILENAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoteInformationDataTable() {
                this.TableName = "NoteInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NoteInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NoteInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateTime_Column {
                get {
                    return this.columnDateTime_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LIBRARY_FILES_IDColumn {
                get {
                    return this.columnLIBRARY_FILES_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORIGINAL_FILENAMEColumn {
                get {
                    return this.columnORIGINAL_FILENAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FILENAMEColumn {
                get {
                    return this.columnFILENAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoteInformationRow this[int index] {
                get {
                    return ((NoteInformationRow)(this.Rows[index]));
                }
            }
            
            public event NoteInformationRowChangeEventHandler NoteInformationRowChanging;
            
            public event NoteInformationRowChangeEventHandler NoteInformationRowChanged;
            
            public event NoteInformationRowChangeEventHandler NoteInformationRowDeleting;
            
            public event NoteInformationRowChangeEventHandler NoteInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNoteInformationRow(NoteInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoteInformationRow AddNoteInformationRow(int UnitID, int RefID, string Subject, int UserID, System.DateTime DateTime_, string Note, bool Deleted, int COMPANY_ID, bool InDatabase, int LIBRARY_FILES_ID, string ORIGINAL_FILENAME, string FILENAME) {
                NoteInformationRow rowNoteInformationRow = ((NoteInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UnitID,
                        RefID,
                        Subject,
                        UserID,
                        DateTime_,
                        Note,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        LIBRARY_FILES_ID,
                        ORIGINAL_FILENAME,
                        FILENAME};
                rowNoteInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNoteInformationRow);
                return rowNoteInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoteInformationRow FindByUnitIDRefID(int UnitID, int RefID) {
                return ((NoteInformationRow)(this.Rows.Find(new object[] {
                            UnitID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                NoteInformationDataTable cln = ((NoteInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NoteInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUnitID = base.Columns["UnitID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnSubject = base.Columns["Subject"];
                this.columnUserID = base.Columns["UserID"];
                this.columnDateTime_ = base.Columns["DateTime_"];
                this.columnNote = base.Columns["Note"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnLIBRARY_FILES_ID = base.Columns["LIBRARY_FILES_ID"];
                this.columnORIGINAL_FILENAME = base.Columns["ORIGINAL_FILENAME"];
                this.columnFILENAME = base.Columns["FILENAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnDateTime_ = new global::System.Data.DataColumn("DateTime_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTime_);
                this.columnNote = new global::System.Data.DataColumn("Note", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnLIBRARY_FILES_ID = new global::System.Data.DataColumn("LIBRARY_FILES_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLIBRARY_FILES_ID);
                this.columnORIGINAL_FILENAME = new global::System.Data.DataColumn("ORIGINAL_FILENAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORIGINAL_FILENAME);
                this.columnFILENAME = new global::System.Data.DataColumn("FILENAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFILENAME);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUnitID,
                                this.columnRefID}, true));
                this.columnUnitID.AllowDBNull = false;
                this.columnUnitID.Caption = "ServiceID";
                this.columnRefID.AllowDBNull = false;
                this.columnSubject.AllowDBNull = false;
                this.columnSubject.MaxLength = 100;
                this.columnUserID.AllowDBNull = false;
                this.columnDateTime_.AllowDBNull = false;
                this.columnNote.AllowDBNull = false;
                this.columnNote.MaxLength = 1073741823;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnInDatabase.Caption = "InServiceNoteDatabase";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoteInformationRow NewNoteInformationRow() {
                return ((NoteInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NoteInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(NoteInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NoteInformationRowChanged != null)) {
                    this.NoteInformationRowChanged(this, new NoteInformationRowChangeEvent(((NoteInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NoteInformationRowChanging != null)) {
                    this.NoteInformationRowChanging(this, new NoteInformationRowChangeEvent(((NoteInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NoteInformationRowDeleted != null)) {
                    this.NoteInformationRowDeleted(this, new NoteInformationRowChangeEvent(((NoteInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NoteInformationRowDeleting != null)) {
                    this.NoteInformationRowDeleting(this, new NoteInformationRowChangeEvent(((NoteInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNoteInformationRow(NoteInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                UnitInformationTDS ds = new UnitInformationTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NoteInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CostInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostID;
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostInformationDataTable() {
                this.TableName = "CostInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CostInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CostInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostIDColumn {
                get {
                    return this.columnCostID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostInformationRow this[int index] {
                get {
                    return ((CostInformationRow)(this.Rows[index]));
                }
            }
            
            public event CostInformationRowChangeEventHandler CostInformationRowChanging;
            
            public event CostInformationRowChangeEventHandler CostInformationRowChanged;
            
            public event CostInformationRowChangeEventHandler CostInformationRowDeleting;
            
            public event CostInformationRowChangeEventHandler CostInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCostInformationRow(CostInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostInformationRow AddCostInformationRow(int CostID, int UnitID, System.DateTime Date, string UnitOfMeasurement, decimal CostCad, decimal CostUsd, bool Deleted, int COMPANY_ID, bool InDatabase) {
                CostInformationRow rowCostInformationRow = ((CostInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostID,
                        UnitID,
                        Date,
                        UnitOfMeasurement,
                        CostCad,
                        CostUsd,
                        Deleted,
                        COMPANY_ID,
                        InDatabase};
                rowCostInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCostInformationRow);
                return rowCostInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostInformationRow FindByCostID(int CostID) {
                return ((CostInformationRow)(this.Rows.Find(new object[] {
                            CostID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CostInformationDataTable cln = ((CostInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CostInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostID = base.Columns["CostID"];
                this.columnUnitID = base.Columns["UnitID"];
                this.columnDate = base.Columns["Date"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostID = new global::System.Data.DataColumn("CostID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostID);
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostID}, true));
                this.columnCostID.AllowDBNull = false;
                this.columnCostID.Unique = true;
                this.columnUnitID.AllowDBNull = false;
                this.columnDate.AllowDBNull = false;
                this.columnUnitOfMeasurement.AllowDBNull = false;
                this.columnUnitOfMeasurement.MaxLength = 25;
                this.columnCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostInformationRow NewCostInformationRow() {
                return ((CostInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CostInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CostInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CostInformationRowChanged != null)) {
                    this.CostInformationRowChanged(this, new CostInformationRowChangeEvent(((CostInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CostInformationRowChanging != null)) {
                    this.CostInformationRowChanging(this, new CostInformationRowChangeEvent(((CostInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CostInformationRowDeleted != null)) {
                    this.CostInformationRowDeleted(this, new CostInformationRowChangeEvent(((CostInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CostInformationRowDeleting != null)) {
                    this.CostInformationRowDeleting(this, new CostInformationRowChangeEvent(((CostInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCostInformationRow(CostInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                UnitInformationTDS ds = new UnitInformationTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CostInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CostExceptionsInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostExceptionsInformationDataTable() {
                this.TableName = "CostExceptionsInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CostExceptionsInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CostExceptionsInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostIDColumn {
                get {
                    return this.columnCostID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostExceptionsInformationRow this[int index] {
                get {
                    return ((CostExceptionsInformationRow)(this.Rows[index]));
                }
            }
            
            public event CostExceptionsInformationRowChangeEventHandler CostExceptionsInformationRowChanging;
            
            public event CostExceptionsInformationRowChangeEventHandler CostExceptionsInformationRowChanged;
            
            public event CostExceptionsInformationRowChangeEventHandler CostExceptionsInformationRowDeleting;
            
            public event CostExceptionsInformationRowChangeEventHandler CostExceptionsInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCostExceptionsInformationRow(CostExceptionsInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostExceptionsInformationRow AddCostExceptionsInformationRow(int CostID, int RefID, int UnitID, string Work_, string UnitOfMeasurement, decimal CostCad, decimal CostUsd, bool Deleted, int COMPANY_ID, bool InDatabase) {
                CostExceptionsInformationRow rowCostExceptionsInformationRow = ((CostExceptionsInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostID,
                        RefID,
                        UnitID,
                        Work_,
                        UnitOfMeasurement,
                        CostCad,
                        CostUsd,
                        Deleted,
                        COMPANY_ID,
                        InDatabase};
                rowCostExceptionsInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCostExceptionsInformationRow);
                return rowCostExceptionsInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostExceptionsInformationRow FindByCostIDRefID(int CostID, int RefID) {
                return ((CostExceptionsInformationRow)(this.Rows.Find(new object[] {
                            CostID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CostExceptionsInformationDataTable cln = ((CostExceptionsInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CostExceptionsInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostID = base.Columns["CostID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnUnitID = base.Columns["UnitID"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostID = new global::System.Data.DataColumn("CostID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostID,
                                this.columnRefID}, true));
                this.columnCostID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnUnitID.AllowDBNull = false;
                this.columnWork_.AllowDBNull = false;
                this.columnWork_.MaxLength = 50;
                this.columnUnitOfMeasurement.AllowDBNull = false;
                this.columnUnitOfMeasurement.MaxLength = 25;
                this.columnCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostExceptionsInformationRow NewCostExceptionsInformationRow() {
                return ((CostExceptionsInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CostExceptionsInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CostExceptionsInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CostExceptionsInformationRowChanged != null)) {
                    this.CostExceptionsInformationRowChanged(this, new CostExceptionsInformationRowChangeEvent(((CostExceptionsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CostExceptionsInformationRowChanging != null)) {
                    this.CostExceptionsInformationRowChanging(this, new CostExceptionsInformationRowChangeEvent(((CostExceptionsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CostExceptionsInformationRowDeleted != null)) {
                    this.CostExceptionsInformationRowDeleted(this, new CostExceptionsInformationRowChangeEvent(((CostExceptionsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CostExceptionsInformationRowDeleting != null)) {
                    this.CostExceptionsInformationRowDeleting(this, new CostExceptionsInformationRowChangeEvent(((CostExceptionsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCostExceptionsInformationRow(CostExceptionsInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                UnitInformationTDS ds = new UnitInformationTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CostExceptionsInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UnitDetailsRow : global::System.Data.DataRow {
            
            private UnitDetailsDataTable tableUnitDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUnitDetails = ((UnitDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    return ((int)(this[this.tableUnitDetails.UnitIDColumn]));
                }
                set {
                    this[this.tableUnitDetails.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitCode {
                get {
                    return ((string)(this[this.tableUnitDetails.UnitCodeColumn]));
                }
                set {
                    this[this.tableUnitDetails.UnitCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableUnitDetails.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VIN {
                get {
                    try {
                        return ((string)(this[this.tableUnitDetails.VINColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VIN\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.VINColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Manufacturer {
                get {
                    try {
                        return ((string)(this[this.tableUnitDetails.ManufacturerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Manufacturer\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.ManufacturerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Model {
                get {
                    try {
                        return ((string)(this[this.tableUnitDetails.ModelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Model\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.ModelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Year_ {
                get {
                    try {
                        return ((string)(this[this.tableUnitDetails.Year_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Year_\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.Year_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTowable {
                get {
                    return ((bool)(this[this.tableUnitDetails.IsTowableColumn]));
                }
                set {
                    this[this.tableUnitDetails.IsTowableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CompanyLevelID {
                get {
                    return ((int)(this[this.tableUnitDetails.CompanyLevelIDColumn]));
                }
                set {
                    this[this.tableUnitDetails.CompanyLevelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AcquisitionDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUnitDetails.AcquisitionDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AcquisitionDate\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.AcquisitionDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DispositionDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUnitDetails.DispositionDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DispositionDate\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.DispositionDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DispositionReason {
                get {
                    try {
                        return ((string)(this[this.tableUnitDetails.DispositionReasonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DispositionReason\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.DispositionReasonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerType {
                get {
                    try {
                        return ((string)(this[this.tableUnitDetails.OwnerTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerType\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.OwnerTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long OwnerCountry {
                get {
                    try {
                        return ((long)(this[this.tableUnitDetails.OwnerCountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerCountry\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.OwnerCountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long OwnerState {
                get {
                    try {
                        return ((long)(this[this.tableUnitDetails.OwnerStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerState\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.OwnerStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerName {
                get {
                    try {
                        return ((string)(this[this.tableUnitDetails.OwnerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerName\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.OwnerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerContact {
                get {
                    try {
                        return ((string)(this[this.tableUnitDetails.OwnerContactColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerContact\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.OwnerContactColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime QualifiedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUnitDetails.QualifiedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QualifiedDate\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.QualifiedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime NotQualifiedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUnitDetails.NotQualifiedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NotQualifiedDate\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.NotQualifiedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NotQualifiedExplain {
                get {
                    try {
                        return ((string)(this[this.tableUnitDetails.NotQualifiedExplainColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NotQualifiedExplain\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.NotQualifiedExplainColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    return ((string)(this[this.tableUnitDetails.StateColumn]));
                }
                set {
                    this[this.tableUnitDetails.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableUnitDetails.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Notes {
                get {
                    try {
                        return ((string)(this[this.tableUnitDetails.NotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Notes\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.NotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Categories {
                get {
                    try {
                        return ((string)(this[this.tableUnitDetails.CategoriesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Categories\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.CategoriesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long LicenseCountry {
                get {
                    try {
                        return ((long)(this[this.tableUnitDetails.LicenseCountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LicenseCountry\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.LicenseCountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long LicenseState {
                get {
                    try {
                        return ((long)(this[this.tableUnitDetails.LicenseStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LicenseState\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.LicenseStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LicensePlateNumbver {
                get {
                    try {
                        return ((string)(this[this.tableUnitDetails.LicensePlateNumbverColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LicensePlateNumbver\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.LicensePlateNumbverColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AportionedTagNumber {
                get {
                    try {
                        return ((string)(this[this.tableUnitDetails.AportionedTagNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AportionedTagNumber\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.AportionedTagNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ActualWeight {
                get {
                    try {
                        return ((string)(this[this.tableUnitDetails.ActualWeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActualWeight\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.ActualWeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RegisteredWeight {
                get {
                    try {
                        return ((string)(this[this.tableUnitDetails.RegisteredWeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RegisteredWeight\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.RegisteredWeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TireSizeFront {
                get {
                    try {
                        return ((string)(this[this.tableUnitDetails.TireSizeFrontColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TireSizeFront\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.TireSizeFrontColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TireSizeBack {
                get {
                    try {
                        return ((string)(this[this.tableUnitDetails.TireSizeBackColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TireSizeBack\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.TireSizeBackColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NumberOfAxes {
                get {
                    try {
                        return ((string)(this[this.tableUnitDetails.NumberOfAxesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NumberOfAxes\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.NumberOfAxesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FuelType {
                get {
                    try {
                        return ((string)(this[this.tableUnitDetails.FuelTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FuelType\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.FuelTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BeginningOdometer {
                get {
                    try {
                        return ((string)(this[this.tableUnitDetails.BeginningOdometerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BeginningOdometer\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.BeginningOdometerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReeferEquipped {
                get {
                    try {
                        return ((bool)(this[this.tableUnitDetails.IsReeferEquippedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsReeferEquipped\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.IsReeferEquippedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPTOEquipped {
                get {
                    try {
                        return ((bool)(this[this.tableUnitDetails.IsPTOEquippedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPTOEquipped\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.IsPTOEquippedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    try {
                        return ((bool)(this[this.tableUnitDetails.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    try {
                        return ((int)(this[this.tableUnitDetails.COMPANY_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPANY_ID\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InsuranceClass {
                get {
                    try {
                        return ((string)(this[this.tableUnitDetails.InsuranceClassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsuranceClass\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.InsuranceClassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InsuranceClassRyderSpecified {
                get {
                    try {
                        return ((string)(this[this.tableUnitDetails.InsuranceClassRyderSpecifiedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsuranceClassRyderSpecified\' in table \'UnitDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.InsuranceClassRyderSpecifiedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PurchasePrice {
                get {
                    try {
                        return ((decimal)(this[this.tableUnitDetails.PurchasePriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PurchasePrice\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.PurchasePriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ScrapDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUnitDetails.ScrapDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScrapDate\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.ScrapDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SaleProceeds {
                get {
                    try {
                        return ((decimal)(this[this.tableUnitDetails.SaleProceedsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SaleProceeds\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.SaleProceedsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LIBRARY_CATEGORIES_ID {
                get {
                    try {
                        return ((int)(this[this.tableUnitDetails.LIBRARY_CATEGORIES_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LIBRARY_CATEGORIES_ID\' in table \'UnitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitDetails.LIBRARY_CATEGORIES_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableUnitDetails.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableUnitDetails.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVINNull() {
                return this.IsNull(this.tableUnitDetails.VINColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVINNull() {
                this[this.tableUnitDetails.VINColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufacturerNull() {
                return this.IsNull(this.tableUnitDetails.ManufacturerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufacturerNull() {
                this[this.tableUnitDetails.ManufacturerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModelNull() {
                return this.IsNull(this.tableUnitDetails.ModelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModelNull() {
                this[this.tableUnitDetails.ModelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYear_Null() {
                return this.IsNull(this.tableUnitDetails.Year_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYear_Null() {
                this[this.tableUnitDetails.Year_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcquisitionDateNull() {
                return this.IsNull(this.tableUnitDetails.AcquisitionDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcquisitionDateNull() {
                this[this.tableUnitDetails.AcquisitionDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDispositionDateNull() {
                return this.IsNull(this.tableUnitDetails.DispositionDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDispositionDateNull() {
                this[this.tableUnitDetails.DispositionDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDispositionReasonNull() {
                return this.IsNull(this.tableUnitDetails.DispositionReasonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDispositionReasonNull() {
                this[this.tableUnitDetails.DispositionReasonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerTypeNull() {
                return this.IsNull(this.tableUnitDetails.OwnerTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerTypeNull() {
                this[this.tableUnitDetails.OwnerTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerCountryNull() {
                return this.IsNull(this.tableUnitDetails.OwnerCountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerCountryNull() {
                this[this.tableUnitDetails.OwnerCountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerStateNull() {
                return this.IsNull(this.tableUnitDetails.OwnerStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerStateNull() {
                this[this.tableUnitDetails.OwnerStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerNameNull() {
                return this.IsNull(this.tableUnitDetails.OwnerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerNameNull() {
                this[this.tableUnitDetails.OwnerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerContactNull() {
                return this.IsNull(this.tableUnitDetails.OwnerContactColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerContactNull() {
                this[this.tableUnitDetails.OwnerContactColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQualifiedDateNull() {
                return this.IsNull(this.tableUnitDetails.QualifiedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQualifiedDateNull() {
                this[this.tableUnitDetails.QualifiedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotQualifiedDateNull() {
                return this.IsNull(this.tableUnitDetails.NotQualifiedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotQualifiedDateNull() {
                this[this.tableUnitDetails.NotQualifiedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotQualifiedExplainNull() {
                return this.IsNull(this.tableUnitDetails.NotQualifiedExplainColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotQualifiedExplainNull() {
                this[this.tableUnitDetails.NotQualifiedExplainColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableUnitDetails.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableUnitDetails.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotesNull() {
                return this.IsNull(this.tableUnitDetails.NotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotesNull() {
                this[this.tableUnitDetails.NotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoriesNull() {
                return this.IsNull(this.tableUnitDetails.CategoriesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoriesNull() {
                this[this.tableUnitDetails.CategoriesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLicenseCountryNull() {
                return this.IsNull(this.tableUnitDetails.LicenseCountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLicenseCountryNull() {
                this[this.tableUnitDetails.LicenseCountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLicenseStateNull() {
                return this.IsNull(this.tableUnitDetails.LicenseStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLicenseStateNull() {
                this[this.tableUnitDetails.LicenseStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLicensePlateNumbverNull() {
                return this.IsNull(this.tableUnitDetails.LicensePlateNumbverColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLicensePlateNumbverNull() {
                this[this.tableUnitDetails.LicensePlateNumbverColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAportionedTagNumberNull() {
                return this.IsNull(this.tableUnitDetails.AportionedTagNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAportionedTagNumberNull() {
                this[this.tableUnitDetails.AportionedTagNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActualWeightNull() {
                return this.IsNull(this.tableUnitDetails.ActualWeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActualWeightNull() {
                this[this.tableUnitDetails.ActualWeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegisteredWeightNull() {
                return this.IsNull(this.tableUnitDetails.RegisteredWeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegisteredWeightNull() {
                this[this.tableUnitDetails.RegisteredWeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTireSizeFrontNull() {
                return this.IsNull(this.tableUnitDetails.TireSizeFrontColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTireSizeFrontNull() {
                this[this.tableUnitDetails.TireSizeFrontColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTireSizeBackNull() {
                return this.IsNull(this.tableUnitDetails.TireSizeBackColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTireSizeBackNull() {
                this[this.tableUnitDetails.TireSizeBackColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumberOfAxesNull() {
                return this.IsNull(this.tableUnitDetails.NumberOfAxesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumberOfAxesNull() {
                this[this.tableUnitDetails.NumberOfAxesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFuelTypeNull() {
                return this.IsNull(this.tableUnitDetails.FuelTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFuelTypeNull() {
                this[this.tableUnitDetails.FuelTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBeginningOdometerNull() {
                return this.IsNull(this.tableUnitDetails.BeginningOdometerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBeginningOdometerNull() {
                this[this.tableUnitDetails.BeginningOdometerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsReeferEquippedNull() {
                return this.IsNull(this.tableUnitDetails.IsReeferEquippedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsReeferEquippedNull() {
                this[this.tableUnitDetails.IsReeferEquippedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPTOEquippedNull() {
                return this.IsNull(this.tableUnitDetails.IsPTOEquippedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPTOEquippedNull() {
                this[this.tableUnitDetails.IsPTOEquippedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull() {
                return this.IsNull(this.tableUnitDetails.DeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull() {
                this[this.tableUnitDetails.DeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPANY_IDNull() {
                return this.IsNull(this.tableUnitDetails.COMPANY_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPANY_IDNull() {
                this[this.tableUnitDetails.COMPANY_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsuranceClassNull() {
                return this.IsNull(this.tableUnitDetails.InsuranceClassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsuranceClassNull() {
                this[this.tableUnitDetails.InsuranceClassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsuranceClassRyderSpecifiedNull() {
                return this.IsNull(this.tableUnitDetails.InsuranceClassRyderSpecifiedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsuranceClassRyderSpecifiedNull() {
                this[this.tableUnitDetails.InsuranceClassRyderSpecifiedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPurchasePriceNull() {
                return this.IsNull(this.tableUnitDetails.PurchasePriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPurchasePriceNull() {
                this[this.tableUnitDetails.PurchasePriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScrapDateNull() {
                return this.IsNull(this.tableUnitDetails.ScrapDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScrapDateNull() {
                this[this.tableUnitDetails.ScrapDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSaleProceedsNull() {
                return this.IsNull(this.tableUnitDetails.SaleProceedsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSaleProceedsNull() {
                this[this.tableUnitDetails.SaleProceedsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLIBRARY_CATEGORIES_IDNull() {
                return this.IsNull(this.tableUnitDetails.LIBRARY_CATEGORIES_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLIBRARY_CATEGORIES_IDNull() {
                this[this.tableUnitDetails.LIBRARY_CATEGORIES_IDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ChecklistDetailsRow : global::System.Data.DataRow {
            
            private ChecklistDetailsDataTable tableChecklistDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ChecklistDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableChecklistDetails = ((ChecklistDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RuleID {
                get {
                    return ((int)(this[this.tableChecklistDetails.RuleIDColumn]));
                }
                set {
                    this[this.tableChecklistDetails.RuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableChecklistDetails.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'ChecklistDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChecklistDetails.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Frequency {
                get {
                    try {
                        return ((string)(this[this.tableChecklistDetails.FrequencyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Frequency\' in table \'ChecklistDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChecklistDetails.FrequencyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastService {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableChecklistDetails.LastServiceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastService\' in table \'ChecklistDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChecklistDetails.LastServiceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime NextDue {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableChecklistDetails.NextDueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NextDue\' in table \'ChecklistDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChecklistDetails.NextDueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Done {
                get {
                    return ((bool)(this[this.tableChecklistDetails.DoneColumn]));
                }
                set {
                    this[this.tableChecklistDetails.DoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    return ((string)(this[this.tableChecklistDetails.StateColumn]));
                }
                set {
                    this[this.tableChecklistDetails.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    try {
                        return ((bool)(this[this.tableChecklistDetails.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'ChecklistDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChecklistDetails.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableChecklistDetails.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableChecklistDetails.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFrequencyNull() {
                return this.IsNull(this.tableChecklistDetails.FrequencyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFrequencyNull() {
                this[this.tableChecklistDetails.FrequencyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastServiceNull() {
                return this.IsNull(this.tableChecklistDetails.LastServiceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastServiceNull() {
                this[this.tableChecklistDetails.LastServiceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNextDueNull() {
                return this.IsNull(this.tableChecklistDetails.NextDueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNextDueNull() {
                this[this.tableChecklistDetails.NextDueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull() {
                return this.IsNull(this.tableChecklistDetails.DeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull() {
                this[this.tableChecklistDetails.DeletedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServiceDetailsRow : global::System.Data.DataRow {
            
            private ServiceDetailsDataTable tableServiceDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServiceDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServiceDetails = ((ServiceDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServiceID {
                get {
                    return ((int)(this[this.tableServiceDetails.ServiceIDColumn]));
                }
                set {
                    this[this.tableServiceDetails.ServiceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Number {
                get {
                    return ((string)(this[this.tableServiceDetails.NumberColumn]));
                }
                set {
                    this[this.tableServiceDetails.NumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateTime_ {
                get {
                    return ((global::System.DateTime)(this[this.tableServiceDetails.DateTime_Column]));
                }
                set {
                    this[this.tableServiceDetails.DateTime_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableServiceDetails.DescriptionColumn]));
                }
                set {
                    this[this.tableServiceDetails.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    return ((string)(this[this.tableServiceDetails.StateColumn]));
                }
                set {
                    this[this.tableServiceDetails.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableServiceDetails.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'ServiceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServiceDetails.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableServiceDetails.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableServiceDetails.SelectedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InspectionDetailsRow : global::System.Data.DataRow {
            
            private InspectionDetailsDataTable tableInspectionDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InspectionDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInspectionDetails = ((InspectionDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InspectionID {
                get {
                    return ((int)(this[this.tableInspectionDetails.InspectionIDColumn]));
                }
                set {
                    this[this.tableInspectionDetails.InspectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date_ {
                get {
                    return ((global::System.DateTime)(this[this.tableInspectionDetails.Date_Column]));
                }
                set {
                    this[this.tableInspectionDetails.Date_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long Country {
                get {
                    return ((long)(this[this.tableInspectionDetails.CountryColumn]));
                }
                set {
                    this[this.tableInspectionDetails.CountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long State {
                get {
                    return ((long)(this[this.tableInspectionDetails.StateColumn]));
                }
                set {
                    this[this.tableInspectionDetails.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    return ((string)(this[this.tableInspectionDetails.TypeColumn]));
                }
                set {
                    this[this.tableInspectionDetails.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Result {
                get {
                    try {
                        return ((string)(this[this.tableInspectionDetails.ResultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Result\' in table \'InspectionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionDetails.ResultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Cost {
                get {
                    try {
                        return ((decimal)(this[this.tableInspectionDetails.CostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cost\' in table \'InspectionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionDetails.CostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Notes {
                get {
                    try {
                        return ((string)(this[this.tableInspectionDetails.NotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Notes\' in table \'InspectionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionDetails.NotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InspectedBy {
                get {
                    try {
                        return ((string)(this[this.tableInspectionDetails.InspectedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InspectedBy\' in table \'InspectionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionDetails.InspectedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Attach {
                get {
                    try {
                        return ((string)(this[this.tableInspectionDetails.AttachColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Attach\' in table \'InspectionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionDetails.AttachColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableInspectionDetails.DeletedColumn]));
                }
                set {
                    this[this.tableInspectionDetails.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableInspectionDetails.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'InspectionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionDetails.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResultNull() {
                return this.IsNull(this.tableInspectionDetails.ResultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResultNull() {
                this[this.tableInspectionDetails.ResultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostNull() {
                return this.IsNull(this.tableInspectionDetails.CostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostNull() {
                this[this.tableInspectionDetails.CostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotesNull() {
                return this.IsNull(this.tableInspectionDetails.NotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotesNull() {
                this[this.tableInspectionDetails.NotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInspectedByNull() {
                return this.IsNull(this.tableInspectionDetails.InspectedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInspectedByNull() {
                this[this.tableInspectionDetails.InspectedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAttachNull() {
                return this.IsNull(this.tableInspectionDetails.AttachColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAttachNull() {
                this[this.tableInspectionDetails.AttachColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableInspectionDetails.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableInspectionDetails.InDatabaseColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NoteInformationRow : global::System.Data.DataRow {
            
            private NoteInformationDataTable tableNoteInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NoteInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNoteInformation = ((NoteInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    return ((int)(this[this.tableNoteInformation.UnitIDColumn]));
                }
                set {
                    this[this.tableNoteInformation.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableNoteInformation.RefIDColumn]));
                }
                set {
                    this[this.tableNoteInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    return ((string)(this[this.tableNoteInformation.SubjectColumn]));
                }
                set {
                    this[this.tableNoteInformation.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    return ((int)(this[this.tableNoteInformation.UserIDColumn]));
                }
                set {
                    this[this.tableNoteInformation.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateTime_ {
                get {
                    return ((global::System.DateTime)(this[this.tableNoteInformation.DateTime_Column]));
                }
                set {
                    this[this.tableNoteInformation.DateTime_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    return ((string)(this[this.tableNoteInformation.NoteColumn]));
                }
                set {
                    this[this.tableNoteInformation.NoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableNoteInformation.DeletedColumn]));
                }
                set {
                    this[this.tableNoteInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableNoteInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableNoteInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableNoteInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'NoteInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNoteInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LIBRARY_FILES_ID {
                get {
                    try {
                        return ((int)(this[this.tableNoteInformation.LIBRARY_FILES_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LIBRARY_FILES_ID\' in table \'NoteInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNoteInformation.LIBRARY_FILES_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORIGINAL_FILENAME {
                get {
                    try {
                        return ((string)(this[this.tableNoteInformation.ORIGINAL_FILENAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORIGINAL_FILENAME\' in table \'NoteInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNoteInformation.ORIGINAL_FILENAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FILENAME {
                get {
                    try {
                        return ((string)(this[this.tableNoteInformation.FILENAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FILENAME\' in table \'NoteInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNoteInformation.FILENAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableNoteInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableNoteInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLIBRARY_FILES_IDNull() {
                return this.IsNull(this.tableNoteInformation.LIBRARY_FILES_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLIBRARY_FILES_IDNull() {
                this[this.tableNoteInformation.LIBRARY_FILES_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORIGINAL_FILENAMENull() {
                return this.IsNull(this.tableNoteInformation.ORIGINAL_FILENAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORIGINAL_FILENAMENull() {
                this[this.tableNoteInformation.ORIGINAL_FILENAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFILENAMENull() {
                return this.IsNull(this.tableNoteInformation.FILENAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFILENAMENull() {
                this[this.tableNoteInformation.FILENAMEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CostInformationRow : global::System.Data.DataRow {
            
            private CostInformationDataTable tableCostInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CostInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCostInformation = ((CostInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostID {
                get {
                    return ((int)(this[this.tableCostInformation.CostIDColumn]));
                }
                set {
                    this[this.tableCostInformation.CostIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    return ((int)(this[this.tableCostInformation.UnitIDColumn]));
                }
                set {
                    this[this.tableCostInformation.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    return ((global::System.DateTime)(this[this.tableCostInformation.DateColumn]));
                }
                set {
                    this[this.tableCostInformation.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    return ((string)(this[this.tableCostInformation.UnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableCostInformation.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableCostInformation.CostCadColumn]));
                }
                set {
                    this[this.tableCostInformation.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableCostInformation.CostUsdColumn]));
                }
                set {
                    this[this.tableCostInformation.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableCostInformation.DeletedColumn]));
                }
                set {
                    this[this.tableCostInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableCostInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableCostInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableCostInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'CostInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCostInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableCostInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableCostInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CostExceptionsInformationRow : global::System.Data.DataRow {
            
            private CostExceptionsInformationDataTable tableCostExceptionsInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CostExceptionsInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCostExceptionsInformation = ((CostExceptionsInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostID {
                get {
                    return ((int)(this[this.tableCostExceptionsInformation.CostIDColumn]));
                }
                set {
                    this[this.tableCostExceptionsInformation.CostIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableCostExceptionsInformation.RefIDColumn]));
                }
                set {
                    this[this.tableCostExceptionsInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    return ((int)(this[this.tableCostExceptionsInformation.UnitIDColumn]));
                }
                set {
                    this[this.tableCostExceptionsInformation.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    return ((string)(this[this.tableCostExceptionsInformation.Work_Column]));
                }
                set {
                    this[this.tableCostExceptionsInformation.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    return ((string)(this[this.tableCostExceptionsInformation.UnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableCostExceptionsInformation.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableCostExceptionsInformation.CostCadColumn]));
                }
                set {
                    this[this.tableCostExceptionsInformation.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableCostExceptionsInformation.CostUsdColumn]));
                }
                set {
                    this[this.tableCostExceptionsInformation.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    try {
                        return ((bool)(this[this.tableCostExceptionsInformation.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'CostExceptionsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCostExceptionsInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableCostExceptionsInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableCostExceptionsInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableCostExceptionsInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'CostExceptionsInformation\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableCostExceptionsInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull() {
                return this.IsNull(this.tableCostExceptionsInformation.DeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull() {
                this[this.tableCostExceptionsInformation.DeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableCostExceptionsInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableCostExceptionsInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UnitDetailsRowChangeEvent : global::System.EventArgs {
            
            private UnitDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitDetailsRowChangeEvent(UnitDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ChecklistDetailsRowChangeEvent : global::System.EventArgs {
            
            private ChecklistDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChecklistDetailsRowChangeEvent(ChecklistDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChecklistDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServiceDetailsRowChangeEvent : global::System.EventArgs {
            
            private ServiceDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceDetailsRowChangeEvent(ServiceDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InspectionDetailsRowChangeEvent : global::System.EventArgs {
            
            private InspectionDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionDetailsRowChangeEvent(InspectionDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NoteInformationRowChangeEvent : global::System.EventArgs {
            
            private NoteInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoteInformationRowChangeEvent(NoteInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoteInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CostInformationRowChangeEvent : global::System.EventArgs {
            
            private CostInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostInformationRowChangeEvent(CostInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CostExceptionsInformationRowChangeEvent : global::System.EventArgs {
            
            private CostExceptionsInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostExceptionsInformationRowChangeEvent(CostExceptionsInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostExceptionsInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591