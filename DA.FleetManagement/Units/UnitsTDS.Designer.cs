//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.FleetManagement.Units {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("UnitsTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class UnitsTDS : global::System.Data.DataSet {
        
        private LFS_FM_UNIT_COST_HISTORYDataTable tableLFS_FM_UNIT_COST_HISTORY;
        
        private LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSDataTable tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS;
        
        private LFS_FM_UNITDataTable tableLFS_FM_UNIT;
        
        private LFS_FM_UNIT_NOTEDataTable tableLFS_FM_UNIT_NOTE;
        
        private LFS_FM_UNIT_CATEGORYDataTable tableLFS_FM_UNIT_CATEGORY;
        
        private LFS_FM_UNIT_INSPECTIONDataTable tableLFS_FM_UNIT_INSPECTION;
        
        private LFS_FM_UNIT_VEHICLEDataTable tableLFS_FM_UNIT_VEHICLE;
        
        private global::System.Data.DataRelation relationFK_LFS_FM_UNIT_COST_HISTORY_EXCEPTIONS_LFS_FM_UNIT_COST_HISTORY;
        
        private global::System.Data.DataRelation relationFK_LFS_FM_UNIT_NOTE_LFS_FM_UNIT;
        
        private global::System.Data.DataRelation relationFK_LFS_FM_UNIT_CATEGORY_LFS_FM_UNIT;
        
        private global::System.Data.DataRelation relationFK_LFS_FM_UNIT_INSPECTION_LFS_FM_UNIT;
        
        private global::System.Data.DataRelation relationFK_LFS_FM_UNIT_VEHICLE_LFS_FM_UNIT;
        
        private global::System.Data.DataRelation relationLFS_FM_UNIT_LFS_FM_UNIT_COST_HISTORY;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UnitsTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected UnitsTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["LFS_FM_UNIT_COST_HISTORY"] != null)) {
                    base.Tables.Add(new LFS_FM_UNIT_COST_HISTORYDataTable(ds.Tables["LFS_FM_UNIT_COST_HISTORY"]));
                }
                if ((ds.Tables["LFS_FM_UNIT_COST_HISTORY_EXCEPTIONS"] != null)) {
                    base.Tables.Add(new LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSDataTable(ds.Tables["LFS_FM_UNIT_COST_HISTORY_EXCEPTIONS"]));
                }
                if ((ds.Tables["LFS_FM_UNIT"] != null)) {
                    base.Tables.Add(new LFS_FM_UNITDataTable(ds.Tables["LFS_FM_UNIT"]));
                }
                if ((ds.Tables["LFS_FM_UNIT_NOTE"] != null)) {
                    base.Tables.Add(new LFS_FM_UNIT_NOTEDataTable(ds.Tables["LFS_FM_UNIT_NOTE"]));
                }
                if ((ds.Tables["LFS_FM_UNIT_CATEGORY"] != null)) {
                    base.Tables.Add(new LFS_FM_UNIT_CATEGORYDataTable(ds.Tables["LFS_FM_UNIT_CATEGORY"]));
                }
                if ((ds.Tables["LFS_FM_UNIT_INSPECTION"] != null)) {
                    base.Tables.Add(new LFS_FM_UNIT_INSPECTIONDataTable(ds.Tables["LFS_FM_UNIT_INSPECTION"]));
                }
                if ((ds.Tables["LFS_FM_UNIT_VEHICLE"] != null)) {
                    base.Tables.Add(new LFS_FM_UNIT_VEHICLEDataTable(ds.Tables["LFS_FM_UNIT_VEHICLE"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_FM_UNIT_COST_HISTORYDataTable LFS_FM_UNIT_COST_HISTORY {
            get {
                return this.tableLFS_FM_UNIT_COST_HISTORY;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSDataTable LFS_FM_UNIT_COST_HISTORY_EXCEPTIONS {
            get {
                return this.tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_FM_UNITDataTable LFS_FM_UNIT {
            get {
                return this.tableLFS_FM_UNIT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_FM_UNIT_NOTEDataTable LFS_FM_UNIT_NOTE {
            get {
                return this.tableLFS_FM_UNIT_NOTE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_FM_UNIT_CATEGORYDataTable LFS_FM_UNIT_CATEGORY {
            get {
                return this.tableLFS_FM_UNIT_CATEGORY;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_FM_UNIT_INSPECTIONDataTable LFS_FM_UNIT_INSPECTION {
            get {
                return this.tableLFS_FM_UNIT_INSPECTION;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_FM_UNIT_VEHICLEDataTable LFS_FM_UNIT_VEHICLE {
            get {
                return this.tableLFS_FM_UNIT_VEHICLE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            UnitsTDS cln = ((UnitsTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["LFS_FM_UNIT_COST_HISTORY"] != null)) {
                    base.Tables.Add(new LFS_FM_UNIT_COST_HISTORYDataTable(ds.Tables["LFS_FM_UNIT_COST_HISTORY"]));
                }
                if ((ds.Tables["LFS_FM_UNIT_COST_HISTORY_EXCEPTIONS"] != null)) {
                    base.Tables.Add(new LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSDataTable(ds.Tables["LFS_FM_UNIT_COST_HISTORY_EXCEPTIONS"]));
                }
                if ((ds.Tables["LFS_FM_UNIT"] != null)) {
                    base.Tables.Add(new LFS_FM_UNITDataTable(ds.Tables["LFS_FM_UNIT"]));
                }
                if ((ds.Tables["LFS_FM_UNIT_NOTE"] != null)) {
                    base.Tables.Add(new LFS_FM_UNIT_NOTEDataTable(ds.Tables["LFS_FM_UNIT_NOTE"]));
                }
                if ((ds.Tables["LFS_FM_UNIT_CATEGORY"] != null)) {
                    base.Tables.Add(new LFS_FM_UNIT_CATEGORYDataTable(ds.Tables["LFS_FM_UNIT_CATEGORY"]));
                }
                if ((ds.Tables["LFS_FM_UNIT_INSPECTION"] != null)) {
                    base.Tables.Add(new LFS_FM_UNIT_INSPECTIONDataTable(ds.Tables["LFS_FM_UNIT_INSPECTION"]));
                }
                if ((ds.Tables["LFS_FM_UNIT_VEHICLE"] != null)) {
                    base.Tables.Add(new LFS_FM_UNIT_VEHICLEDataTable(ds.Tables["LFS_FM_UNIT_VEHICLE"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableLFS_FM_UNIT_COST_HISTORY = ((LFS_FM_UNIT_COST_HISTORYDataTable)(base.Tables["LFS_FM_UNIT_COST_HISTORY"]));
            if ((initTable == true)) {
                if ((this.tableLFS_FM_UNIT_COST_HISTORY != null)) {
                    this.tableLFS_FM_UNIT_COST_HISTORY.InitVars();
                }
            }
            this.tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS = ((LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSDataTable)(base.Tables["LFS_FM_UNIT_COST_HISTORY_EXCEPTIONS"]));
            if ((initTable == true)) {
                if ((this.tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS != null)) {
                    this.tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS.InitVars();
                }
            }
            this.tableLFS_FM_UNIT = ((LFS_FM_UNITDataTable)(base.Tables["LFS_FM_UNIT"]));
            if ((initTable == true)) {
                if ((this.tableLFS_FM_UNIT != null)) {
                    this.tableLFS_FM_UNIT.InitVars();
                }
            }
            this.tableLFS_FM_UNIT_NOTE = ((LFS_FM_UNIT_NOTEDataTable)(base.Tables["LFS_FM_UNIT_NOTE"]));
            if ((initTable == true)) {
                if ((this.tableLFS_FM_UNIT_NOTE != null)) {
                    this.tableLFS_FM_UNIT_NOTE.InitVars();
                }
            }
            this.tableLFS_FM_UNIT_CATEGORY = ((LFS_FM_UNIT_CATEGORYDataTable)(base.Tables["LFS_FM_UNIT_CATEGORY"]));
            if ((initTable == true)) {
                if ((this.tableLFS_FM_UNIT_CATEGORY != null)) {
                    this.tableLFS_FM_UNIT_CATEGORY.InitVars();
                }
            }
            this.tableLFS_FM_UNIT_INSPECTION = ((LFS_FM_UNIT_INSPECTIONDataTable)(base.Tables["LFS_FM_UNIT_INSPECTION"]));
            if ((initTable == true)) {
                if ((this.tableLFS_FM_UNIT_INSPECTION != null)) {
                    this.tableLFS_FM_UNIT_INSPECTION.InitVars();
                }
            }
            this.tableLFS_FM_UNIT_VEHICLE = ((LFS_FM_UNIT_VEHICLEDataTable)(base.Tables["LFS_FM_UNIT_VEHICLE"]));
            if ((initTable == true)) {
                if ((this.tableLFS_FM_UNIT_VEHICLE != null)) {
                    this.tableLFS_FM_UNIT_VEHICLE.InitVars();
                }
            }
            this.relationFK_LFS_FM_UNIT_COST_HISTORY_EXCEPTIONS_LFS_FM_UNIT_COST_HISTORY = this.Relations["FK_LFS_FM_UNIT_COST_HISTORY_EXCEPTIONS_LFS_FM_UNIT_COST_HISTORY"];
            this.relationFK_LFS_FM_UNIT_NOTE_LFS_FM_UNIT = this.Relations["FK_LFS_FM_UNIT_NOTE_LFS_FM_UNIT"];
            this.relationFK_LFS_FM_UNIT_CATEGORY_LFS_FM_UNIT = this.Relations["FK_LFS_FM_UNIT_CATEGORY_LFS_FM_UNIT"];
            this.relationFK_LFS_FM_UNIT_INSPECTION_LFS_FM_UNIT = this.Relations["FK_LFS_FM_UNIT_INSPECTION_LFS_FM_UNIT"];
            this.relationFK_LFS_FM_UNIT_VEHICLE_LFS_FM_UNIT = this.Relations["FK_LFS_FM_UNIT_VEHICLE_LFS_FM_UNIT"];
            this.relationLFS_FM_UNIT_LFS_FM_UNIT_COST_HISTORY = this.Relations["LFS_FM_UNIT_LFS_FM_UNIT_COST_HISTORY"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "UnitsTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/UnitsTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableLFS_FM_UNIT_COST_HISTORY = new LFS_FM_UNIT_COST_HISTORYDataTable();
            base.Tables.Add(this.tableLFS_FM_UNIT_COST_HISTORY);
            this.tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS = new LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSDataTable();
            base.Tables.Add(this.tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS);
            this.tableLFS_FM_UNIT = new LFS_FM_UNITDataTable();
            base.Tables.Add(this.tableLFS_FM_UNIT);
            this.tableLFS_FM_UNIT_NOTE = new LFS_FM_UNIT_NOTEDataTable();
            base.Tables.Add(this.tableLFS_FM_UNIT_NOTE);
            this.tableLFS_FM_UNIT_CATEGORY = new LFS_FM_UNIT_CATEGORYDataTable();
            base.Tables.Add(this.tableLFS_FM_UNIT_CATEGORY);
            this.tableLFS_FM_UNIT_INSPECTION = new LFS_FM_UNIT_INSPECTIONDataTable();
            base.Tables.Add(this.tableLFS_FM_UNIT_INSPECTION);
            this.tableLFS_FM_UNIT_VEHICLE = new LFS_FM_UNIT_VEHICLEDataTable();
            base.Tables.Add(this.tableLFS_FM_UNIT_VEHICLE);
            this.relationFK_LFS_FM_UNIT_COST_HISTORY_EXCEPTIONS_LFS_FM_UNIT_COST_HISTORY = new global::System.Data.DataRelation("FK_LFS_FM_UNIT_COST_HISTORY_EXCEPTIONS_LFS_FM_UNIT_COST_HISTORY", new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_UNIT_COST_HISTORY.CostIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS.CostIDColumn}, false);
            this.Relations.Add(this.relationFK_LFS_FM_UNIT_COST_HISTORY_EXCEPTIONS_LFS_FM_UNIT_COST_HISTORY);
            this.relationFK_LFS_FM_UNIT_NOTE_LFS_FM_UNIT = new global::System.Data.DataRelation("FK_LFS_FM_UNIT_NOTE_LFS_FM_UNIT", new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_UNIT.UnitIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_UNIT_NOTE.UnitIDColumn}, false);
            this.Relations.Add(this.relationFK_LFS_FM_UNIT_NOTE_LFS_FM_UNIT);
            this.relationFK_LFS_FM_UNIT_CATEGORY_LFS_FM_UNIT = new global::System.Data.DataRelation("FK_LFS_FM_UNIT_CATEGORY_LFS_FM_UNIT", new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_UNIT.UnitIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_UNIT_CATEGORY.UnitIDColumn}, false);
            this.Relations.Add(this.relationFK_LFS_FM_UNIT_CATEGORY_LFS_FM_UNIT);
            this.relationFK_LFS_FM_UNIT_INSPECTION_LFS_FM_UNIT = new global::System.Data.DataRelation("FK_LFS_FM_UNIT_INSPECTION_LFS_FM_UNIT", new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_UNIT.UnitIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_UNIT_INSPECTION.UnitIDColumn}, false);
            this.Relations.Add(this.relationFK_LFS_FM_UNIT_INSPECTION_LFS_FM_UNIT);
            this.relationFK_LFS_FM_UNIT_VEHICLE_LFS_FM_UNIT = new global::System.Data.DataRelation("FK_LFS_FM_UNIT_VEHICLE_LFS_FM_UNIT", new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_UNIT.UnitIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_UNIT_VEHICLE.UnitIDColumn}, false);
            this.Relations.Add(this.relationFK_LFS_FM_UNIT_VEHICLE_LFS_FM_UNIT);
            this.relationLFS_FM_UNIT_LFS_FM_UNIT_COST_HISTORY = new global::System.Data.DataRelation("LFS_FM_UNIT_LFS_FM_UNIT_COST_HISTORY", new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_UNIT.UnitIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_UNIT_COST_HISTORY.CostIDColumn}, false);
            this.Relations.Add(this.relationLFS_FM_UNIT_LFS_FM_UNIT_COST_HISTORY);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_FM_UNIT_COST_HISTORY() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_FM_UNIT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_FM_UNIT_NOTE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_FM_UNIT_CATEGORY() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_FM_UNIT_INSPECTION() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_FM_UNIT_VEHICLE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            UnitsTDS ds = new UnitsTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void LFS_FM_UNIT_COST_HISTORYRowChangeEventHandler(object sender, LFS_FM_UNIT_COST_HISTORYRowChangeEvent e);
        
        public delegate void LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRowChangeEventHandler(object sender, LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRowChangeEvent e);
        
        public delegate void LFS_FM_UNITRowChangeEventHandler(object sender, LFS_FM_UNITRowChangeEvent e);
        
        public delegate void LFS_FM_UNIT_NOTERowChangeEventHandler(object sender, LFS_FM_UNIT_NOTERowChangeEvent e);
        
        public delegate void LFS_FM_UNIT_CATEGORYRowChangeEventHandler(object sender, LFS_FM_UNIT_CATEGORYRowChangeEvent e);
        
        public delegate void LFS_FM_UNIT_INSPECTIONRowChangeEventHandler(object sender, LFS_FM_UNIT_INSPECTIONRowChangeEvent e);
        
        public delegate void LFS_FM_UNIT_VEHICLERowChangeEventHandler(object sender, LFS_FM_UNIT_VEHICLERowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_FM_UNIT_COST_HISTORYDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostID;
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_COST_HISTORYDataTable() {
                this.TableName = "LFS_FM_UNIT_COST_HISTORY";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_UNIT_COST_HISTORYDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_FM_UNIT_COST_HISTORYDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostIDColumn {
                get {
                    return this.columnCostID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_COST_HISTORYRow this[int index] {
                get {
                    return ((LFS_FM_UNIT_COST_HISTORYRow)(this.Rows[index]));
                }
            }
            
            public event LFS_FM_UNIT_COST_HISTORYRowChangeEventHandler LFS_FM_UNIT_COST_HISTORYRowChanging;
            
            public event LFS_FM_UNIT_COST_HISTORYRowChangeEventHandler LFS_FM_UNIT_COST_HISTORYRowChanged;
            
            public event LFS_FM_UNIT_COST_HISTORYRowChangeEventHandler LFS_FM_UNIT_COST_HISTORYRowDeleting;
            
            public event LFS_FM_UNIT_COST_HISTORYRowChangeEventHandler LFS_FM_UNIT_COST_HISTORYRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_FM_UNIT_COST_HISTORYRow(LFS_FM_UNIT_COST_HISTORYRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_COST_HISTORYRow AddLFS_FM_UNIT_COST_HISTORYRow(LFS_FM_UNITRow parentLFS_FM_UNITRowByLFS_FM_UNIT_LFS_FM_UNIT_COST_HISTORY, int UnitID, System.DateTime Date, string UnitOfMeasurement, decimal CostCad, decimal CostUsd, bool Deleted, int COMPANY_ID) {
                LFS_FM_UNIT_COST_HISTORYRow rowLFS_FM_UNIT_COST_HISTORYRow = ((LFS_FM_UNIT_COST_HISTORYRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        UnitID,
                        Date,
                        UnitOfMeasurement,
                        CostCad,
                        CostUsd,
                        Deleted,
                        COMPANY_ID};
                if ((parentLFS_FM_UNITRowByLFS_FM_UNIT_LFS_FM_UNIT_COST_HISTORY != null)) {
                    columnValuesArray[0] = parentLFS_FM_UNITRowByLFS_FM_UNIT_LFS_FM_UNIT_COST_HISTORY[0];
                }
                rowLFS_FM_UNIT_COST_HISTORYRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_FM_UNIT_COST_HISTORYRow);
                return rowLFS_FM_UNIT_COST_HISTORYRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_COST_HISTORYRow FindByCostID(int CostID) {
                return ((LFS_FM_UNIT_COST_HISTORYRow)(this.Rows.Find(new object[] {
                            CostID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_FM_UNIT_COST_HISTORYDataTable cln = ((LFS_FM_UNIT_COST_HISTORYDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_FM_UNIT_COST_HISTORYDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostID = base.Columns["CostID"];
                this.columnUnitID = base.Columns["UnitID"];
                this.columnDate = base.Columns["Date"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostID = new global::System.Data.DataColumn("CostID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostID);
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostID}, true));
                this.columnCostID.AllowDBNull = false;
                this.columnCostID.Unique = true;
                this.columnUnitID.AllowDBNull = false;
                this.columnDate.AllowDBNull = false;
                this.columnUnitOfMeasurement.AllowDBNull = false;
                this.columnUnitOfMeasurement.MaxLength = 25;
                this.columnCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_COST_HISTORYRow NewLFS_FM_UNIT_COST_HISTORYRow() {
                return ((LFS_FM_UNIT_COST_HISTORYRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_FM_UNIT_COST_HISTORYRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_FM_UNIT_COST_HISTORYRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_FM_UNIT_COST_HISTORYRowChanged != null)) {
                    this.LFS_FM_UNIT_COST_HISTORYRowChanged(this, new LFS_FM_UNIT_COST_HISTORYRowChangeEvent(((LFS_FM_UNIT_COST_HISTORYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_FM_UNIT_COST_HISTORYRowChanging != null)) {
                    this.LFS_FM_UNIT_COST_HISTORYRowChanging(this, new LFS_FM_UNIT_COST_HISTORYRowChangeEvent(((LFS_FM_UNIT_COST_HISTORYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_FM_UNIT_COST_HISTORYRowDeleted != null)) {
                    this.LFS_FM_UNIT_COST_HISTORYRowDeleted(this, new LFS_FM_UNIT_COST_HISTORYRowChangeEvent(((LFS_FM_UNIT_COST_HISTORYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_FM_UNIT_COST_HISTORYRowDeleting != null)) {
                    this.LFS_FM_UNIT_COST_HISTORYRowDeleting(this, new LFS_FM_UNIT_COST_HISTORYRowChangeEvent(((LFS_FM_UNIT_COST_HISTORYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_FM_UNIT_COST_HISTORYRow(LFS_FM_UNIT_COST_HISTORYRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                UnitsTDS ds = new UnitsTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_FM_UNIT_COST_HISTORYDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSDataTable() {
                this.TableName = "LFS_FM_UNIT_COST_HISTORY_EXCEPTIONS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostIDColumn {
                get {
                    return this.columnCostID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow this[int index] {
                get {
                    return ((LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow)(this.Rows[index]));
                }
            }
            
            public event LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRowChangeEventHandler LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRowChanging;
            
            public event LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRowChangeEventHandler LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRowChanged;
            
            public event LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRowChangeEventHandler LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRowDeleting;
            
            public event LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRowChangeEventHandler LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow(LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow AddLFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow(LFS_FM_UNIT_COST_HISTORYRow parentLFS_FM_UNIT_COST_HISTORYRowByFK_LFS_FM_UNIT_COST_HISTORY_EXCEPTIONS_LFS_FM_UNIT_COST_HISTORY, int RefID, int UnitID, string Work_, string UnitOfMeasurement, decimal CostCad, decimal CostUsd, bool Deleted, int COMPANY_ID) {
                LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow rowLFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow = ((LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        RefID,
                        UnitID,
                        Work_,
                        UnitOfMeasurement,
                        CostCad,
                        CostUsd,
                        Deleted,
                        COMPANY_ID};
                if ((parentLFS_FM_UNIT_COST_HISTORYRowByFK_LFS_FM_UNIT_COST_HISTORY_EXCEPTIONS_LFS_FM_UNIT_COST_HISTORY != null)) {
                    columnValuesArray[0] = parentLFS_FM_UNIT_COST_HISTORYRowByFK_LFS_FM_UNIT_COST_HISTORY_EXCEPTIONS_LFS_FM_UNIT_COST_HISTORY[0];
                }
                rowLFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow);
                return rowLFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow FindByCostIDRefID(int CostID, int RefID) {
                return ((LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow)(this.Rows.Find(new object[] {
                            CostID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSDataTable cln = ((LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostID = base.Columns["CostID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnUnitID = base.Columns["UnitID"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostID = new global::System.Data.DataColumn("CostID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostID,
                                this.columnRefID}, true));
                this.columnCostID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnUnitID.AllowDBNull = false;
                this.columnWork_.AllowDBNull = false;
                this.columnWork_.MaxLength = 50;
                this.columnUnitOfMeasurement.AllowDBNull = false;
                this.columnUnitOfMeasurement.MaxLength = 25;
                this.columnCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow NewLFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow() {
                return ((LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRowChanged != null)) {
                    this.LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRowChanged(this, new LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRowChangeEvent(((LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRowChanging != null)) {
                    this.LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRowChanging(this, new LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRowChangeEvent(((LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRowDeleted != null)) {
                    this.LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRowDeleted(this, new LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRowChangeEvent(((LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRowDeleting != null)) {
                    this.LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRowDeleting(this, new LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRowChangeEvent(((LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow(LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                UnitsTDS ds = new UnitsTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_FM_UNITDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnUnitCode;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnVIN;
            
            private global::System.Data.DataColumn columnManufacturer;
            
            private global::System.Data.DataColumn columnModel;
            
            private global::System.Data.DataColumn columnYear_;
            
            private global::System.Data.DataColumn columnIsTowable;
            
            private global::System.Data.DataColumn columnCompanyLevelID;
            
            private global::System.Data.DataColumn columnAcquisitionDate;
            
            private global::System.Data.DataColumn columnDispositionDate;
            
            private global::System.Data.DataColumn columnDispositionReason;
            
            private global::System.Data.DataColumn columnOwnerType;
            
            private global::System.Data.DataColumn columnOwnerCountry;
            
            private global::System.Data.DataColumn columnOwnerState;
            
            private global::System.Data.DataColumn columnOwnerName;
            
            private global::System.Data.DataColumn columnOwnerContact;
            
            private global::System.Data.DataColumn columnQualifiedDate;
            
            private global::System.Data.DataColumn columnNotQualifiedDate;
            
            private global::System.Data.DataColumn columnNotQualifiedExplain;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnNotes;
            
            private global::System.Data.DataColumn columnCategories;
            
            private global::System.Data.DataColumn columnInsuranceClass;
            
            private global::System.Data.DataColumn columnInsuranceClassRyderSpecified;
            
            private global::System.Data.DataColumn columnPurchasePrice;
            
            private global::System.Data.DataColumn columnScrapDate;
            
            private global::System.Data.DataColumn columnSaleProceeds;
            
            private global::System.Data.DataColumn columnLIBRARY_CATEGORIES_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNITDataTable() {
                this.TableName = "LFS_FM_UNIT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_UNITDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_FM_UNITDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitCodeColumn {
                get {
                    return this.columnUnitCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VINColumn {
                get {
                    return this.columnVIN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManufacturerColumn {
                get {
                    return this.columnManufacturer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModelColumn {
                get {
                    return this.columnModel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Year_Column {
                get {
                    return this.columnYear_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsTowableColumn {
                get {
                    return this.columnIsTowable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyLevelIDColumn {
                get {
                    return this.columnCompanyLevelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcquisitionDateColumn {
                get {
                    return this.columnAcquisitionDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DispositionDateColumn {
                get {
                    return this.columnDispositionDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DispositionReasonColumn {
                get {
                    return this.columnDispositionReason;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerTypeColumn {
                get {
                    return this.columnOwnerType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerCountryColumn {
                get {
                    return this.columnOwnerCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerStateColumn {
                get {
                    return this.columnOwnerState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerNameColumn {
                get {
                    return this.columnOwnerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerContactColumn {
                get {
                    return this.columnOwnerContact;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QualifiedDateColumn {
                get {
                    return this.columnQualifiedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotQualifiedDateColumn {
                get {
                    return this.columnNotQualifiedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotQualifiedExplainColumn {
                get {
                    return this.columnNotQualifiedExplain;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotesColumn {
                get {
                    return this.columnNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoriesColumn {
                get {
                    return this.columnCategories;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuranceClassColumn {
                get {
                    return this.columnInsuranceClass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuranceClassRyderSpecifiedColumn {
                get {
                    return this.columnInsuranceClassRyderSpecified;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PurchasePriceColumn {
                get {
                    return this.columnPurchasePrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScrapDateColumn {
                get {
                    return this.columnScrapDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SaleProceedsColumn {
                get {
                    return this.columnSaleProceeds;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LIBRARY_CATEGORIES_IDColumn {
                get {
                    return this.columnLIBRARY_CATEGORIES_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNITRow this[int index] {
                get {
                    return ((LFS_FM_UNITRow)(this.Rows[index]));
                }
            }
            
            public event LFS_FM_UNITRowChangeEventHandler LFS_FM_UNITRowChanging;
            
            public event LFS_FM_UNITRowChangeEventHandler LFS_FM_UNITRowChanged;
            
            public event LFS_FM_UNITRowChangeEventHandler LFS_FM_UNITRowDeleting;
            
            public event LFS_FM_UNITRowChangeEventHandler LFS_FM_UNITRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_FM_UNITRow(LFS_FM_UNITRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNITRow AddLFS_FM_UNITRow(
                        string UnitCode, 
                        string Description, 
                        string VIN, 
                        string Manufacturer, 
                        string Model, 
                        string Year_, 
                        bool IsTowable, 
                        int CompanyLevelID, 
                        System.DateTime AcquisitionDate, 
                        System.DateTime DispositionDate, 
                        string DispositionReason, 
                        string OwnerType, 
                        long OwnerCountry, 
                        long OwnerState, 
                        string OwnerName, 
                        string OwnerContact, 
                        System.DateTime QualifiedDate, 
                        System.DateTime NotQualifiedDate, 
                        string NotQualifiedExplain, 
                        string State, 
                        string Type, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        string Notes, 
                        string Categories, 
                        string InsuranceClass, 
                        string InsuranceClassRyderSpecified, 
                        decimal PurchasePrice, 
                        System.DateTime ScrapDate, 
                        decimal SaleProceeds, 
                        int LIBRARY_CATEGORIES_ID) {
                LFS_FM_UNITRow rowLFS_FM_UNITRow = ((LFS_FM_UNITRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        UnitCode,
                        Description,
                        VIN,
                        Manufacturer,
                        Model,
                        Year_,
                        IsTowable,
                        CompanyLevelID,
                        AcquisitionDate,
                        DispositionDate,
                        DispositionReason,
                        OwnerType,
                        OwnerCountry,
                        OwnerState,
                        OwnerName,
                        OwnerContact,
                        QualifiedDate,
                        NotQualifiedDate,
                        NotQualifiedExplain,
                        State,
                        Type,
                        Deleted,
                        COMPANY_ID,
                        Notes,
                        Categories,
                        InsuranceClass,
                        InsuranceClassRyderSpecified,
                        PurchasePrice,
                        ScrapDate,
                        SaleProceeds,
                        LIBRARY_CATEGORIES_ID};
                rowLFS_FM_UNITRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_FM_UNITRow);
                return rowLFS_FM_UNITRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNITRow FindByUnitID(int UnitID) {
                return ((LFS_FM_UNITRow)(this.Rows.Find(new object[] {
                            UnitID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_FM_UNITDataTable cln = ((LFS_FM_UNITDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_FM_UNITDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUnitID = base.Columns["UnitID"];
                this.columnUnitCode = base.Columns["UnitCode"];
                this.columnDescription = base.Columns["Description"];
                this.columnVIN = base.Columns["VIN"];
                this.columnManufacturer = base.Columns["Manufacturer"];
                this.columnModel = base.Columns["Model"];
                this.columnYear_ = base.Columns["Year_"];
                this.columnIsTowable = base.Columns["IsTowable"];
                this.columnCompanyLevelID = base.Columns["CompanyLevelID"];
                this.columnAcquisitionDate = base.Columns["AcquisitionDate"];
                this.columnDispositionDate = base.Columns["DispositionDate"];
                this.columnDispositionReason = base.Columns["DispositionReason"];
                this.columnOwnerType = base.Columns["OwnerType"];
                this.columnOwnerCountry = base.Columns["OwnerCountry"];
                this.columnOwnerState = base.Columns["OwnerState"];
                this.columnOwnerName = base.Columns["OwnerName"];
                this.columnOwnerContact = base.Columns["OwnerContact"];
                this.columnQualifiedDate = base.Columns["QualifiedDate"];
                this.columnNotQualifiedDate = base.Columns["NotQualifiedDate"];
                this.columnNotQualifiedExplain = base.Columns["NotQualifiedExplain"];
                this.columnState = base.Columns["State"];
                this.columnType = base.Columns["Type"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnNotes = base.Columns["Notes"];
                this.columnCategories = base.Columns["Categories"];
                this.columnInsuranceClass = base.Columns["InsuranceClass"];
                this.columnInsuranceClassRyderSpecified = base.Columns["InsuranceClassRyderSpecified"];
                this.columnPurchasePrice = base.Columns["PurchasePrice"];
                this.columnScrapDate = base.Columns["ScrapDate"];
                this.columnSaleProceeds = base.Columns["SaleProceeds"];
                this.columnLIBRARY_CATEGORIES_ID = base.Columns["LIBRARY_CATEGORIES_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnUnitCode = new global::System.Data.DataColumn("UnitCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitCode);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnVIN = new global::System.Data.DataColumn("VIN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVIN);
                this.columnManufacturer = new global::System.Data.DataColumn("Manufacturer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturer);
                this.columnModel = new global::System.Data.DataColumn("Model", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModel);
                this.columnYear_ = new global::System.Data.DataColumn("Year_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear_);
                this.columnIsTowable = new global::System.Data.DataColumn("IsTowable", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsTowable);
                this.columnCompanyLevelID = new global::System.Data.DataColumn("CompanyLevelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyLevelID);
                this.columnAcquisitionDate = new global::System.Data.DataColumn("AcquisitionDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcquisitionDate);
                this.columnDispositionDate = new global::System.Data.DataColumn("DispositionDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDispositionDate);
                this.columnDispositionReason = new global::System.Data.DataColumn("DispositionReason", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDispositionReason);
                this.columnOwnerType = new global::System.Data.DataColumn("OwnerType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerType);
                this.columnOwnerCountry = new global::System.Data.DataColumn("OwnerCountry", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerCountry);
                this.columnOwnerState = new global::System.Data.DataColumn("OwnerState", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerState);
                this.columnOwnerName = new global::System.Data.DataColumn("OwnerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerName);
                this.columnOwnerContact = new global::System.Data.DataColumn("OwnerContact", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerContact);
                this.columnQualifiedDate = new global::System.Data.DataColumn("QualifiedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQualifiedDate);
                this.columnNotQualifiedDate = new global::System.Data.DataColumn("NotQualifiedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotQualifiedDate);
                this.columnNotQualifiedExplain = new global::System.Data.DataColumn("NotQualifiedExplain", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotQualifiedExplain);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnNotes = new global::System.Data.DataColumn("Notes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnCategories = new global::System.Data.DataColumn("Categories", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategories);
                this.columnInsuranceClass = new global::System.Data.DataColumn("InsuranceClass", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsuranceClass);
                this.columnInsuranceClassRyderSpecified = new global::System.Data.DataColumn("InsuranceClassRyderSpecified", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsuranceClassRyderSpecified);
                this.columnPurchasePrice = new global::System.Data.DataColumn("PurchasePrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPurchasePrice);
                this.columnScrapDate = new global::System.Data.DataColumn("ScrapDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScrapDate);
                this.columnSaleProceeds = new global::System.Data.DataColumn("SaleProceeds", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSaleProceeds);
                this.columnLIBRARY_CATEGORIES_ID = new global::System.Data.DataColumn("LIBRARY_CATEGORIES_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLIBRARY_CATEGORIES_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUnitID}, true));
                this.columnUnitID.AutoIncrement = true;
                this.columnUnitID.AutoIncrementSeed = -1;
                this.columnUnitID.AutoIncrementStep = -1;
                this.columnUnitID.AllowDBNull = false;
                this.columnUnitID.ReadOnly = true;
                this.columnUnitID.Unique = true;
                this.columnUnitCode.AllowDBNull = false;
                this.columnUnitCode.MaxLength = 25;
                this.columnDescription.MaxLength = 250;
                this.columnVIN.MaxLength = 50;
                this.columnManufacturer.MaxLength = 100;
                this.columnModel.MaxLength = 25;
                this.columnYear_.MaxLength = 5;
                this.columnIsTowable.AllowDBNull = false;
                this.columnCompanyLevelID.AllowDBNull = false;
                this.columnDispositionReason.MaxLength = 100;
                this.columnOwnerType.MaxLength = 25;
                this.columnOwnerName.MaxLength = 100;
                this.columnOwnerContact.MaxLength = 255;
                this.columnNotQualifiedExplain.MaxLength = 1073741823;
                this.columnState.AllowDBNull = false;
                this.columnState.MaxLength = 25;
                this.columnType.MaxLength = 25;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnNotes.MaxLength = 1073741823;
                this.columnCategories.MaxLength = 1073741823;
                this.columnInsuranceClass.MaxLength = 50;
                this.columnInsuranceClassRyderSpecified.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNITRow NewLFS_FM_UNITRow() {
                return ((LFS_FM_UNITRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_FM_UNITRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_FM_UNITRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_FM_UNITRowChanged != null)) {
                    this.LFS_FM_UNITRowChanged(this, new LFS_FM_UNITRowChangeEvent(((LFS_FM_UNITRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_FM_UNITRowChanging != null)) {
                    this.LFS_FM_UNITRowChanging(this, new LFS_FM_UNITRowChangeEvent(((LFS_FM_UNITRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_FM_UNITRowDeleted != null)) {
                    this.LFS_FM_UNITRowDeleted(this, new LFS_FM_UNITRowChangeEvent(((LFS_FM_UNITRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_FM_UNITRowDeleting != null)) {
                    this.LFS_FM_UNITRowDeleting(this, new LFS_FM_UNITRowChangeEvent(((LFS_FM_UNITRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_FM_UNITRow(LFS_FM_UNITRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                UnitsTDS ds = new UnitsTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_FM_UNITDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_FM_UNIT_NOTEDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnDateTime_;
            
            private global::System.Data.DataColumn columnNote;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnLIBRARY_FILES_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_NOTEDataTable() {
                this.TableName = "LFS_FM_UNIT_NOTE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_UNIT_NOTEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_FM_UNIT_NOTEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateTime_Column {
                get {
                    return this.columnDateTime_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LIBRARY_FILES_IDColumn {
                get {
                    return this.columnLIBRARY_FILES_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_NOTERow this[int index] {
                get {
                    return ((LFS_FM_UNIT_NOTERow)(this.Rows[index]));
                }
            }
            
            public event LFS_FM_UNIT_NOTERowChangeEventHandler LFS_FM_UNIT_NOTERowChanging;
            
            public event LFS_FM_UNIT_NOTERowChangeEventHandler LFS_FM_UNIT_NOTERowChanged;
            
            public event LFS_FM_UNIT_NOTERowChangeEventHandler LFS_FM_UNIT_NOTERowDeleting;
            
            public event LFS_FM_UNIT_NOTERowChangeEventHandler LFS_FM_UNIT_NOTERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_FM_UNIT_NOTERow(LFS_FM_UNIT_NOTERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_NOTERow AddLFS_FM_UNIT_NOTERow(LFS_FM_UNITRow parentLFS_FM_UNITRowByFK_LFS_FM_UNIT_NOTE_LFS_FM_UNIT, int RefID, string Subject, int UserID, System.DateTime DateTime_, string Note, bool Deleted, int COMPANY_ID, int LIBRARY_FILES_ID) {
                LFS_FM_UNIT_NOTERow rowLFS_FM_UNIT_NOTERow = ((LFS_FM_UNIT_NOTERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        RefID,
                        Subject,
                        UserID,
                        DateTime_,
                        Note,
                        Deleted,
                        COMPANY_ID,
                        LIBRARY_FILES_ID};
                if ((parentLFS_FM_UNITRowByFK_LFS_FM_UNIT_NOTE_LFS_FM_UNIT != null)) {
                    columnValuesArray[0] = parentLFS_FM_UNITRowByFK_LFS_FM_UNIT_NOTE_LFS_FM_UNIT[0];
                }
                rowLFS_FM_UNIT_NOTERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_FM_UNIT_NOTERow);
                return rowLFS_FM_UNIT_NOTERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_NOTERow FindByUnitIDRefID(int UnitID, int RefID) {
                return ((LFS_FM_UNIT_NOTERow)(this.Rows.Find(new object[] {
                            UnitID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_FM_UNIT_NOTEDataTable cln = ((LFS_FM_UNIT_NOTEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_FM_UNIT_NOTEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUnitID = base.Columns["UnitID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnSubject = base.Columns["Subject"];
                this.columnUserID = base.Columns["UserID"];
                this.columnDateTime_ = base.Columns["DateTime_"];
                this.columnNote = base.Columns["Note"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnLIBRARY_FILES_ID = base.Columns["LIBRARY_FILES_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnDateTime_ = new global::System.Data.DataColumn("DateTime_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTime_);
                this.columnNote = new global::System.Data.DataColumn("Note", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnLIBRARY_FILES_ID = new global::System.Data.DataColumn("LIBRARY_FILES_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLIBRARY_FILES_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUnitID,
                                this.columnRefID}, true));
                this.columnUnitID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnSubject.AllowDBNull = false;
                this.columnSubject.MaxLength = 255;
                this.columnUserID.AllowDBNull = false;
                this.columnDateTime_.AllowDBNull = false;
                this.columnNote.MaxLength = 1073741823;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_NOTERow NewLFS_FM_UNIT_NOTERow() {
                return ((LFS_FM_UNIT_NOTERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_FM_UNIT_NOTERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_FM_UNIT_NOTERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_FM_UNIT_NOTERowChanged != null)) {
                    this.LFS_FM_UNIT_NOTERowChanged(this, new LFS_FM_UNIT_NOTERowChangeEvent(((LFS_FM_UNIT_NOTERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_FM_UNIT_NOTERowChanging != null)) {
                    this.LFS_FM_UNIT_NOTERowChanging(this, new LFS_FM_UNIT_NOTERowChangeEvent(((LFS_FM_UNIT_NOTERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_FM_UNIT_NOTERowDeleted != null)) {
                    this.LFS_FM_UNIT_NOTERowDeleted(this, new LFS_FM_UNIT_NOTERowChangeEvent(((LFS_FM_UNIT_NOTERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_FM_UNIT_NOTERowDeleting != null)) {
                    this.LFS_FM_UNIT_NOTERowDeleting(this, new LFS_FM_UNIT_NOTERowChangeEvent(((LFS_FM_UNIT_NOTERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_FM_UNIT_NOTERow(LFS_FM_UNIT_NOTERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                UnitsTDS ds = new UnitsTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_FM_UNIT_NOTEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_FM_UNIT_CATEGORYDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnCategoryID;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_CATEGORYDataTable() {
                this.TableName = "LFS_FM_UNIT_CATEGORY";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_UNIT_CATEGORYDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_FM_UNIT_CATEGORYDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryIDColumn {
                get {
                    return this.columnCategoryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_CATEGORYRow this[int index] {
                get {
                    return ((LFS_FM_UNIT_CATEGORYRow)(this.Rows[index]));
                }
            }
            
            public event LFS_FM_UNIT_CATEGORYRowChangeEventHandler LFS_FM_UNIT_CATEGORYRowChanging;
            
            public event LFS_FM_UNIT_CATEGORYRowChangeEventHandler LFS_FM_UNIT_CATEGORYRowChanged;
            
            public event LFS_FM_UNIT_CATEGORYRowChangeEventHandler LFS_FM_UNIT_CATEGORYRowDeleting;
            
            public event LFS_FM_UNIT_CATEGORYRowChangeEventHandler LFS_FM_UNIT_CATEGORYRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_FM_UNIT_CATEGORYRow(LFS_FM_UNIT_CATEGORYRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_CATEGORYRow AddLFS_FM_UNIT_CATEGORYRow(LFS_FM_UNITRow parentLFS_FM_UNITRowByFK_LFS_FM_UNIT_CATEGORY_LFS_FM_UNIT, int CategoryID, bool Deleted, int COMPANY_ID) {
                LFS_FM_UNIT_CATEGORYRow rowLFS_FM_UNIT_CATEGORYRow = ((LFS_FM_UNIT_CATEGORYRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CategoryID,
                        Deleted,
                        COMPANY_ID};
                if ((parentLFS_FM_UNITRowByFK_LFS_FM_UNIT_CATEGORY_LFS_FM_UNIT != null)) {
                    columnValuesArray[0] = parentLFS_FM_UNITRowByFK_LFS_FM_UNIT_CATEGORY_LFS_FM_UNIT[0];
                }
                rowLFS_FM_UNIT_CATEGORYRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_FM_UNIT_CATEGORYRow);
                return rowLFS_FM_UNIT_CATEGORYRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_CATEGORYRow FindByUnitIDCategoryID(int UnitID, int CategoryID) {
                return ((LFS_FM_UNIT_CATEGORYRow)(this.Rows.Find(new object[] {
                            UnitID,
                            CategoryID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_FM_UNIT_CATEGORYDataTable cln = ((LFS_FM_UNIT_CATEGORYDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_FM_UNIT_CATEGORYDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUnitID = base.Columns["UnitID"];
                this.columnCategoryID = base.Columns["CategoryID"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnCategoryID = new global::System.Data.DataColumn("CategoryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryID);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUnitID,
                                this.columnCategoryID}, true));
                this.columnUnitID.AllowDBNull = false;
                this.columnCategoryID.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_CATEGORYRow NewLFS_FM_UNIT_CATEGORYRow() {
                return ((LFS_FM_UNIT_CATEGORYRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_FM_UNIT_CATEGORYRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_FM_UNIT_CATEGORYRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_FM_UNIT_CATEGORYRowChanged != null)) {
                    this.LFS_FM_UNIT_CATEGORYRowChanged(this, new LFS_FM_UNIT_CATEGORYRowChangeEvent(((LFS_FM_UNIT_CATEGORYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_FM_UNIT_CATEGORYRowChanging != null)) {
                    this.LFS_FM_UNIT_CATEGORYRowChanging(this, new LFS_FM_UNIT_CATEGORYRowChangeEvent(((LFS_FM_UNIT_CATEGORYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_FM_UNIT_CATEGORYRowDeleted != null)) {
                    this.LFS_FM_UNIT_CATEGORYRowDeleted(this, new LFS_FM_UNIT_CATEGORYRowChangeEvent(((LFS_FM_UNIT_CATEGORYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_FM_UNIT_CATEGORYRowDeleting != null)) {
                    this.LFS_FM_UNIT_CATEGORYRowDeleting(this, new LFS_FM_UNIT_CATEGORYRowChangeEvent(((LFS_FM_UNIT_CATEGORYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_FM_UNIT_CATEGORYRow(LFS_FM_UNIT_CATEGORYRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                UnitsTDS ds = new UnitsTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_FM_UNIT_CATEGORYDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_FM_UNIT_INSPECTIONDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnInspectionID;
            
            private global::System.Data.DataColumn columnDate_;
            
            private global::System.Data.DataColumn columnCountry;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnResult;
            
            private global::System.Data.DataColumn columnCost;
            
            private global::System.Data.DataColumn columnNotes;
            
            private global::System.Data.DataColumn columnInspectedBy;
            
            private global::System.Data.DataColumn columnAttach;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_INSPECTIONDataTable() {
                this.TableName = "LFS_FM_UNIT_INSPECTION";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_UNIT_INSPECTIONDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_FM_UNIT_INSPECTIONDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InspectionIDColumn {
                get {
                    return this.columnInspectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Date_Column {
                get {
                    return this.columnDate_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResultColumn {
                get {
                    return this.columnResult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostColumn {
                get {
                    return this.columnCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotesColumn {
                get {
                    return this.columnNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InspectedByColumn {
                get {
                    return this.columnInspectedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AttachColumn {
                get {
                    return this.columnAttach;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_INSPECTIONRow this[int index] {
                get {
                    return ((LFS_FM_UNIT_INSPECTIONRow)(this.Rows[index]));
                }
            }
            
            public event LFS_FM_UNIT_INSPECTIONRowChangeEventHandler LFS_FM_UNIT_INSPECTIONRowChanging;
            
            public event LFS_FM_UNIT_INSPECTIONRowChangeEventHandler LFS_FM_UNIT_INSPECTIONRowChanged;
            
            public event LFS_FM_UNIT_INSPECTIONRowChangeEventHandler LFS_FM_UNIT_INSPECTIONRowDeleting;
            
            public event LFS_FM_UNIT_INSPECTIONRowChangeEventHandler LFS_FM_UNIT_INSPECTIONRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_FM_UNIT_INSPECTIONRow(LFS_FM_UNIT_INSPECTIONRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_INSPECTIONRow AddLFS_FM_UNIT_INSPECTIONRow(LFS_FM_UNITRow parentLFS_FM_UNITRowByFK_LFS_FM_UNIT_INSPECTION_LFS_FM_UNIT, int InspectionID, System.DateTime Date_, long Country, long State, string Type, string Result, decimal Cost, string Notes, string InspectedBy, string Attach, bool Deleted, int COMPANY_ID) {
                LFS_FM_UNIT_INSPECTIONRow rowLFS_FM_UNIT_INSPECTIONRow = ((LFS_FM_UNIT_INSPECTIONRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        InspectionID,
                        Date_,
                        Country,
                        State,
                        Type,
                        Result,
                        Cost,
                        Notes,
                        InspectedBy,
                        Attach,
                        Deleted,
                        COMPANY_ID};
                if ((parentLFS_FM_UNITRowByFK_LFS_FM_UNIT_INSPECTION_LFS_FM_UNIT != null)) {
                    columnValuesArray[0] = parentLFS_FM_UNITRowByFK_LFS_FM_UNIT_INSPECTION_LFS_FM_UNIT[0];
                }
                rowLFS_FM_UNIT_INSPECTIONRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_FM_UNIT_INSPECTIONRow);
                return rowLFS_FM_UNIT_INSPECTIONRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_INSPECTIONRow FindByUnitIDInspectionID(int UnitID, int InspectionID) {
                return ((LFS_FM_UNIT_INSPECTIONRow)(this.Rows.Find(new object[] {
                            UnitID,
                            InspectionID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_FM_UNIT_INSPECTIONDataTable cln = ((LFS_FM_UNIT_INSPECTIONDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_FM_UNIT_INSPECTIONDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUnitID = base.Columns["UnitID"];
                this.columnInspectionID = base.Columns["InspectionID"];
                this.columnDate_ = base.Columns["Date_"];
                this.columnCountry = base.Columns["Country"];
                this.columnState = base.Columns["State"];
                this.columnType = base.Columns["Type"];
                this.columnResult = base.Columns["Result"];
                this.columnCost = base.Columns["Cost"];
                this.columnNotes = base.Columns["Notes"];
                this.columnInspectedBy = base.Columns["InspectedBy"];
                this.columnAttach = base.Columns["Attach"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnInspectionID = new global::System.Data.DataColumn("InspectionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspectionID);
                this.columnDate_ = new global::System.Data.DataColumn("Date_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate_);
                this.columnCountry = new global::System.Data.DataColumn("Country", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountry);
                this.columnState = new global::System.Data.DataColumn("State", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnResult = new global::System.Data.DataColumn("Result", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResult);
                this.columnCost = new global::System.Data.DataColumn("Cost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCost);
                this.columnNotes = new global::System.Data.DataColumn("Notes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnInspectedBy = new global::System.Data.DataColumn("InspectedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspectedBy);
                this.columnAttach = new global::System.Data.DataColumn("Attach", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAttach);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUnitID,
                                this.columnInspectionID}, true));
                this.columnUnitID.AllowDBNull = false;
                this.columnInspectionID.AllowDBNull = false;
                this.columnDate_.AllowDBNull = false;
                this.columnCountry.AllowDBNull = false;
                this.columnState.AllowDBNull = false;
                this.columnType.AllowDBNull = false;
                this.columnType.MaxLength = 25;
                this.columnResult.MaxLength = 25;
                this.columnNotes.MaxLength = 1073741823;
                this.columnInspectedBy.MaxLength = 100;
                this.columnAttach.MaxLength = 10;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_INSPECTIONRow NewLFS_FM_UNIT_INSPECTIONRow() {
                return ((LFS_FM_UNIT_INSPECTIONRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_FM_UNIT_INSPECTIONRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_FM_UNIT_INSPECTIONRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_FM_UNIT_INSPECTIONRowChanged != null)) {
                    this.LFS_FM_UNIT_INSPECTIONRowChanged(this, new LFS_FM_UNIT_INSPECTIONRowChangeEvent(((LFS_FM_UNIT_INSPECTIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_FM_UNIT_INSPECTIONRowChanging != null)) {
                    this.LFS_FM_UNIT_INSPECTIONRowChanging(this, new LFS_FM_UNIT_INSPECTIONRowChangeEvent(((LFS_FM_UNIT_INSPECTIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_FM_UNIT_INSPECTIONRowDeleted != null)) {
                    this.LFS_FM_UNIT_INSPECTIONRowDeleted(this, new LFS_FM_UNIT_INSPECTIONRowChangeEvent(((LFS_FM_UNIT_INSPECTIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_FM_UNIT_INSPECTIONRowDeleting != null)) {
                    this.LFS_FM_UNIT_INSPECTIONRowDeleting(this, new LFS_FM_UNIT_INSPECTIONRowChangeEvent(((LFS_FM_UNIT_INSPECTIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_FM_UNIT_INSPECTIONRow(LFS_FM_UNIT_INSPECTIONRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                UnitsTDS ds = new UnitsTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_FM_UNIT_INSPECTIONDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_FM_UNIT_VEHICLEDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnLicenseCountry;
            
            private global::System.Data.DataColumn columnLicenseState;
            
            private global::System.Data.DataColumn columnLicensePlateNumbver;
            
            private global::System.Data.DataColumn columnAportionedTagNumber;
            
            private global::System.Data.DataColumn columnActualWeight;
            
            private global::System.Data.DataColumn columnRegisteredWeight;
            
            private global::System.Data.DataColumn columnTireSizeFront;
            
            private global::System.Data.DataColumn columnTireSizeBack;
            
            private global::System.Data.DataColumn columnNumberOfAxes;
            
            private global::System.Data.DataColumn columnFuelType;
            
            private global::System.Data.DataColumn columnBeginningOdometer;
            
            private global::System.Data.DataColumn columnIsReeferEquipped;
            
            private global::System.Data.DataColumn columnIsPTOEquipped;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_VEHICLEDataTable() {
                this.TableName = "LFS_FM_UNIT_VEHICLE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_UNIT_VEHICLEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_FM_UNIT_VEHICLEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LicenseCountryColumn {
                get {
                    return this.columnLicenseCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LicenseStateColumn {
                get {
                    return this.columnLicenseState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LicensePlateNumbverColumn {
                get {
                    return this.columnLicensePlateNumbver;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AportionedTagNumberColumn {
                get {
                    return this.columnAportionedTagNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActualWeightColumn {
                get {
                    return this.columnActualWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegisteredWeightColumn {
                get {
                    return this.columnRegisteredWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TireSizeFrontColumn {
                get {
                    return this.columnTireSizeFront;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TireSizeBackColumn {
                get {
                    return this.columnTireSizeBack;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumberOfAxesColumn {
                get {
                    return this.columnNumberOfAxes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FuelTypeColumn {
                get {
                    return this.columnFuelType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BeginningOdometerColumn {
                get {
                    return this.columnBeginningOdometer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsReeferEquippedColumn {
                get {
                    return this.columnIsReeferEquipped;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPTOEquippedColumn {
                get {
                    return this.columnIsPTOEquipped;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_VEHICLERow this[int index] {
                get {
                    return ((LFS_FM_UNIT_VEHICLERow)(this.Rows[index]));
                }
            }
            
            public event LFS_FM_UNIT_VEHICLERowChangeEventHandler LFS_FM_UNIT_VEHICLERowChanging;
            
            public event LFS_FM_UNIT_VEHICLERowChangeEventHandler LFS_FM_UNIT_VEHICLERowChanged;
            
            public event LFS_FM_UNIT_VEHICLERowChangeEventHandler LFS_FM_UNIT_VEHICLERowDeleting;
            
            public event LFS_FM_UNIT_VEHICLERowChangeEventHandler LFS_FM_UNIT_VEHICLERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_FM_UNIT_VEHICLERow(LFS_FM_UNIT_VEHICLERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_VEHICLERow AddLFS_FM_UNIT_VEHICLERow(
                        LFS_FM_UNITRow parentLFS_FM_UNITRowByFK_LFS_FM_UNIT_VEHICLE_LFS_FM_UNIT, 
                        long LicenseCountry, 
                        long LicenseState, 
                        string LicensePlateNumbver, 
                        string AportionedTagNumber, 
                        string ActualWeight, 
                        string RegisteredWeight, 
                        string TireSizeFront, 
                        string TireSizeBack, 
                        string NumberOfAxes, 
                        string FuelType, 
                        string BeginningOdometer, 
                        bool IsReeferEquipped, 
                        bool IsPTOEquipped, 
                        bool Deleted, 
                        int COMPANY_ID) {
                LFS_FM_UNIT_VEHICLERow rowLFS_FM_UNIT_VEHICLERow = ((LFS_FM_UNIT_VEHICLERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        LicenseCountry,
                        LicenseState,
                        LicensePlateNumbver,
                        AportionedTagNumber,
                        ActualWeight,
                        RegisteredWeight,
                        TireSizeFront,
                        TireSizeBack,
                        NumberOfAxes,
                        FuelType,
                        BeginningOdometer,
                        IsReeferEquipped,
                        IsPTOEquipped,
                        Deleted,
                        COMPANY_ID};
                if ((parentLFS_FM_UNITRowByFK_LFS_FM_UNIT_VEHICLE_LFS_FM_UNIT != null)) {
                    columnValuesArray[0] = parentLFS_FM_UNITRowByFK_LFS_FM_UNIT_VEHICLE_LFS_FM_UNIT[0];
                }
                rowLFS_FM_UNIT_VEHICLERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_FM_UNIT_VEHICLERow);
                return rowLFS_FM_UNIT_VEHICLERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_VEHICLERow FindByUnitID(int UnitID) {
                return ((LFS_FM_UNIT_VEHICLERow)(this.Rows.Find(new object[] {
                            UnitID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_FM_UNIT_VEHICLEDataTable cln = ((LFS_FM_UNIT_VEHICLEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_FM_UNIT_VEHICLEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUnitID = base.Columns["UnitID"];
                this.columnLicenseCountry = base.Columns["LicenseCountry"];
                this.columnLicenseState = base.Columns["LicenseState"];
                this.columnLicensePlateNumbver = base.Columns["LicensePlateNumbver"];
                this.columnAportionedTagNumber = base.Columns["AportionedTagNumber"];
                this.columnActualWeight = base.Columns["ActualWeight"];
                this.columnRegisteredWeight = base.Columns["RegisteredWeight"];
                this.columnTireSizeFront = base.Columns["TireSizeFront"];
                this.columnTireSizeBack = base.Columns["TireSizeBack"];
                this.columnNumberOfAxes = base.Columns["NumberOfAxes"];
                this.columnFuelType = base.Columns["FuelType"];
                this.columnBeginningOdometer = base.Columns["BeginningOdometer"];
                this.columnIsReeferEquipped = base.Columns["IsReeferEquipped"];
                this.columnIsPTOEquipped = base.Columns["IsPTOEquipped"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnLicenseCountry = new global::System.Data.DataColumn("LicenseCountry", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLicenseCountry);
                this.columnLicenseState = new global::System.Data.DataColumn("LicenseState", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLicenseState);
                this.columnLicensePlateNumbver = new global::System.Data.DataColumn("LicensePlateNumbver", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLicensePlateNumbver);
                this.columnAportionedTagNumber = new global::System.Data.DataColumn("AportionedTagNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAportionedTagNumber);
                this.columnActualWeight = new global::System.Data.DataColumn("ActualWeight", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActualWeight);
                this.columnRegisteredWeight = new global::System.Data.DataColumn("RegisteredWeight", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegisteredWeight);
                this.columnTireSizeFront = new global::System.Data.DataColumn("TireSizeFront", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTireSizeFront);
                this.columnTireSizeBack = new global::System.Data.DataColumn("TireSizeBack", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTireSizeBack);
                this.columnNumberOfAxes = new global::System.Data.DataColumn("NumberOfAxes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumberOfAxes);
                this.columnFuelType = new global::System.Data.DataColumn("FuelType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFuelType);
                this.columnBeginningOdometer = new global::System.Data.DataColumn("BeginningOdometer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBeginningOdometer);
                this.columnIsReeferEquipped = new global::System.Data.DataColumn("IsReeferEquipped", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsReeferEquipped);
                this.columnIsPTOEquipped = new global::System.Data.DataColumn("IsPTOEquipped", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPTOEquipped);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUnitID}, true));
                this.columnUnitID.AllowDBNull = false;
                this.columnUnitID.Unique = true;
                this.columnLicensePlateNumbver.MaxLength = 25;
                this.columnAportionedTagNumber.MaxLength = 25;
                this.columnActualWeight.MaxLength = 100;
                this.columnRegisteredWeight.MaxLength = 100;
                this.columnTireSizeFront.MaxLength = 50;
                this.columnTireSizeBack.MaxLength = 50;
                this.columnNumberOfAxes.MaxLength = 7;
                this.columnFuelType.MaxLength = 25;
                this.columnBeginningOdometer.MaxLength = 10;
                this.columnIsReeferEquipped.AllowDBNull = false;
                this.columnIsPTOEquipped.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_VEHICLERow NewLFS_FM_UNIT_VEHICLERow() {
                return ((LFS_FM_UNIT_VEHICLERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_FM_UNIT_VEHICLERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_FM_UNIT_VEHICLERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_FM_UNIT_VEHICLERowChanged != null)) {
                    this.LFS_FM_UNIT_VEHICLERowChanged(this, new LFS_FM_UNIT_VEHICLERowChangeEvent(((LFS_FM_UNIT_VEHICLERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_FM_UNIT_VEHICLERowChanging != null)) {
                    this.LFS_FM_UNIT_VEHICLERowChanging(this, new LFS_FM_UNIT_VEHICLERowChangeEvent(((LFS_FM_UNIT_VEHICLERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_FM_UNIT_VEHICLERowDeleted != null)) {
                    this.LFS_FM_UNIT_VEHICLERowDeleted(this, new LFS_FM_UNIT_VEHICLERowChangeEvent(((LFS_FM_UNIT_VEHICLERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_FM_UNIT_VEHICLERowDeleting != null)) {
                    this.LFS_FM_UNIT_VEHICLERowDeleting(this, new LFS_FM_UNIT_VEHICLERowChangeEvent(((LFS_FM_UNIT_VEHICLERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_FM_UNIT_VEHICLERow(LFS_FM_UNIT_VEHICLERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                UnitsTDS ds = new UnitsTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_FM_UNIT_VEHICLEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_FM_UNIT_COST_HISTORYRow : global::System.Data.DataRow {
            
            private LFS_FM_UNIT_COST_HISTORYDataTable tableLFS_FM_UNIT_COST_HISTORY;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_UNIT_COST_HISTORYRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_FM_UNIT_COST_HISTORY = ((LFS_FM_UNIT_COST_HISTORYDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostID {
                get {
                    return ((int)(this[this.tableLFS_FM_UNIT_COST_HISTORY.CostIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_COST_HISTORY.CostIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    return ((int)(this[this.tableLFS_FM_UNIT_COST_HISTORY.UnitIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_COST_HISTORY.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    return ((global::System.DateTime)(this[this.tableLFS_FM_UNIT_COST_HISTORY.DateColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_COST_HISTORY.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    return ((string)(this[this.tableLFS_FM_UNIT_COST_HISTORY.UnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_COST_HISTORY.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableLFS_FM_UNIT_COST_HISTORY.CostCadColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_COST_HISTORY.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableLFS_FM_UNIT_COST_HISTORY.CostUsdColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_COST_HISTORY.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_FM_UNIT_COST_HISTORY.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_COST_HISTORY.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_FM_UNIT_COST_HISTORY.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_COST_HISTORY.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNITRow LFS_FM_UNITRow {
                get {
                    return ((LFS_FM_UNITRow)(this.GetParentRow(this.Table.ParentRelations["LFS_FM_UNIT_LFS_FM_UNIT_COST_HISTORY"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LFS_FM_UNIT_LFS_FM_UNIT_COST_HISTORY"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow[] GetLFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRows() {
                if ((this.Table.ChildRelations["FK_LFS_FM_UNIT_COST_HISTORY_EXCEPTIONS_LFS_FM_UNIT_COST_HISTORY"] == null)) {
                    return new LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow[0];
                }
                else {
                    return ((LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LFS_FM_UNIT_COST_HISTORY_EXCEPTIONS_LFS_FM_UNIT_COST_HISTORY"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow : global::System.Data.DataRow {
            
            private LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSDataTable tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS = ((LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostID {
                get {
                    return ((int)(this[this.tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS.CostIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS.CostIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS.RefIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    return ((int)(this[this.tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS.UnitIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    return ((string)(this[this.tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS.Work_Column]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    return ((string)(this[this.tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS.UnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS.CostCadColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS.CostUsdColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    try {
                        return ((bool)(this[this.tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'LFS_FM_UNIT_COST_HISTORY_EXCEPTIONS\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_COST_HISTORYRow LFS_FM_UNIT_COST_HISTORYRow {
                get {
                    return ((LFS_FM_UNIT_COST_HISTORYRow)(this.GetParentRow(this.Table.ParentRelations["FK_LFS_FM_UNIT_COST_HISTORY_EXCEPTIONS_LFS_FM_UNIT_COST_HISTORY"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LFS_FM_UNIT_COST_HISTORY_EXCEPTIONS_LFS_FM_UNIT_COST_HISTORY"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull() {
                return this.IsNull(this.tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS.DeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull() {
                this[this.tableLFS_FM_UNIT_COST_HISTORY_EXCEPTIONS.DeletedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_FM_UNITRow : global::System.Data.DataRow {
            
            private LFS_FM_UNITDataTable tableLFS_FM_UNIT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_UNITRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_FM_UNIT = ((LFS_FM_UNITDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    return ((int)(this[this.tableLFS_FM_UNIT.UnitIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitCode {
                get {
                    return ((string)(this[this.tableLFS_FM_UNIT.UnitCodeColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT.UnitCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_UNIT.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'LFS_FM_UNIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VIN {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_UNIT.VINColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VIN\' in table \'LFS_FM_UNIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT.VINColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Manufacturer {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_UNIT.ManufacturerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Manufacturer\' in table \'LFS_FM_UNIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT.ManufacturerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Model {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_UNIT.ModelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Model\' in table \'LFS_FM_UNIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT.ModelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Year_ {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_UNIT.Year_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Year_\' in table \'LFS_FM_UNIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT.Year_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTowable {
                get {
                    return ((bool)(this[this.tableLFS_FM_UNIT.IsTowableColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT.IsTowableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CompanyLevelID {
                get {
                    return ((int)(this[this.tableLFS_FM_UNIT.CompanyLevelIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT.CompanyLevelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AcquisitionDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_FM_UNIT.AcquisitionDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AcquisitionDate\' in table \'LFS_FM_UNIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT.AcquisitionDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DispositionDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_FM_UNIT.DispositionDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DispositionDate\' in table \'LFS_FM_UNIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT.DispositionDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DispositionReason {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_UNIT.DispositionReasonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DispositionReason\' in table \'LFS_FM_UNIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT.DispositionReasonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerType {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_UNIT.OwnerTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerType\' in table \'LFS_FM_UNIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT.OwnerTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long OwnerCountry {
                get {
                    try {
                        return ((long)(this[this.tableLFS_FM_UNIT.OwnerCountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerCountry\' in table \'LFS_FM_UNIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT.OwnerCountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long OwnerState {
                get {
                    try {
                        return ((long)(this[this.tableLFS_FM_UNIT.OwnerStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerState\' in table \'LFS_FM_UNIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT.OwnerStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerName {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_UNIT.OwnerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerName\' in table \'LFS_FM_UNIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT.OwnerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerContact {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_UNIT.OwnerContactColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerContact\' in table \'LFS_FM_UNIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT.OwnerContactColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime QualifiedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_FM_UNIT.QualifiedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QualifiedDate\' in table \'LFS_FM_UNIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT.QualifiedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime NotQualifiedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_FM_UNIT.NotQualifiedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NotQualifiedDate\' in table \'LFS_FM_UNIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT.NotQualifiedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NotQualifiedExplain {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_UNIT.NotQualifiedExplainColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NotQualifiedExplain\' in table \'LFS_FM_UNIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT.NotQualifiedExplainColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    return ((string)(this[this.tableLFS_FM_UNIT.StateColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_UNIT.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'LFS_FM_UNIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_FM_UNIT.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_FM_UNIT.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Notes {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_UNIT.NotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Notes\' in table \'LFS_FM_UNIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT.NotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Categories {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_UNIT.CategoriesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Categories\' in table \'LFS_FM_UNIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT.CategoriesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InsuranceClass {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_UNIT.InsuranceClassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsuranceClass\' in table \'LFS_FM_UNIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT.InsuranceClassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InsuranceClassRyderSpecified {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_UNIT.InsuranceClassRyderSpecifiedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsuranceClassRyderSpecified\' in table \'LFS_FM_UNIT\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT.InsuranceClassRyderSpecifiedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PurchasePrice {
                get {
                    try {
                        return ((decimal)(this[this.tableLFS_FM_UNIT.PurchasePriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PurchasePrice\' in table \'LFS_FM_UNIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT.PurchasePriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ScrapDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_FM_UNIT.ScrapDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScrapDate\' in table \'LFS_FM_UNIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT.ScrapDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SaleProceeds {
                get {
                    try {
                        return ((decimal)(this[this.tableLFS_FM_UNIT.SaleProceedsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SaleProceeds\' in table \'LFS_FM_UNIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT.SaleProceedsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LIBRARY_CATEGORIES_ID {
                get {
                    try {
                        return ((int)(this[this.tableLFS_FM_UNIT.LIBRARY_CATEGORIES_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LIBRARY_CATEGORIES_ID\' in table \'LFS_FM_UNIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT.LIBRARY_CATEGORIES_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableLFS_FM_UNIT.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableLFS_FM_UNIT.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVINNull() {
                return this.IsNull(this.tableLFS_FM_UNIT.VINColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVINNull() {
                this[this.tableLFS_FM_UNIT.VINColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufacturerNull() {
                return this.IsNull(this.tableLFS_FM_UNIT.ManufacturerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufacturerNull() {
                this[this.tableLFS_FM_UNIT.ManufacturerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModelNull() {
                return this.IsNull(this.tableLFS_FM_UNIT.ModelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModelNull() {
                this[this.tableLFS_FM_UNIT.ModelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYear_Null() {
                return this.IsNull(this.tableLFS_FM_UNIT.Year_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYear_Null() {
                this[this.tableLFS_FM_UNIT.Year_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcquisitionDateNull() {
                return this.IsNull(this.tableLFS_FM_UNIT.AcquisitionDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcquisitionDateNull() {
                this[this.tableLFS_FM_UNIT.AcquisitionDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDispositionDateNull() {
                return this.IsNull(this.tableLFS_FM_UNIT.DispositionDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDispositionDateNull() {
                this[this.tableLFS_FM_UNIT.DispositionDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDispositionReasonNull() {
                return this.IsNull(this.tableLFS_FM_UNIT.DispositionReasonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDispositionReasonNull() {
                this[this.tableLFS_FM_UNIT.DispositionReasonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerTypeNull() {
                return this.IsNull(this.tableLFS_FM_UNIT.OwnerTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerTypeNull() {
                this[this.tableLFS_FM_UNIT.OwnerTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerCountryNull() {
                return this.IsNull(this.tableLFS_FM_UNIT.OwnerCountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerCountryNull() {
                this[this.tableLFS_FM_UNIT.OwnerCountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerStateNull() {
                return this.IsNull(this.tableLFS_FM_UNIT.OwnerStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerStateNull() {
                this[this.tableLFS_FM_UNIT.OwnerStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerNameNull() {
                return this.IsNull(this.tableLFS_FM_UNIT.OwnerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerNameNull() {
                this[this.tableLFS_FM_UNIT.OwnerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerContactNull() {
                return this.IsNull(this.tableLFS_FM_UNIT.OwnerContactColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerContactNull() {
                this[this.tableLFS_FM_UNIT.OwnerContactColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQualifiedDateNull() {
                return this.IsNull(this.tableLFS_FM_UNIT.QualifiedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQualifiedDateNull() {
                this[this.tableLFS_FM_UNIT.QualifiedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotQualifiedDateNull() {
                return this.IsNull(this.tableLFS_FM_UNIT.NotQualifiedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotQualifiedDateNull() {
                this[this.tableLFS_FM_UNIT.NotQualifiedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotQualifiedExplainNull() {
                return this.IsNull(this.tableLFS_FM_UNIT.NotQualifiedExplainColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotQualifiedExplainNull() {
                this[this.tableLFS_FM_UNIT.NotQualifiedExplainColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableLFS_FM_UNIT.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableLFS_FM_UNIT.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotesNull() {
                return this.IsNull(this.tableLFS_FM_UNIT.NotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotesNull() {
                this[this.tableLFS_FM_UNIT.NotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoriesNull() {
                return this.IsNull(this.tableLFS_FM_UNIT.CategoriesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoriesNull() {
                this[this.tableLFS_FM_UNIT.CategoriesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsuranceClassNull() {
                return this.IsNull(this.tableLFS_FM_UNIT.InsuranceClassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsuranceClassNull() {
                this[this.tableLFS_FM_UNIT.InsuranceClassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsuranceClassRyderSpecifiedNull() {
                return this.IsNull(this.tableLFS_FM_UNIT.InsuranceClassRyderSpecifiedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsuranceClassRyderSpecifiedNull() {
                this[this.tableLFS_FM_UNIT.InsuranceClassRyderSpecifiedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPurchasePriceNull() {
                return this.IsNull(this.tableLFS_FM_UNIT.PurchasePriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPurchasePriceNull() {
                this[this.tableLFS_FM_UNIT.PurchasePriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScrapDateNull() {
                return this.IsNull(this.tableLFS_FM_UNIT.ScrapDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScrapDateNull() {
                this[this.tableLFS_FM_UNIT.ScrapDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSaleProceedsNull() {
                return this.IsNull(this.tableLFS_FM_UNIT.SaleProceedsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSaleProceedsNull() {
                this[this.tableLFS_FM_UNIT.SaleProceedsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLIBRARY_CATEGORIES_IDNull() {
                return this.IsNull(this.tableLFS_FM_UNIT.LIBRARY_CATEGORIES_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLIBRARY_CATEGORIES_IDNull() {
                this[this.tableLFS_FM_UNIT.LIBRARY_CATEGORIES_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_NOTERow[] GetLFS_FM_UNIT_NOTERows() {
                if ((this.Table.ChildRelations["FK_LFS_FM_UNIT_NOTE_LFS_FM_UNIT"] == null)) {
                    return new LFS_FM_UNIT_NOTERow[0];
                }
                else {
                    return ((LFS_FM_UNIT_NOTERow[])(base.GetChildRows(this.Table.ChildRelations["FK_LFS_FM_UNIT_NOTE_LFS_FM_UNIT"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_CATEGORYRow[] GetLFS_FM_UNIT_CATEGORYRows() {
                if ((this.Table.ChildRelations["FK_LFS_FM_UNIT_CATEGORY_LFS_FM_UNIT"] == null)) {
                    return new LFS_FM_UNIT_CATEGORYRow[0];
                }
                else {
                    return ((LFS_FM_UNIT_CATEGORYRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LFS_FM_UNIT_CATEGORY_LFS_FM_UNIT"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_INSPECTIONRow[] GetLFS_FM_UNIT_INSPECTIONRows() {
                if ((this.Table.ChildRelations["FK_LFS_FM_UNIT_INSPECTION_LFS_FM_UNIT"] == null)) {
                    return new LFS_FM_UNIT_INSPECTIONRow[0];
                }
                else {
                    return ((LFS_FM_UNIT_INSPECTIONRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LFS_FM_UNIT_INSPECTION_LFS_FM_UNIT"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_VEHICLERow[] GetLFS_FM_UNIT_VEHICLERows() {
                if ((this.Table.ChildRelations["FK_LFS_FM_UNIT_VEHICLE_LFS_FM_UNIT"] == null)) {
                    return new LFS_FM_UNIT_VEHICLERow[0];
                }
                else {
                    return ((LFS_FM_UNIT_VEHICLERow[])(base.GetChildRows(this.Table.ChildRelations["FK_LFS_FM_UNIT_VEHICLE_LFS_FM_UNIT"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_COST_HISTORYRow[] GetLFS_FM_UNIT_COST_HISTORYRows() {
                if ((this.Table.ChildRelations["LFS_FM_UNIT_LFS_FM_UNIT_COST_HISTORY"] == null)) {
                    return new LFS_FM_UNIT_COST_HISTORYRow[0];
                }
                else {
                    return ((LFS_FM_UNIT_COST_HISTORYRow[])(base.GetChildRows(this.Table.ChildRelations["LFS_FM_UNIT_LFS_FM_UNIT_COST_HISTORY"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_FM_UNIT_NOTERow : global::System.Data.DataRow {
            
            private LFS_FM_UNIT_NOTEDataTable tableLFS_FM_UNIT_NOTE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_UNIT_NOTERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_FM_UNIT_NOTE = ((LFS_FM_UNIT_NOTEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    return ((int)(this[this.tableLFS_FM_UNIT_NOTE.UnitIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_NOTE.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableLFS_FM_UNIT_NOTE.RefIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_NOTE.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    return ((string)(this[this.tableLFS_FM_UNIT_NOTE.SubjectColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_NOTE.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    return ((int)(this[this.tableLFS_FM_UNIT_NOTE.UserIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_NOTE.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateTime_ {
                get {
                    return ((global::System.DateTime)(this[this.tableLFS_FM_UNIT_NOTE.DateTime_Column]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_NOTE.DateTime_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_UNIT_NOTE.NoteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Note\' in table \'LFS_FM_UNIT_NOTE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT_NOTE.NoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_FM_UNIT_NOTE.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_NOTE.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_FM_UNIT_NOTE.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_NOTE.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LIBRARY_FILES_ID {
                get {
                    try {
                        return ((int)(this[this.tableLFS_FM_UNIT_NOTE.LIBRARY_FILES_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LIBRARY_FILES_ID\' in table \'LFS_FM_UNIT_NOTE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT_NOTE.LIBRARY_FILES_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNITRow LFS_FM_UNITRow {
                get {
                    return ((LFS_FM_UNITRow)(this.GetParentRow(this.Table.ParentRelations["FK_LFS_FM_UNIT_NOTE_LFS_FM_UNIT"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LFS_FM_UNIT_NOTE_LFS_FM_UNIT"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoteNull() {
                return this.IsNull(this.tableLFS_FM_UNIT_NOTE.NoteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoteNull() {
                this[this.tableLFS_FM_UNIT_NOTE.NoteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLIBRARY_FILES_IDNull() {
                return this.IsNull(this.tableLFS_FM_UNIT_NOTE.LIBRARY_FILES_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLIBRARY_FILES_IDNull() {
                this[this.tableLFS_FM_UNIT_NOTE.LIBRARY_FILES_IDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_FM_UNIT_CATEGORYRow : global::System.Data.DataRow {
            
            private LFS_FM_UNIT_CATEGORYDataTable tableLFS_FM_UNIT_CATEGORY;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_UNIT_CATEGORYRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_FM_UNIT_CATEGORY = ((LFS_FM_UNIT_CATEGORYDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    return ((int)(this[this.tableLFS_FM_UNIT_CATEGORY.UnitIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_CATEGORY.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CategoryID {
                get {
                    return ((int)(this[this.tableLFS_FM_UNIT_CATEGORY.CategoryIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_CATEGORY.CategoryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_FM_UNIT_CATEGORY.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_CATEGORY.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_FM_UNIT_CATEGORY.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_CATEGORY.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNITRow LFS_FM_UNITRow {
                get {
                    return ((LFS_FM_UNITRow)(this.GetParentRow(this.Table.ParentRelations["FK_LFS_FM_UNIT_CATEGORY_LFS_FM_UNIT"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LFS_FM_UNIT_CATEGORY_LFS_FM_UNIT"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_FM_UNIT_INSPECTIONRow : global::System.Data.DataRow {
            
            private LFS_FM_UNIT_INSPECTIONDataTable tableLFS_FM_UNIT_INSPECTION;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_UNIT_INSPECTIONRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_FM_UNIT_INSPECTION = ((LFS_FM_UNIT_INSPECTIONDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    return ((int)(this[this.tableLFS_FM_UNIT_INSPECTION.UnitIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_INSPECTION.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InspectionID {
                get {
                    return ((int)(this[this.tableLFS_FM_UNIT_INSPECTION.InspectionIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_INSPECTION.InspectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date_ {
                get {
                    return ((global::System.DateTime)(this[this.tableLFS_FM_UNIT_INSPECTION.Date_Column]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_INSPECTION.Date_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long Country {
                get {
                    return ((long)(this[this.tableLFS_FM_UNIT_INSPECTION.CountryColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_INSPECTION.CountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long State {
                get {
                    return ((long)(this[this.tableLFS_FM_UNIT_INSPECTION.StateColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_INSPECTION.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    return ((string)(this[this.tableLFS_FM_UNIT_INSPECTION.TypeColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_INSPECTION.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Result {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_UNIT_INSPECTION.ResultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Result\' in table \'LFS_FM_UNIT_INSPECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT_INSPECTION.ResultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Cost {
                get {
                    try {
                        return ((decimal)(this[this.tableLFS_FM_UNIT_INSPECTION.CostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cost\' in table \'LFS_FM_UNIT_INSPECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT_INSPECTION.CostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Notes {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_UNIT_INSPECTION.NotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Notes\' in table \'LFS_FM_UNIT_INSPECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT_INSPECTION.NotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InspectedBy {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_UNIT_INSPECTION.InspectedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InspectedBy\' in table \'LFS_FM_UNIT_INSPECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT_INSPECTION.InspectedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Attach {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_UNIT_INSPECTION.AttachColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Attach\' in table \'LFS_FM_UNIT_INSPECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT_INSPECTION.AttachColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_FM_UNIT_INSPECTION.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_INSPECTION.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_FM_UNIT_INSPECTION.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_INSPECTION.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNITRow LFS_FM_UNITRow {
                get {
                    return ((LFS_FM_UNITRow)(this.GetParentRow(this.Table.ParentRelations["FK_LFS_FM_UNIT_INSPECTION_LFS_FM_UNIT"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LFS_FM_UNIT_INSPECTION_LFS_FM_UNIT"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResultNull() {
                return this.IsNull(this.tableLFS_FM_UNIT_INSPECTION.ResultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResultNull() {
                this[this.tableLFS_FM_UNIT_INSPECTION.ResultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostNull() {
                return this.IsNull(this.tableLFS_FM_UNIT_INSPECTION.CostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostNull() {
                this[this.tableLFS_FM_UNIT_INSPECTION.CostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotesNull() {
                return this.IsNull(this.tableLFS_FM_UNIT_INSPECTION.NotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotesNull() {
                this[this.tableLFS_FM_UNIT_INSPECTION.NotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInspectedByNull() {
                return this.IsNull(this.tableLFS_FM_UNIT_INSPECTION.InspectedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInspectedByNull() {
                this[this.tableLFS_FM_UNIT_INSPECTION.InspectedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAttachNull() {
                return this.IsNull(this.tableLFS_FM_UNIT_INSPECTION.AttachColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAttachNull() {
                this[this.tableLFS_FM_UNIT_INSPECTION.AttachColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_FM_UNIT_VEHICLERow : global::System.Data.DataRow {
            
            private LFS_FM_UNIT_VEHICLEDataTable tableLFS_FM_UNIT_VEHICLE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_UNIT_VEHICLERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_FM_UNIT_VEHICLE = ((LFS_FM_UNIT_VEHICLEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    return ((int)(this[this.tableLFS_FM_UNIT_VEHICLE.UnitIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_VEHICLE.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long LicenseCountry {
                get {
                    try {
                        return ((long)(this[this.tableLFS_FM_UNIT_VEHICLE.LicenseCountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LicenseCountry\' in table \'LFS_FM_UNIT_VEHICLE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT_VEHICLE.LicenseCountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long LicenseState {
                get {
                    try {
                        return ((long)(this[this.tableLFS_FM_UNIT_VEHICLE.LicenseStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LicenseState\' in table \'LFS_FM_UNIT_VEHICLE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT_VEHICLE.LicenseStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LicensePlateNumbver {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_UNIT_VEHICLE.LicensePlateNumbverColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LicensePlateNumbver\' in table \'LFS_FM_UNIT_VEHICLE\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT_VEHICLE.LicensePlateNumbverColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AportionedTagNumber {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_UNIT_VEHICLE.AportionedTagNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AportionedTagNumber\' in table \'LFS_FM_UNIT_VEHICLE\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT_VEHICLE.AportionedTagNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ActualWeight {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_UNIT_VEHICLE.ActualWeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActualWeight\' in table \'LFS_FM_UNIT_VEHICLE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT_VEHICLE.ActualWeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RegisteredWeight {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_UNIT_VEHICLE.RegisteredWeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RegisteredWeight\' in table \'LFS_FM_UNIT_VEHICLE\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT_VEHICLE.RegisteredWeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TireSizeFront {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_UNIT_VEHICLE.TireSizeFrontColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TireSizeFront\' in table \'LFS_FM_UNIT_VEHICLE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT_VEHICLE.TireSizeFrontColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TireSizeBack {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_UNIT_VEHICLE.TireSizeBackColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TireSizeBack\' in table \'LFS_FM_UNIT_VEHICLE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT_VEHICLE.TireSizeBackColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NumberOfAxes {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_UNIT_VEHICLE.NumberOfAxesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NumberOfAxes\' in table \'LFS_FM_UNIT_VEHICLE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT_VEHICLE.NumberOfAxesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FuelType {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_UNIT_VEHICLE.FuelTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FuelType\' in table \'LFS_FM_UNIT_VEHICLE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT_VEHICLE.FuelTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BeginningOdometer {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_UNIT_VEHICLE.BeginningOdometerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BeginningOdometer\' in table \'LFS_FM_UNIT_VEHICLE\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_UNIT_VEHICLE.BeginningOdometerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReeferEquipped {
                get {
                    return ((bool)(this[this.tableLFS_FM_UNIT_VEHICLE.IsReeferEquippedColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_VEHICLE.IsReeferEquippedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPTOEquipped {
                get {
                    return ((bool)(this[this.tableLFS_FM_UNIT_VEHICLE.IsPTOEquippedColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_VEHICLE.IsPTOEquippedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_FM_UNIT_VEHICLE.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_VEHICLE.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_FM_UNIT_VEHICLE.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_FM_UNIT_VEHICLE.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNITRow LFS_FM_UNITRow {
                get {
                    return ((LFS_FM_UNITRow)(this.GetParentRow(this.Table.ParentRelations["FK_LFS_FM_UNIT_VEHICLE_LFS_FM_UNIT"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LFS_FM_UNIT_VEHICLE_LFS_FM_UNIT"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLicenseCountryNull() {
                return this.IsNull(this.tableLFS_FM_UNIT_VEHICLE.LicenseCountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLicenseCountryNull() {
                this[this.tableLFS_FM_UNIT_VEHICLE.LicenseCountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLicenseStateNull() {
                return this.IsNull(this.tableLFS_FM_UNIT_VEHICLE.LicenseStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLicenseStateNull() {
                this[this.tableLFS_FM_UNIT_VEHICLE.LicenseStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLicensePlateNumbverNull() {
                return this.IsNull(this.tableLFS_FM_UNIT_VEHICLE.LicensePlateNumbverColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLicensePlateNumbverNull() {
                this[this.tableLFS_FM_UNIT_VEHICLE.LicensePlateNumbverColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAportionedTagNumberNull() {
                return this.IsNull(this.tableLFS_FM_UNIT_VEHICLE.AportionedTagNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAportionedTagNumberNull() {
                this[this.tableLFS_FM_UNIT_VEHICLE.AportionedTagNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActualWeightNull() {
                return this.IsNull(this.tableLFS_FM_UNIT_VEHICLE.ActualWeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActualWeightNull() {
                this[this.tableLFS_FM_UNIT_VEHICLE.ActualWeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegisteredWeightNull() {
                return this.IsNull(this.tableLFS_FM_UNIT_VEHICLE.RegisteredWeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegisteredWeightNull() {
                this[this.tableLFS_FM_UNIT_VEHICLE.RegisteredWeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTireSizeFrontNull() {
                return this.IsNull(this.tableLFS_FM_UNIT_VEHICLE.TireSizeFrontColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTireSizeFrontNull() {
                this[this.tableLFS_FM_UNIT_VEHICLE.TireSizeFrontColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTireSizeBackNull() {
                return this.IsNull(this.tableLFS_FM_UNIT_VEHICLE.TireSizeBackColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTireSizeBackNull() {
                this[this.tableLFS_FM_UNIT_VEHICLE.TireSizeBackColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumberOfAxesNull() {
                return this.IsNull(this.tableLFS_FM_UNIT_VEHICLE.NumberOfAxesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumberOfAxesNull() {
                this[this.tableLFS_FM_UNIT_VEHICLE.NumberOfAxesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFuelTypeNull() {
                return this.IsNull(this.tableLFS_FM_UNIT_VEHICLE.FuelTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFuelTypeNull() {
                this[this.tableLFS_FM_UNIT_VEHICLE.FuelTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBeginningOdometerNull() {
                return this.IsNull(this.tableLFS_FM_UNIT_VEHICLE.BeginningOdometerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBeginningOdometerNull() {
                this[this.tableLFS_FM_UNIT_VEHICLE.BeginningOdometerColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_FM_UNIT_COST_HISTORYRowChangeEvent : global::System.EventArgs {
            
            private LFS_FM_UNIT_COST_HISTORYRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_COST_HISTORYRowChangeEvent(LFS_FM_UNIT_COST_HISTORYRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_COST_HISTORYRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRowChangeEvent : global::System.EventArgs {
            
            private LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRowChangeEvent(LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_COST_HISTORY_EXCEPTIONSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_FM_UNITRowChangeEvent : global::System.EventArgs {
            
            private LFS_FM_UNITRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNITRowChangeEvent(LFS_FM_UNITRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNITRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_FM_UNIT_NOTERowChangeEvent : global::System.EventArgs {
            
            private LFS_FM_UNIT_NOTERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_NOTERowChangeEvent(LFS_FM_UNIT_NOTERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_NOTERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_FM_UNIT_CATEGORYRowChangeEvent : global::System.EventArgs {
            
            private LFS_FM_UNIT_CATEGORYRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_CATEGORYRowChangeEvent(LFS_FM_UNIT_CATEGORYRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_CATEGORYRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_FM_UNIT_INSPECTIONRowChangeEvent : global::System.EventArgs {
            
            private LFS_FM_UNIT_INSPECTIONRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_INSPECTIONRowChangeEvent(LFS_FM_UNIT_INSPECTIONRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_INSPECTIONRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_FM_UNIT_VEHICLERowChangeEvent : global::System.EventArgs {
            
            private LFS_FM_UNIT_VEHICLERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_VEHICLERowChangeEvent(LFS_FM_UNIT_VEHICLERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_UNIT_VEHICLERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591