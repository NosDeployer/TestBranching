//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.FleetManagement.Common {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("FmViewTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class FmViewTDS : global::System.Data.DataSet {
        
        private LFS_FM_TYPE_VIEW_DISPLAYDataTable tableLFS_FM_TYPE_VIEW_DISPLAY;
        
        private LFS_FM_TYPE_VIEW_SORTDataTable tableLFS_FM_TYPE_VIEW_SORT;
        
        private LFS_FM_TYPE_VIEW_CONDITIONDataTable tableLFS_FM_TYPE_VIEW_CONDITION;
        
        private LFS_FM_VIEWDataTable tableLFS_FM_VIEW;
        
        private LFS_FM_VIEW_CONDITIONDataTable tableLFS_FM_VIEW_CONDITION;
        
        private LFS_FM_VIEW_DISPLAYDataTable tableLFS_FM_VIEW_DISPLAY;
        
        private LFS_FM_VIEW_SORTDataTable tableLFS_FM_VIEW_SORT;
        
        private FmViewConditionTempDataTable tableFmViewConditionTemp;
        
        private FmViewDisplayTempDataTable tableFmViewDisplayTemp;
        
        private FmViewSortTempDataTable tableFmViewSortTemp;
        
        private FmViewConditionNewDataTable tableFmViewConditionNew;
        
        private global::System.Data.DataRelation relationFK_LFS_FM_VIEW_CONDITION_LFS_FM_TYPE_VIEW_CONDITION;
        
        private global::System.Data.DataRelation relationFK_LFS_FM_VIEW_LFS_FM_VIEW_CONDITION;
        
        private global::System.Data.DataRelation relationFK_LFS_FM_VIEW_DISPLAY_LFS_FM_TYPE_VIEW_DISPLAY;
        
        private global::System.Data.DataRelation relationFK_LFS_FM_VIEW_DISPLAY_LFS_FM_VIEW;
        
        private global::System.Data.DataRelation relationFK_LFS_FM_VIEW_SORT_LFS_FM_TYPE_VIEW_SORT;
        
        private global::System.Data.DataRelation relationFK_LFS_FM_VIEW_SORT_LFS_FM_VIEW;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FmViewTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected FmViewTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["LFS_FM_TYPE_VIEW_DISPLAY"] != null)) {
                    base.Tables.Add(new LFS_FM_TYPE_VIEW_DISPLAYDataTable(ds.Tables["LFS_FM_TYPE_VIEW_DISPLAY"]));
                }
                if ((ds.Tables["LFS_FM_TYPE_VIEW_SORT"] != null)) {
                    base.Tables.Add(new LFS_FM_TYPE_VIEW_SORTDataTable(ds.Tables["LFS_FM_TYPE_VIEW_SORT"]));
                }
                if ((ds.Tables["LFS_FM_TYPE_VIEW_CONDITION"] != null)) {
                    base.Tables.Add(new LFS_FM_TYPE_VIEW_CONDITIONDataTable(ds.Tables["LFS_FM_TYPE_VIEW_CONDITION"]));
                }
                if ((ds.Tables["LFS_FM_VIEW"] != null)) {
                    base.Tables.Add(new LFS_FM_VIEWDataTable(ds.Tables["LFS_FM_VIEW"]));
                }
                if ((ds.Tables["LFS_FM_VIEW_CONDITION"] != null)) {
                    base.Tables.Add(new LFS_FM_VIEW_CONDITIONDataTable(ds.Tables["LFS_FM_VIEW_CONDITION"]));
                }
                if ((ds.Tables["LFS_FM_VIEW_DISPLAY"] != null)) {
                    base.Tables.Add(new LFS_FM_VIEW_DISPLAYDataTable(ds.Tables["LFS_FM_VIEW_DISPLAY"]));
                }
                if ((ds.Tables["LFS_FM_VIEW_SORT"] != null)) {
                    base.Tables.Add(new LFS_FM_VIEW_SORTDataTable(ds.Tables["LFS_FM_VIEW_SORT"]));
                }
                if ((ds.Tables["FmViewConditionTemp"] != null)) {
                    base.Tables.Add(new FmViewConditionTempDataTable(ds.Tables["FmViewConditionTemp"]));
                }
                if ((ds.Tables["FmViewDisplayTemp"] != null)) {
                    base.Tables.Add(new FmViewDisplayTempDataTable(ds.Tables["FmViewDisplayTemp"]));
                }
                if ((ds.Tables["FmViewSortTemp"] != null)) {
                    base.Tables.Add(new FmViewSortTempDataTable(ds.Tables["FmViewSortTemp"]));
                }
                if ((ds.Tables["FmViewConditionNew"] != null)) {
                    base.Tables.Add(new FmViewConditionNewDataTable(ds.Tables["FmViewConditionNew"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_FM_TYPE_VIEW_DISPLAYDataTable LFS_FM_TYPE_VIEW_DISPLAY {
            get {
                return this.tableLFS_FM_TYPE_VIEW_DISPLAY;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_FM_TYPE_VIEW_SORTDataTable LFS_FM_TYPE_VIEW_SORT {
            get {
                return this.tableLFS_FM_TYPE_VIEW_SORT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_FM_TYPE_VIEW_CONDITIONDataTable LFS_FM_TYPE_VIEW_CONDITION {
            get {
                return this.tableLFS_FM_TYPE_VIEW_CONDITION;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_FM_VIEWDataTable LFS_FM_VIEW {
            get {
                return this.tableLFS_FM_VIEW;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_FM_VIEW_CONDITIONDataTable LFS_FM_VIEW_CONDITION {
            get {
                return this.tableLFS_FM_VIEW_CONDITION;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_FM_VIEW_DISPLAYDataTable LFS_FM_VIEW_DISPLAY {
            get {
                return this.tableLFS_FM_VIEW_DISPLAY;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_FM_VIEW_SORTDataTable LFS_FM_VIEW_SORT {
            get {
                return this.tableLFS_FM_VIEW_SORT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FmViewConditionTempDataTable FmViewConditionTemp {
            get {
                return this.tableFmViewConditionTemp;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FmViewDisplayTempDataTable FmViewDisplayTemp {
            get {
                return this.tableFmViewDisplayTemp;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FmViewSortTempDataTable FmViewSortTemp {
            get {
                return this.tableFmViewSortTemp;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FmViewConditionNewDataTable FmViewConditionNew {
            get {
                return this.tableFmViewConditionNew;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            FmViewTDS cln = ((FmViewTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["LFS_FM_TYPE_VIEW_DISPLAY"] != null)) {
                    base.Tables.Add(new LFS_FM_TYPE_VIEW_DISPLAYDataTable(ds.Tables["LFS_FM_TYPE_VIEW_DISPLAY"]));
                }
                if ((ds.Tables["LFS_FM_TYPE_VIEW_SORT"] != null)) {
                    base.Tables.Add(new LFS_FM_TYPE_VIEW_SORTDataTable(ds.Tables["LFS_FM_TYPE_VIEW_SORT"]));
                }
                if ((ds.Tables["LFS_FM_TYPE_VIEW_CONDITION"] != null)) {
                    base.Tables.Add(new LFS_FM_TYPE_VIEW_CONDITIONDataTable(ds.Tables["LFS_FM_TYPE_VIEW_CONDITION"]));
                }
                if ((ds.Tables["LFS_FM_VIEW"] != null)) {
                    base.Tables.Add(new LFS_FM_VIEWDataTable(ds.Tables["LFS_FM_VIEW"]));
                }
                if ((ds.Tables["LFS_FM_VIEW_CONDITION"] != null)) {
                    base.Tables.Add(new LFS_FM_VIEW_CONDITIONDataTable(ds.Tables["LFS_FM_VIEW_CONDITION"]));
                }
                if ((ds.Tables["LFS_FM_VIEW_DISPLAY"] != null)) {
                    base.Tables.Add(new LFS_FM_VIEW_DISPLAYDataTable(ds.Tables["LFS_FM_VIEW_DISPLAY"]));
                }
                if ((ds.Tables["LFS_FM_VIEW_SORT"] != null)) {
                    base.Tables.Add(new LFS_FM_VIEW_SORTDataTable(ds.Tables["LFS_FM_VIEW_SORT"]));
                }
                if ((ds.Tables["FmViewConditionTemp"] != null)) {
                    base.Tables.Add(new FmViewConditionTempDataTable(ds.Tables["FmViewConditionTemp"]));
                }
                if ((ds.Tables["FmViewDisplayTemp"] != null)) {
                    base.Tables.Add(new FmViewDisplayTempDataTable(ds.Tables["FmViewDisplayTemp"]));
                }
                if ((ds.Tables["FmViewSortTemp"] != null)) {
                    base.Tables.Add(new FmViewSortTempDataTable(ds.Tables["FmViewSortTemp"]));
                }
                if ((ds.Tables["FmViewConditionNew"] != null)) {
                    base.Tables.Add(new FmViewConditionNewDataTable(ds.Tables["FmViewConditionNew"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableLFS_FM_TYPE_VIEW_DISPLAY = ((LFS_FM_TYPE_VIEW_DISPLAYDataTable)(base.Tables["LFS_FM_TYPE_VIEW_DISPLAY"]));
            if ((initTable == true)) {
                if ((this.tableLFS_FM_TYPE_VIEW_DISPLAY != null)) {
                    this.tableLFS_FM_TYPE_VIEW_DISPLAY.InitVars();
                }
            }
            this.tableLFS_FM_TYPE_VIEW_SORT = ((LFS_FM_TYPE_VIEW_SORTDataTable)(base.Tables["LFS_FM_TYPE_VIEW_SORT"]));
            if ((initTable == true)) {
                if ((this.tableLFS_FM_TYPE_VIEW_SORT != null)) {
                    this.tableLFS_FM_TYPE_VIEW_SORT.InitVars();
                }
            }
            this.tableLFS_FM_TYPE_VIEW_CONDITION = ((LFS_FM_TYPE_VIEW_CONDITIONDataTable)(base.Tables["LFS_FM_TYPE_VIEW_CONDITION"]));
            if ((initTable == true)) {
                if ((this.tableLFS_FM_TYPE_VIEW_CONDITION != null)) {
                    this.tableLFS_FM_TYPE_VIEW_CONDITION.InitVars();
                }
            }
            this.tableLFS_FM_VIEW = ((LFS_FM_VIEWDataTable)(base.Tables["LFS_FM_VIEW"]));
            if ((initTable == true)) {
                if ((this.tableLFS_FM_VIEW != null)) {
                    this.tableLFS_FM_VIEW.InitVars();
                }
            }
            this.tableLFS_FM_VIEW_CONDITION = ((LFS_FM_VIEW_CONDITIONDataTable)(base.Tables["LFS_FM_VIEW_CONDITION"]));
            if ((initTable == true)) {
                if ((this.tableLFS_FM_VIEW_CONDITION != null)) {
                    this.tableLFS_FM_VIEW_CONDITION.InitVars();
                }
            }
            this.tableLFS_FM_VIEW_DISPLAY = ((LFS_FM_VIEW_DISPLAYDataTable)(base.Tables["LFS_FM_VIEW_DISPLAY"]));
            if ((initTable == true)) {
                if ((this.tableLFS_FM_VIEW_DISPLAY != null)) {
                    this.tableLFS_FM_VIEW_DISPLAY.InitVars();
                }
            }
            this.tableLFS_FM_VIEW_SORT = ((LFS_FM_VIEW_SORTDataTable)(base.Tables["LFS_FM_VIEW_SORT"]));
            if ((initTable == true)) {
                if ((this.tableLFS_FM_VIEW_SORT != null)) {
                    this.tableLFS_FM_VIEW_SORT.InitVars();
                }
            }
            this.tableFmViewConditionTemp = ((FmViewConditionTempDataTable)(base.Tables["FmViewConditionTemp"]));
            if ((initTable == true)) {
                if ((this.tableFmViewConditionTemp != null)) {
                    this.tableFmViewConditionTemp.InitVars();
                }
            }
            this.tableFmViewDisplayTemp = ((FmViewDisplayTempDataTable)(base.Tables["FmViewDisplayTemp"]));
            if ((initTable == true)) {
                if ((this.tableFmViewDisplayTemp != null)) {
                    this.tableFmViewDisplayTemp.InitVars();
                }
            }
            this.tableFmViewSortTemp = ((FmViewSortTempDataTable)(base.Tables["FmViewSortTemp"]));
            if ((initTable == true)) {
                if ((this.tableFmViewSortTemp != null)) {
                    this.tableFmViewSortTemp.InitVars();
                }
            }
            this.tableFmViewConditionNew = ((FmViewConditionNewDataTable)(base.Tables["FmViewConditionNew"]));
            if ((initTable == true)) {
                if ((this.tableFmViewConditionNew != null)) {
                    this.tableFmViewConditionNew.InitVars();
                }
            }
            this.relationFK_LFS_FM_VIEW_CONDITION_LFS_FM_TYPE_VIEW_CONDITION = this.Relations["FK_LFS_FM_VIEW_CONDITION_LFS_FM_TYPE_VIEW_CONDITION"];
            this.relationFK_LFS_FM_VIEW_LFS_FM_VIEW_CONDITION = this.Relations["FK_LFS_FM_VIEW_LFS_FM_VIEW_CONDITION"];
            this.relationFK_LFS_FM_VIEW_DISPLAY_LFS_FM_TYPE_VIEW_DISPLAY = this.Relations["FK_LFS_FM_VIEW_DISPLAY_LFS_FM_TYPE_VIEW_DISPLAY"];
            this.relationFK_LFS_FM_VIEW_DISPLAY_LFS_FM_VIEW = this.Relations["FK_LFS_FM_VIEW_DISPLAY_LFS_FM_VIEW"];
            this.relationFK_LFS_FM_VIEW_SORT_LFS_FM_TYPE_VIEW_SORT = this.Relations["FK_LFS_FM_VIEW_SORT_LFS_FM_TYPE_VIEW_SORT"];
            this.relationFK_LFS_FM_VIEW_SORT_LFS_FM_VIEW = this.Relations["FK_LFS_FM_VIEW_SORT_LFS_FM_VIEW"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "FmViewTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/FmViewTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableLFS_FM_TYPE_VIEW_DISPLAY = new LFS_FM_TYPE_VIEW_DISPLAYDataTable();
            base.Tables.Add(this.tableLFS_FM_TYPE_VIEW_DISPLAY);
            this.tableLFS_FM_TYPE_VIEW_SORT = new LFS_FM_TYPE_VIEW_SORTDataTable();
            base.Tables.Add(this.tableLFS_FM_TYPE_VIEW_SORT);
            this.tableLFS_FM_TYPE_VIEW_CONDITION = new LFS_FM_TYPE_VIEW_CONDITIONDataTable();
            base.Tables.Add(this.tableLFS_FM_TYPE_VIEW_CONDITION);
            this.tableLFS_FM_VIEW = new LFS_FM_VIEWDataTable();
            base.Tables.Add(this.tableLFS_FM_VIEW);
            this.tableLFS_FM_VIEW_CONDITION = new LFS_FM_VIEW_CONDITIONDataTable();
            base.Tables.Add(this.tableLFS_FM_VIEW_CONDITION);
            this.tableLFS_FM_VIEW_DISPLAY = new LFS_FM_VIEW_DISPLAYDataTable();
            base.Tables.Add(this.tableLFS_FM_VIEW_DISPLAY);
            this.tableLFS_FM_VIEW_SORT = new LFS_FM_VIEW_SORTDataTable();
            base.Tables.Add(this.tableLFS_FM_VIEW_SORT);
            this.tableFmViewConditionTemp = new FmViewConditionTempDataTable();
            base.Tables.Add(this.tableFmViewConditionTemp);
            this.tableFmViewDisplayTemp = new FmViewDisplayTempDataTable();
            base.Tables.Add(this.tableFmViewDisplayTemp);
            this.tableFmViewSortTemp = new FmViewSortTempDataTable();
            base.Tables.Add(this.tableFmViewSortTemp);
            this.tableFmViewConditionNew = new FmViewConditionNewDataTable();
            base.Tables.Add(this.tableFmViewConditionNew);
            this.relationFK_LFS_FM_VIEW_CONDITION_LFS_FM_TYPE_VIEW_CONDITION = new global::System.Data.DataRelation("FK_LFS_FM_VIEW_CONDITION_LFS_FM_TYPE_VIEW_CONDITION", new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_TYPE_VIEW_CONDITION.FmTypeColumn,
                        this.tableLFS_FM_TYPE_VIEW_CONDITION.COMPANY_IDColumn,
                        this.tableLFS_FM_TYPE_VIEW_CONDITION.ConditionIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_VIEW_CONDITION.FmTypeColumn,
                        this.tableLFS_FM_VIEW_CONDITION.COMPANY_IDColumn,
                        this.tableLFS_FM_VIEW_CONDITION.ConditionIDColumn}, false);
            this.Relations.Add(this.relationFK_LFS_FM_VIEW_CONDITION_LFS_FM_TYPE_VIEW_CONDITION);
            this.relationFK_LFS_FM_VIEW_LFS_FM_VIEW_CONDITION = new global::System.Data.DataRelation("FK_LFS_FM_VIEW_LFS_FM_VIEW_CONDITION", new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_VIEW.ViewIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_VIEW_CONDITION.ViewIDColumn}, false);
            this.Relations.Add(this.relationFK_LFS_FM_VIEW_LFS_FM_VIEW_CONDITION);
            this.relationFK_LFS_FM_VIEW_DISPLAY_LFS_FM_TYPE_VIEW_DISPLAY = new global::System.Data.DataRelation("FK_LFS_FM_VIEW_DISPLAY_LFS_FM_TYPE_VIEW_DISPLAY", new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_TYPE_VIEW_DISPLAY.FmTypeColumn,
                        this.tableLFS_FM_TYPE_VIEW_DISPLAY.COMPANY_IDColumn,
                        this.tableLFS_FM_TYPE_VIEW_DISPLAY.DisplayIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_VIEW_DISPLAY.FmTypeColumn,
                        this.tableLFS_FM_VIEW_DISPLAY.COMPANY_IDColumn,
                        this.tableLFS_FM_VIEW_DISPLAY.DisplayIDColumn}, false);
            this.Relations.Add(this.relationFK_LFS_FM_VIEW_DISPLAY_LFS_FM_TYPE_VIEW_DISPLAY);
            this.relationFK_LFS_FM_VIEW_DISPLAY_LFS_FM_VIEW = new global::System.Data.DataRelation("FK_LFS_FM_VIEW_DISPLAY_LFS_FM_VIEW", new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_VIEW.ViewIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_VIEW_DISPLAY.ViewIDColumn}, false);
            this.Relations.Add(this.relationFK_LFS_FM_VIEW_DISPLAY_LFS_FM_VIEW);
            this.relationFK_LFS_FM_VIEW_SORT_LFS_FM_TYPE_VIEW_SORT = new global::System.Data.DataRelation("FK_LFS_FM_VIEW_SORT_LFS_FM_TYPE_VIEW_SORT", new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_TYPE_VIEW_SORT.FmTypeColumn,
                        this.tableLFS_FM_TYPE_VIEW_SORT.COMPANY_IDColumn,
                        this.tableLFS_FM_TYPE_VIEW_SORT.SortIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_VIEW_SORT.FmTypeColumn,
                        this.tableLFS_FM_VIEW_SORT.COMPANY_IDColumn,
                        this.tableLFS_FM_VIEW_SORT.SortIDColumn}, false);
            this.Relations.Add(this.relationFK_LFS_FM_VIEW_SORT_LFS_FM_TYPE_VIEW_SORT);
            this.relationFK_LFS_FM_VIEW_SORT_LFS_FM_VIEW = new global::System.Data.DataRelation("FK_LFS_FM_VIEW_SORT_LFS_FM_VIEW", new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_VIEW.ViewIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_VIEW_SORT.ViewIDColumn}, false);
            this.Relations.Add(this.relationFK_LFS_FM_VIEW_SORT_LFS_FM_VIEW);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_FM_TYPE_VIEW_DISPLAY() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_FM_TYPE_VIEW_SORT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_FM_TYPE_VIEW_CONDITION() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_FM_VIEW() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_FM_VIEW_CONDITION() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_FM_VIEW_DISPLAY() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_FM_VIEW_SORT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFmViewConditionTemp() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFmViewDisplayTemp() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFmViewSortTemp() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFmViewConditionNew() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            FmViewTDS ds = new FmViewTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void LFS_FM_TYPE_VIEW_DISPLAYRowChangeEventHandler(object sender, LFS_FM_TYPE_VIEW_DISPLAYRowChangeEvent e);
        
        public delegate void LFS_FM_TYPE_VIEW_SORTRowChangeEventHandler(object sender, LFS_FM_TYPE_VIEW_SORTRowChangeEvent e);
        
        public delegate void LFS_FM_TYPE_VIEW_CONDITIONRowChangeEventHandler(object sender, LFS_FM_TYPE_VIEW_CONDITIONRowChangeEvent e);
        
        public delegate void LFS_FM_VIEWRowChangeEventHandler(object sender, LFS_FM_VIEWRowChangeEvent e);
        
        public delegate void LFS_FM_VIEW_CONDITIONRowChangeEventHandler(object sender, LFS_FM_VIEW_CONDITIONRowChangeEvent e);
        
        public delegate void LFS_FM_VIEW_DISPLAYRowChangeEventHandler(object sender, LFS_FM_VIEW_DISPLAYRowChangeEvent e);
        
        public delegate void LFS_FM_VIEW_SORTRowChangeEventHandler(object sender, LFS_FM_VIEW_SORTRowChangeEvent e);
        
        public delegate void FmViewConditionTempRowChangeEventHandler(object sender, FmViewConditionTempRowChangeEvent e);
        
        public delegate void FmViewDisplayTempRowChangeEventHandler(object sender, FmViewDisplayTempRowChangeEvent e);
        
        public delegate void FmViewSortTempRowChangeEventHandler(object sender, FmViewSortTempRowChangeEvent e);
        
        public delegate void FmViewConditionNewRowChangeEventHandler(object sender, FmViewConditionNewRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_FM_TYPE_VIEW_DISPLAYDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFmType;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnDisplayID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnAlways;
            
            private global::System.Data.DataColumn columnColumn_;
            
            private global::System.Data.DataColumn columnTable_;
            
            private global::System.Data.DataColumn columnSelected;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_TYPE_VIEW_DISPLAYDataTable() {
                this.TableName = "LFS_FM_TYPE_VIEW_DISPLAY";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_TYPE_VIEW_DISPLAYDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_FM_TYPE_VIEW_DISPLAYDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FmTypeColumn {
                get {
                    return this.columnFmType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DisplayIDColumn {
                get {
                    return this.columnDisplayID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AlwaysColumn {
                get {
                    return this.columnAlways;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Column_Column {
                get {
                    return this.columnColumn_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Table_Column {
                get {
                    return this.columnTable_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_TYPE_VIEW_DISPLAYRow this[int index] {
                get {
                    return ((LFS_FM_TYPE_VIEW_DISPLAYRow)(this.Rows[index]));
                }
            }
            
            public event LFS_FM_TYPE_VIEW_DISPLAYRowChangeEventHandler LFS_FM_TYPE_VIEW_DISPLAYRowChanging;
            
            public event LFS_FM_TYPE_VIEW_DISPLAYRowChangeEventHandler LFS_FM_TYPE_VIEW_DISPLAYRowChanged;
            
            public event LFS_FM_TYPE_VIEW_DISPLAYRowChangeEventHandler LFS_FM_TYPE_VIEW_DISPLAYRowDeleting;
            
            public event LFS_FM_TYPE_VIEW_DISPLAYRowChangeEventHandler LFS_FM_TYPE_VIEW_DISPLAYRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_FM_TYPE_VIEW_DISPLAYRow(LFS_FM_TYPE_VIEW_DISPLAYRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_TYPE_VIEW_DISPLAYRow AddLFS_FM_TYPE_VIEW_DISPLAYRow(string FmType, int COMPANY_ID, int DisplayID, string Name, bool Always, string Column_, string Table_, bool Selected) {
                LFS_FM_TYPE_VIEW_DISPLAYRow rowLFS_FM_TYPE_VIEW_DISPLAYRow = ((LFS_FM_TYPE_VIEW_DISPLAYRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FmType,
                        COMPANY_ID,
                        DisplayID,
                        Name,
                        Always,
                        Column_,
                        Table_,
                        Selected};
                rowLFS_FM_TYPE_VIEW_DISPLAYRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_FM_TYPE_VIEW_DISPLAYRow);
                return rowLFS_FM_TYPE_VIEW_DISPLAYRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_TYPE_VIEW_DISPLAYRow FindByFmTypeCOMPANY_IDDisplayID(string FmType, int COMPANY_ID, int DisplayID) {
                return ((LFS_FM_TYPE_VIEW_DISPLAYRow)(this.Rows.Find(new object[] {
                            FmType,
                            COMPANY_ID,
                            DisplayID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_FM_TYPE_VIEW_DISPLAYDataTable cln = ((LFS_FM_TYPE_VIEW_DISPLAYDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_FM_TYPE_VIEW_DISPLAYDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFmType = base.Columns["FmType"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnDisplayID = base.Columns["DisplayID"];
                this.columnName = base.Columns["Name"];
                this.columnAlways = base.Columns["Always"];
                this.columnColumn_ = base.Columns["Column_"];
                this.columnTable_ = base.Columns["Table_"];
                this.columnSelected = base.Columns["Selected"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFmType = new global::System.Data.DataColumn("FmType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFmType);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnDisplayID = new global::System.Data.DataColumn("DisplayID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDisplayID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnAlways = new global::System.Data.DataColumn("Always", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAlways);
                this.columnColumn_ = new global::System.Data.DataColumn("Column_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColumn_);
                this.columnTable_ = new global::System.Data.DataColumn("Table_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTable_);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFmType,
                                this.columnCOMPANY_ID,
                                this.columnDisplayID}, true));
                this.columnFmType.AllowDBNull = false;
                this.columnFmType.MaxLength = 50;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnDisplayID.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnAlways.AllowDBNull = false;
                this.columnColumn_.AllowDBNull = false;
                this.columnColumn_.MaxLength = 100;
                this.columnTable_.AllowDBNull = false;
                this.columnTable_.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_TYPE_VIEW_DISPLAYRow NewLFS_FM_TYPE_VIEW_DISPLAYRow() {
                return ((LFS_FM_TYPE_VIEW_DISPLAYRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_FM_TYPE_VIEW_DISPLAYRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_FM_TYPE_VIEW_DISPLAYRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_FM_TYPE_VIEW_DISPLAYRowChanged != null)) {
                    this.LFS_FM_TYPE_VIEW_DISPLAYRowChanged(this, new LFS_FM_TYPE_VIEW_DISPLAYRowChangeEvent(((LFS_FM_TYPE_VIEW_DISPLAYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_FM_TYPE_VIEW_DISPLAYRowChanging != null)) {
                    this.LFS_FM_TYPE_VIEW_DISPLAYRowChanging(this, new LFS_FM_TYPE_VIEW_DISPLAYRowChangeEvent(((LFS_FM_TYPE_VIEW_DISPLAYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_FM_TYPE_VIEW_DISPLAYRowDeleted != null)) {
                    this.LFS_FM_TYPE_VIEW_DISPLAYRowDeleted(this, new LFS_FM_TYPE_VIEW_DISPLAYRowChangeEvent(((LFS_FM_TYPE_VIEW_DISPLAYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_FM_TYPE_VIEW_DISPLAYRowDeleting != null)) {
                    this.LFS_FM_TYPE_VIEW_DISPLAYRowDeleting(this, new LFS_FM_TYPE_VIEW_DISPLAYRowChangeEvent(((LFS_FM_TYPE_VIEW_DISPLAYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_FM_TYPE_VIEW_DISPLAYRow(LFS_FM_TYPE_VIEW_DISPLAYRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FmViewTDS ds = new FmViewTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_FM_TYPE_VIEW_DISPLAYDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_FM_TYPE_VIEW_SORTDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFmType;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnSortID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnInFor;
            
            private global::System.Data.DataColumn columnInView;
            
            private global::System.Data.DataColumn columnColumn_;
            
            private global::System.Data.DataColumn columnTable_;
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnOrder_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_TYPE_VIEW_SORTDataTable() {
                this.TableName = "LFS_FM_TYPE_VIEW_SORT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_TYPE_VIEW_SORTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_FM_TYPE_VIEW_SORTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FmTypeColumn {
                get {
                    return this.columnFmType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SortIDColumn {
                get {
                    return this.columnSortID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InForColumn {
                get {
                    return this.columnInFor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InViewColumn {
                get {
                    return this.columnInView;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Column_Column {
                get {
                    return this.columnColumn_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Table_Column {
                get {
                    return this.columnTable_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Order_Column {
                get {
                    return this.columnOrder_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_TYPE_VIEW_SORTRow this[int index] {
                get {
                    return ((LFS_FM_TYPE_VIEW_SORTRow)(this.Rows[index]));
                }
            }
            
            public event LFS_FM_TYPE_VIEW_SORTRowChangeEventHandler LFS_FM_TYPE_VIEW_SORTRowChanging;
            
            public event LFS_FM_TYPE_VIEW_SORTRowChangeEventHandler LFS_FM_TYPE_VIEW_SORTRowChanged;
            
            public event LFS_FM_TYPE_VIEW_SORTRowChangeEventHandler LFS_FM_TYPE_VIEW_SORTRowDeleting;
            
            public event LFS_FM_TYPE_VIEW_SORTRowChangeEventHandler LFS_FM_TYPE_VIEW_SORTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_FM_TYPE_VIEW_SORTRow(LFS_FM_TYPE_VIEW_SORTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_TYPE_VIEW_SORTRow AddLFS_FM_TYPE_VIEW_SORTRow(string FmType, int COMPANY_ID, int SortID, string Name, bool InFor, bool InView, string Column_, string Table_, bool Selected, int Order_) {
                LFS_FM_TYPE_VIEW_SORTRow rowLFS_FM_TYPE_VIEW_SORTRow = ((LFS_FM_TYPE_VIEW_SORTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FmType,
                        COMPANY_ID,
                        SortID,
                        Name,
                        InFor,
                        InView,
                        Column_,
                        Table_,
                        Selected,
                        Order_};
                rowLFS_FM_TYPE_VIEW_SORTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_FM_TYPE_VIEW_SORTRow);
                return rowLFS_FM_TYPE_VIEW_SORTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_TYPE_VIEW_SORTRow FindByFmTypeCOMPANY_IDSortID(string FmType, int COMPANY_ID, int SortID) {
                return ((LFS_FM_TYPE_VIEW_SORTRow)(this.Rows.Find(new object[] {
                            FmType,
                            COMPANY_ID,
                            SortID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_FM_TYPE_VIEW_SORTDataTable cln = ((LFS_FM_TYPE_VIEW_SORTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_FM_TYPE_VIEW_SORTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFmType = base.Columns["FmType"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnSortID = base.Columns["SortID"];
                this.columnName = base.Columns["Name"];
                this.columnInFor = base.Columns["InFor"];
                this.columnInView = base.Columns["InView"];
                this.columnColumn_ = base.Columns["Column_"];
                this.columnTable_ = base.Columns["Table_"];
                this.columnSelected = base.Columns["Selected"];
                this.columnOrder_ = base.Columns["Order_"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFmType = new global::System.Data.DataColumn("FmType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFmType);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnSortID = new global::System.Data.DataColumn("SortID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSortID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnInFor = new global::System.Data.DataColumn("InFor", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInFor);
                this.columnInView = new global::System.Data.DataColumn("InView", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInView);
                this.columnColumn_ = new global::System.Data.DataColumn("Column_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColumn_);
                this.columnTable_ = new global::System.Data.DataColumn("Table_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTable_);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnOrder_ = new global::System.Data.DataColumn("Order_", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrder_);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFmType,
                                this.columnCOMPANY_ID,
                                this.columnSortID}, true));
                this.columnFmType.AllowDBNull = false;
                this.columnFmType.MaxLength = 50;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnSortID.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 100;
                this.columnInFor.AllowDBNull = false;
                this.columnInView.AllowDBNull = false;
                this.columnColumn_.MaxLength = 100;
                this.columnTable_.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_TYPE_VIEW_SORTRow NewLFS_FM_TYPE_VIEW_SORTRow() {
                return ((LFS_FM_TYPE_VIEW_SORTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_FM_TYPE_VIEW_SORTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_FM_TYPE_VIEW_SORTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_FM_TYPE_VIEW_SORTRowChanged != null)) {
                    this.LFS_FM_TYPE_VIEW_SORTRowChanged(this, new LFS_FM_TYPE_VIEW_SORTRowChangeEvent(((LFS_FM_TYPE_VIEW_SORTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_FM_TYPE_VIEW_SORTRowChanging != null)) {
                    this.LFS_FM_TYPE_VIEW_SORTRowChanging(this, new LFS_FM_TYPE_VIEW_SORTRowChangeEvent(((LFS_FM_TYPE_VIEW_SORTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_FM_TYPE_VIEW_SORTRowDeleted != null)) {
                    this.LFS_FM_TYPE_VIEW_SORTRowDeleted(this, new LFS_FM_TYPE_VIEW_SORTRowChangeEvent(((LFS_FM_TYPE_VIEW_SORTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_FM_TYPE_VIEW_SORTRowDeleting != null)) {
                    this.LFS_FM_TYPE_VIEW_SORTRowDeleting(this, new LFS_FM_TYPE_VIEW_SORTRowChangeEvent(((LFS_FM_TYPE_VIEW_SORTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_FM_TYPE_VIEW_SORTRow(LFS_FM_TYPE_VIEW_SORTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FmViewTDS ds = new FmViewTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_FM_TYPE_VIEW_SORTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_FM_TYPE_VIEW_CONDITIONDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFmType;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnConditionID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnInFor;
            
            private global::System.Data.DataColumn columnInView;
            
            private global::System.Data.DataColumn columnColumn_;
            
            private global::System.Data.DataColumn columnTable_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_TYPE_VIEW_CONDITIONDataTable() {
                this.TableName = "LFS_FM_TYPE_VIEW_CONDITION";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_TYPE_VIEW_CONDITIONDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_FM_TYPE_VIEW_CONDITIONDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FmTypeColumn {
                get {
                    return this.columnFmType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConditionIDColumn {
                get {
                    return this.columnConditionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InForColumn {
                get {
                    return this.columnInFor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InViewColumn {
                get {
                    return this.columnInView;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Column_Column {
                get {
                    return this.columnColumn_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Table_Column {
                get {
                    return this.columnTable_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_TYPE_VIEW_CONDITIONRow this[int index] {
                get {
                    return ((LFS_FM_TYPE_VIEW_CONDITIONRow)(this.Rows[index]));
                }
            }
            
            public event LFS_FM_TYPE_VIEW_CONDITIONRowChangeEventHandler LFS_FM_TYPE_VIEW_CONDITIONRowChanging;
            
            public event LFS_FM_TYPE_VIEW_CONDITIONRowChangeEventHandler LFS_FM_TYPE_VIEW_CONDITIONRowChanged;
            
            public event LFS_FM_TYPE_VIEW_CONDITIONRowChangeEventHandler LFS_FM_TYPE_VIEW_CONDITIONRowDeleting;
            
            public event LFS_FM_TYPE_VIEW_CONDITIONRowChangeEventHandler LFS_FM_TYPE_VIEW_CONDITIONRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_FM_TYPE_VIEW_CONDITIONRow(LFS_FM_TYPE_VIEW_CONDITIONRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_TYPE_VIEW_CONDITIONRow AddLFS_FM_TYPE_VIEW_CONDITIONRow(string FmType, int COMPANY_ID, int ConditionID, string Name, string Type, bool InFor, bool InView, string Column_, string Table_) {
                LFS_FM_TYPE_VIEW_CONDITIONRow rowLFS_FM_TYPE_VIEW_CONDITIONRow = ((LFS_FM_TYPE_VIEW_CONDITIONRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FmType,
                        COMPANY_ID,
                        ConditionID,
                        Name,
                        Type,
                        InFor,
                        InView,
                        Column_,
                        Table_};
                rowLFS_FM_TYPE_VIEW_CONDITIONRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_FM_TYPE_VIEW_CONDITIONRow);
                return rowLFS_FM_TYPE_VIEW_CONDITIONRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_TYPE_VIEW_CONDITIONRow FindByFmTypeCOMPANY_IDConditionID(string FmType, int COMPANY_ID, int ConditionID) {
                return ((LFS_FM_TYPE_VIEW_CONDITIONRow)(this.Rows.Find(new object[] {
                            FmType,
                            COMPANY_ID,
                            ConditionID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_FM_TYPE_VIEW_CONDITIONDataTable cln = ((LFS_FM_TYPE_VIEW_CONDITIONDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_FM_TYPE_VIEW_CONDITIONDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFmType = base.Columns["FmType"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnConditionID = base.Columns["ConditionID"];
                this.columnName = base.Columns["Name"];
                this.columnType = base.Columns["Type"];
                this.columnInFor = base.Columns["InFor"];
                this.columnInView = base.Columns["InView"];
                this.columnColumn_ = base.Columns["Column_"];
                this.columnTable_ = base.Columns["Table_"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFmType = new global::System.Data.DataColumn("FmType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFmType);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnConditionID = new global::System.Data.DataColumn("ConditionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConditionID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnInFor = new global::System.Data.DataColumn("InFor", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInFor);
                this.columnInView = new global::System.Data.DataColumn("InView", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInView);
                this.columnColumn_ = new global::System.Data.DataColumn("Column_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColumn_);
                this.columnTable_ = new global::System.Data.DataColumn("Table_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTable_);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFmType,
                                this.columnCOMPANY_ID,
                                this.columnConditionID}, true));
                this.columnFmType.AllowDBNull = false;
                this.columnFmType.MaxLength = 50;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnConditionID.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 100;
                this.columnType.AllowDBNull = false;
                this.columnType.MaxLength = 50;
                this.columnInFor.AllowDBNull = false;
                this.columnInView.AllowDBNull = false;
                this.columnColumn_.MaxLength = 100;
                this.columnTable_.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_TYPE_VIEW_CONDITIONRow NewLFS_FM_TYPE_VIEW_CONDITIONRow() {
                return ((LFS_FM_TYPE_VIEW_CONDITIONRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_FM_TYPE_VIEW_CONDITIONRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_FM_TYPE_VIEW_CONDITIONRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_FM_TYPE_VIEW_CONDITIONRowChanged != null)) {
                    this.LFS_FM_TYPE_VIEW_CONDITIONRowChanged(this, new LFS_FM_TYPE_VIEW_CONDITIONRowChangeEvent(((LFS_FM_TYPE_VIEW_CONDITIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_FM_TYPE_VIEW_CONDITIONRowChanging != null)) {
                    this.LFS_FM_TYPE_VIEW_CONDITIONRowChanging(this, new LFS_FM_TYPE_VIEW_CONDITIONRowChangeEvent(((LFS_FM_TYPE_VIEW_CONDITIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_FM_TYPE_VIEW_CONDITIONRowDeleted != null)) {
                    this.LFS_FM_TYPE_VIEW_CONDITIONRowDeleted(this, new LFS_FM_TYPE_VIEW_CONDITIONRowChangeEvent(((LFS_FM_TYPE_VIEW_CONDITIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_FM_TYPE_VIEW_CONDITIONRowDeleting != null)) {
                    this.LFS_FM_TYPE_VIEW_CONDITIONRowDeleting(this, new LFS_FM_TYPE_VIEW_CONDITIONRowChangeEvent(((LFS_FM_TYPE_VIEW_CONDITIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_FM_TYPE_VIEW_CONDITIONRow(LFS_FM_TYPE_VIEW_CONDITIONRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FmViewTDS ds = new FmViewTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_FM_TYPE_VIEW_CONDITIONDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_FM_VIEWDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnViewID;
            
            private global::System.Data.DataColumn columnLoginID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnLogic;
            
            private global::System.Data.DataColumn columnSqlCommand;
            
            private global::System.Data.DataColumn columnFmType;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEWDataTable() {
                this.TableName = "LFS_FM_VIEW";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_VIEWDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_FM_VIEWDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ViewIDColumn {
                get {
                    return this.columnViewID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoginIDColumn {
                get {
                    return this.columnLoginID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogicColumn {
                get {
                    return this.columnLogic;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SqlCommandColumn {
                get {
                    return this.columnSqlCommand;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FmTypeColumn {
                get {
                    return this.columnFmType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEWRow this[int index] {
                get {
                    return ((LFS_FM_VIEWRow)(this.Rows[index]));
                }
            }
            
            public event LFS_FM_VIEWRowChangeEventHandler LFS_FM_VIEWRowChanging;
            
            public event LFS_FM_VIEWRowChangeEventHandler LFS_FM_VIEWRowChanged;
            
            public event LFS_FM_VIEWRowChangeEventHandler LFS_FM_VIEWRowDeleting;
            
            public event LFS_FM_VIEWRowChangeEventHandler LFS_FM_VIEWRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_FM_VIEWRow(LFS_FM_VIEWRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEWRow AddLFS_FM_VIEWRow(int ViewID, int LoginID, string Name, string Type, string Logic, string SqlCommand, string FmType, bool Deleted, int COMPANY_ID) {
                LFS_FM_VIEWRow rowLFS_FM_VIEWRow = ((LFS_FM_VIEWRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ViewID,
                        LoginID,
                        Name,
                        Type,
                        Logic,
                        SqlCommand,
                        FmType,
                        Deleted,
                        COMPANY_ID};
                rowLFS_FM_VIEWRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_FM_VIEWRow);
                return rowLFS_FM_VIEWRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEWRow FindByViewID(int ViewID) {
                return ((LFS_FM_VIEWRow)(this.Rows.Find(new object[] {
                            ViewID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_FM_VIEWDataTable cln = ((LFS_FM_VIEWDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_FM_VIEWDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnViewID = base.Columns["ViewID"];
                this.columnLoginID = base.Columns["LoginID"];
                this.columnName = base.Columns["Name"];
                this.columnType = base.Columns["Type"];
                this.columnLogic = base.Columns["Logic"];
                this.columnSqlCommand = base.Columns["SqlCommand"];
                this.columnFmType = base.Columns["FmType"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnViewID = new global::System.Data.DataColumn("ViewID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnViewID);
                this.columnLoginID = new global::System.Data.DataColumn("LoginID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoginID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnLogic = new global::System.Data.DataColumn("Logic", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogic);
                this.columnSqlCommand = new global::System.Data.DataColumn("SqlCommand", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSqlCommand);
                this.columnFmType = new global::System.Data.DataColumn("FmType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFmType);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnViewID}, true));
                this.columnViewID.AllowDBNull = false;
                this.columnViewID.Unique = true;
                this.columnLoginID.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 100;
                this.columnType.AllowDBNull = false;
                this.columnType.MaxLength = 25;
                this.columnLogic.MaxLength = 1073741823;
                this.columnSqlCommand.AllowDBNull = false;
                this.columnSqlCommand.MaxLength = 1073741823;
                this.columnFmType.AllowDBNull = false;
                this.columnFmType.MaxLength = 50;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEWRow NewLFS_FM_VIEWRow() {
                return ((LFS_FM_VIEWRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_FM_VIEWRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_FM_VIEWRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_FM_VIEWRowChanged != null)) {
                    this.LFS_FM_VIEWRowChanged(this, new LFS_FM_VIEWRowChangeEvent(((LFS_FM_VIEWRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_FM_VIEWRowChanging != null)) {
                    this.LFS_FM_VIEWRowChanging(this, new LFS_FM_VIEWRowChangeEvent(((LFS_FM_VIEWRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_FM_VIEWRowDeleted != null)) {
                    this.LFS_FM_VIEWRowDeleted(this, new LFS_FM_VIEWRowChangeEvent(((LFS_FM_VIEWRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_FM_VIEWRowDeleting != null)) {
                    this.LFS_FM_VIEWRowDeleting(this, new LFS_FM_VIEWRowChangeEvent(((LFS_FM_VIEWRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_FM_VIEWRow(LFS_FM_VIEWRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FmViewTDS ds = new FmViewTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_FM_VIEWDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_FM_VIEW_CONDITIONDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnViewID;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnFmType;
            
            private global::System.Data.DataColumn columnConditionID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnOperator;
            
            private global::System.Data.DataColumn columnConditionNumber;
            
            private global::System.Data.DataColumn columnValue_;
            
            private global::System.Data.DataColumn columnDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEW_CONDITIONDataTable() {
                this.TableName = "LFS_FM_VIEW_CONDITION";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_VIEW_CONDITIONDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_FM_VIEW_CONDITIONDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ViewIDColumn {
                get {
                    return this.columnViewID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FmTypeColumn {
                get {
                    return this.columnFmType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConditionIDColumn {
                get {
                    return this.columnConditionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OperatorColumn {
                get {
                    return this.columnOperator;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConditionNumberColumn {
                get {
                    return this.columnConditionNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value_Column {
                get {
                    return this.columnValue_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEW_CONDITIONRow this[int index] {
                get {
                    return ((LFS_FM_VIEW_CONDITIONRow)(this.Rows[index]));
                }
            }
            
            public event LFS_FM_VIEW_CONDITIONRowChangeEventHandler LFS_FM_VIEW_CONDITIONRowChanging;
            
            public event LFS_FM_VIEW_CONDITIONRowChangeEventHandler LFS_FM_VIEW_CONDITIONRowChanged;
            
            public event LFS_FM_VIEW_CONDITIONRowChangeEventHandler LFS_FM_VIEW_CONDITIONRowDeleting;
            
            public event LFS_FM_VIEW_CONDITIONRowChangeEventHandler LFS_FM_VIEW_CONDITIONRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_FM_VIEW_CONDITIONRow(LFS_FM_VIEW_CONDITIONRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEW_CONDITIONRow AddLFS_FM_VIEW_CONDITIONRow(LFS_FM_VIEWRow parentLFS_FM_VIEWRowByFK_LFS_FM_VIEW_LFS_FM_VIEW_CONDITION, int COMPANY_ID, string FmType, int ConditionID, int RefID, string Operator, int ConditionNumber, string Value_, bool Deleted) {
                LFS_FM_VIEW_CONDITIONRow rowLFS_FM_VIEW_CONDITIONRow = ((LFS_FM_VIEW_CONDITIONRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        COMPANY_ID,
                        FmType,
                        ConditionID,
                        RefID,
                        Operator,
                        ConditionNumber,
                        Value_,
                        Deleted};
                if ((parentLFS_FM_VIEWRowByFK_LFS_FM_VIEW_LFS_FM_VIEW_CONDITION != null)) {
                    columnValuesArray[0] = parentLFS_FM_VIEWRowByFK_LFS_FM_VIEW_LFS_FM_VIEW_CONDITION[0];
                }
                rowLFS_FM_VIEW_CONDITIONRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_FM_VIEW_CONDITIONRow);
                return rowLFS_FM_VIEW_CONDITIONRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEW_CONDITIONRow FindByViewIDCOMPANY_IDFmTypeConditionIDRefID(int ViewID, int COMPANY_ID, string FmType, int ConditionID, int RefID) {
                return ((LFS_FM_VIEW_CONDITIONRow)(this.Rows.Find(new object[] {
                            ViewID,
                            COMPANY_ID,
                            FmType,
                            ConditionID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_FM_VIEW_CONDITIONDataTable cln = ((LFS_FM_VIEW_CONDITIONDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_FM_VIEW_CONDITIONDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnViewID = base.Columns["ViewID"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnFmType = base.Columns["FmType"];
                this.columnConditionID = base.Columns["ConditionID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnOperator = base.Columns["Operator"];
                this.columnConditionNumber = base.Columns["ConditionNumber"];
                this.columnValue_ = base.Columns["Value_"];
                this.columnDeleted = base.Columns["Deleted"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnViewID = new global::System.Data.DataColumn("ViewID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnViewID);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnFmType = new global::System.Data.DataColumn("FmType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFmType);
                this.columnConditionID = new global::System.Data.DataColumn("ConditionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConditionID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnOperator = new global::System.Data.DataColumn("Operator", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperator);
                this.columnConditionNumber = new global::System.Data.DataColumn("ConditionNumber", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConditionNumber);
                this.columnValue_ = new global::System.Data.DataColumn("Value_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue_);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnViewID,
                                this.columnCOMPANY_ID,
                                this.columnFmType,
                                this.columnConditionID,
                                this.columnRefID}, true));
                this.columnViewID.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnFmType.AllowDBNull = false;
                this.columnFmType.MaxLength = 50;
                this.columnConditionID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnOperator.AllowDBNull = false;
                this.columnOperator.MaxLength = 50;
                this.columnConditionNumber.AllowDBNull = false;
                this.columnValue_.MaxLength = 100;
                this.columnDeleted.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEW_CONDITIONRow NewLFS_FM_VIEW_CONDITIONRow() {
                return ((LFS_FM_VIEW_CONDITIONRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_FM_VIEW_CONDITIONRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_FM_VIEW_CONDITIONRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_FM_VIEW_CONDITIONRowChanged != null)) {
                    this.LFS_FM_VIEW_CONDITIONRowChanged(this, new LFS_FM_VIEW_CONDITIONRowChangeEvent(((LFS_FM_VIEW_CONDITIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_FM_VIEW_CONDITIONRowChanging != null)) {
                    this.LFS_FM_VIEW_CONDITIONRowChanging(this, new LFS_FM_VIEW_CONDITIONRowChangeEvent(((LFS_FM_VIEW_CONDITIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_FM_VIEW_CONDITIONRowDeleted != null)) {
                    this.LFS_FM_VIEW_CONDITIONRowDeleted(this, new LFS_FM_VIEW_CONDITIONRowChangeEvent(((LFS_FM_VIEW_CONDITIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_FM_VIEW_CONDITIONRowDeleting != null)) {
                    this.LFS_FM_VIEW_CONDITIONRowDeleting(this, new LFS_FM_VIEW_CONDITIONRowChangeEvent(((LFS_FM_VIEW_CONDITIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_FM_VIEW_CONDITIONRow(LFS_FM_VIEW_CONDITIONRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FmViewTDS ds = new FmViewTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_FM_VIEW_CONDITIONDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_FM_VIEW_DISPLAYDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnViewID;
            
            private global::System.Data.DataColumn columnFmType;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnDisplayID;
            
            private global::System.Data.DataColumn columnDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEW_DISPLAYDataTable() {
                this.TableName = "LFS_FM_VIEW_DISPLAY";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_VIEW_DISPLAYDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_FM_VIEW_DISPLAYDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ViewIDColumn {
                get {
                    return this.columnViewID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FmTypeColumn {
                get {
                    return this.columnFmType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DisplayIDColumn {
                get {
                    return this.columnDisplayID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEW_DISPLAYRow this[int index] {
                get {
                    return ((LFS_FM_VIEW_DISPLAYRow)(this.Rows[index]));
                }
            }
            
            public event LFS_FM_VIEW_DISPLAYRowChangeEventHandler LFS_FM_VIEW_DISPLAYRowChanging;
            
            public event LFS_FM_VIEW_DISPLAYRowChangeEventHandler LFS_FM_VIEW_DISPLAYRowChanged;
            
            public event LFS_FM_VIEW_DISPLAYRowChangeEventHandler LFS_FM_VIEW_DISPLAYRowDeleting;
            
            public event LFS_FM_VIEW_DISPLAYRowChangeEventHandler LFS_FM_VIEW_DISPLAYRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_FM_VIEW_DISPLAYRow(LFS_FM_VIEW_DISPLAYRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEW_DISPLAYRow AddLFS_FM_VIEW_DISPLAYRow(LFS_FM_VIEWRow parentLFS_FM_VIEWRowByFK_LFS_FM_VIEW_DISPLAY_LFS_FM_VIEW, string FmType, int COMPANY_ID, int DisplayID, bool Deleted) {
                LFS_FM_VIEW_DISPLAYRow rowLFS_FM_VIEW_DISPLAYRow = ((LFS_FM_VIEW_DISPLAYRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        FmType,
                        COMPANY_ID,
                        DisplayID,
                        Deleted};
                if ((parentLFS_FM_VIEWRowByFK_LFS_FM_VIEW_DISPLAY_LFS_FM_VIEW != null)) {
                    columnValuesArray[0] = parentLFS_FM_VIEWRowByFK_LFS_FM_VIEW_DISPLAY_LFS_FM_VIEW[0];
                }
                rowLFS_FM_VIEW_DISPLAYRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_FM_VIEW_DISPLAYRow);
                return rowLFS_FM_VIEW_DISPLAYRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEW_DISPLAYRow FindByViewIDFmTypeCOMPANY_IDDisplayID(int ViewID, string FmType, int COMPANY_ID, int DisplayID) {
                return ((LFS_FM_VIEW_DISPLAYRow)(this.Rows.Find(new object[] {
                            ViewID,
                            FmType,
                            COMPANY_ID,
                            DisplayID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_FM_VIEW_DISPLAYDataTable cln = ((LFS_FM_VIEW_DISPLAYDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_FM_VIEW_DISPLAYDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnViewID = base.Columns["ViewID"];
                this.columnFmType = base.Columns["FmType"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnDisplayID = base.Columns["DisplayID"];
                this.columnDeleted = base.Columns["Deleted"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnViewID = new global::System.Data.DataColumn("ViewID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnViewID);
                this.columnFmType = new global::System.Data.DataColumn("FmType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFmType);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnDisplayID = new global::System.Data.DataColumn("DisplayID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDisplayID);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnViewID,
                                this.columnFmType,
                                this.columnCOMPANY_ID,
                                this.columnDisplayID}, true));
                this.columnViewID.AllowDBNull = false;
                this.columnFmType.AllowDBNull = false;
                this.columnFmType.MaxLength = 50;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnDisplayID.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEW_DISPLAYRow NewLFS_FM_VIEW_DISPLAYRow() {
                return ((LFS_FM_VIEW_DISPLAYRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_FM_VIEW_DISPLAYRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_FM_VIEW_DISPLAYRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_FM_VIEW_DISPLAYRowChanged != null)) {
                    this.LFS_FM_VIEW_DISPLAYRowChanged(this, new LFS_FM_VIEW_DISPLAYRowChangeEvent(((LFS_FM_VIEW_DISPLAYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_FM_VIEW_DISPLAYRowChanging != null)) {
                    this.LFS_FM_VIEW_DISPLAYRowChanging(this, new LFS_FM_VIEW_DISPLAYRowChangeEvent(((LFS_FM_VIEW_DISPLAYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_FM_VIEW_DISPLAYRowDeleted != null)) {
                    this.LFS_FM_VIEW_DISPLAYRowDeleted(this, new LFS_FM_VIEW_DISPLAYRowChangeEvent(((LFS_FM_VIEW_DISPLAYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_FM_VIEW_DISPLAYRowDeleting != null)) {
                    this.LFS_FM_VIEW_DISPLAYRowDeleting(this, new LFS_FM_VIEW_DISPLAYRowChangeEvent(((LFS_FM_VIEW_DISPLAYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_FM_VIEW_DISPLAYRow(LFS_FM_VIEW_DISPLAYRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FmViewTDS ds = new FmViewTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_FM_VIEW_DISPLAYDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_FM_VIEW_SORTDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnViewID;
            
            private global::System.Data.DataColumn columnFmType;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnSortID;
            
            private global::System.Data.DataColumn columnOrder_;
            
            private global::System.Data.DataColumn columnDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEW_SORTDataTable() {
                this.TableName = "LFS_FM_VIEW_SORT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_VIEW_SORTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_FM_VIEW_SORTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ViewIDColumn {
                get {
                    return this.columnViewID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FmTypeColumn {
                get {
                    return this.columnFmType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SortIDColumn {
                get {
                    return this.columnSortID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Order_Column {
                get {
                    return this.columnOrder_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEW_SORTRow this[int index] {
                get {
                    return ((LFS_FM_VIEW_SORTRow)(this.Rows[index]));
                }
            }
            
            public event LFS_FM_VIEW_SORTRowChangeEventHandler LFS_FM_VIEW_SORTRowChanging;
            
            public event LFS_FM_VIEW_SORTRowChangeEventHandler LFS_FM_VIEW_SORTRowChanged;
            
            public event LFS_FM_VIEW_SORTRowChangeEventHandler LFS_FM_VIEW_SORTRowDeleting;
            
            public event LFS_FM_VIEW_SORTRowChangeEventHandler LFS_FM_VIEW_SORTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_FM_VIEW_SORTRow(LFS_FM_VIEW_SORTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEW_SORTRow AddLFS_FM_VIEW_SORTRow(LFS_FM_VIEWRow parentLFS_FM_VIEWRowByFK_LFS_FM_VIEW_SORT_LFS_FM_VIEW, string FmType, int COMPANY_ID, int SortID, int Order_, bool Deleted) {
                LFS_FM_VIEW_SORTRow rowLFS_FM_VIEW_SORTRow = ((LFS_FM_VIEW_SORTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        FmType,
                        COMPANY_ID,
                        SortID,
                        Order_,
                        Deleted};
                if ((parentLFS_FM_VIEWRowByFK_LFS_FM_VIEW_SORT_LFS_FM_VIEW != null)) {
                    columnValuesArray[0] = parentLFS_FM_VIEWRowByFK_LFS_FM_VIEW_SORT_LFS_FM_VIEW[0];
                }
                rowLFS_FM_VIEW_SORTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_FM_VIEW_SORTRow);
                return rowLFS_FM_VIEW_SORTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEW_SORTRow FindByViewIDFmTypeCOMPANY_IDSortID(int ViewID, string FmType, int COMPANY_ID, int SortID) {
                return ((LFS_FM_VIEW_SORTRow)(this.Rows.Find(new object[] {
                            ViewID,
                            FmType,
                            COMPANY_ID,
                            SortID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_FM_VIEW_SORTDataTable cln = ((LFS_FM_VIEW_SORTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_FM_VIEW_SORTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnViewID = base.Columns["ViewID"];
                this.columnFmType = base.Columns["FmType"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnSortID = base.Columns["SortID"];
                this.columnOrder_ = base.Columns["Order_"];
                this.columnDeleted = base.Columns["Deleted"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnViewID = new global::System.Data.DataColumn("ViewID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnViewID);
                this.columnFmType = new global::System.Data.DataColumn("FmType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFmType);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnSortID = new global::System.Data.DataColumn("SortID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSortID);
                this.columnOrder_ = new global::System.Data.DataColumn("Order_", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrder_);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnViewID,
                                this.columnFmType,
                                this.columnCOMPANY_ID,
                                this.columnSortID}, true));
                this.columnViewID.AllowDBNull = false;
                this.columnFmType.AllowDBNull = false;
                this.columnFmType.MaxLength = 50;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnSortID.AllowDBNull = false;
                this.columnOrder_.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEW_SORTRow NewLFS_FM_VIEW_SORTRow() {
                return ((LFS_FM_VIEW_SORTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_FM_VIEW_SORTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_FM_VIEW_SORTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_FM_VIEW_SORTRowChanged != null)) {
                    this.LFS_FM_VIEW_SORTRowChanged(this, new LFS_FM_VIEW_SORTRowChangeEvent(((LFS_FM_VIEW_SORTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_FM_VIEW_SORTRowChanging != null)) {
                    this.LFS_FM_VIEW_SORTRowChanging(this, new LFS_FM_VIEW_SORTRowChangeEvent(((LFS_FM_VIEW_SORTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_FM_VIEW_SORTRowDeleted != null)) {
                    this.LFS_FM_VIEW_SORTRowDeleted(this, new LFS_FM_VIEW_SORTRowChangeEvent(((LFS_FM_VIEW_SORTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_FM_VIEW_SORTRowDeleting != null)) {
                    this.LFS_FM_VIEW_SORTRowDeleting(this, new LFS_FM_VIEW_SORTRowChangeEvent(((LFS_FM_VIEW_SORTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_FM_VIEW_SORTRow(LFS_FM_VIEW_SORTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FmViewTDS ds = new FmViewTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_FM_VIEW_SORTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FmViewConditionTempDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnConditionID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnOperator;
            
            private global::System.Data.DataColumn columnSign;
            
            private global::System.Data.DataColumn columnConditionNumber;
            
            private global::System.Data.DataColumn columnValue_;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FmViewConditionTempDataTable() {
                this.TableName = "FmViewConditionTemp";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FmViewConditionTempDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FmViewConditionTempDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConditionIDColumn {
                get {
                    return this.columnConditionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OperatorColumn {
                get {
                    return this.columnOperator;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SignColumn {
                get {
                    return this.columnSign;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConditionNumberColumn {
                get {
                    return this.columnConditionNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value_Column {
                get {
                    return this.columnValue_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FmViewConditionTempRow this[int index] {
                get {
                    return ((FmViewConditionTempRow)(this.Rows[index]));
                }
            }
            
            public event FmViewConditionTempRowChangeEventHandler FmViewConditionTempRowChanging;
            
            public event FmViewConditionTempRowChangeEventHandler FmViewConditionTempRowChanged;
            
            public event FmViewConditionTempRowChangeEventHandler FmViewConditionTempRowDeleting;
            
            public event FmViewConditionTempRowChangeEventHandler FmViewConditionTempRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFmViewConditionTempRow(FmViewConditionTempRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FmViewConditionTempRow AddFmViewConditionTempRow(int ID, int ConditionID, string Name, int RefID, string Operator, string Sign, int ConditionNumber, string Value_, bool InDatabase, bool Deleted) {
                FmViewConditionTempRow rowFmViewConditionTempRow = ((FmViewConditionTempRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        ConditionID,
                        Name,
                        RefID,
                        Operator,
                        Sign,
                        ConditionNumber,
                        Value_,
                        InDatabase,
                        Deleted};
                rowFmViewConditionTempRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFmViewConditionTempRow);
                return rowFmViewConditionTempRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FmViewConditionTempRow FindByID(int ID) {
                return ((FmViewConditionTempRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FmViewConditionTempDataTable cln = ((FmViewConditionTempDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FmViewConditionTempDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnConditionID = base.Columns["ConditionID"];
                this.columnName = base.Columns["Name"];
                this.columnRefID = base.Columns["RefID"];
                this.columnOperator = base.Columns["Operator"];
                this.columnSign = base.Columns["Sign"];
                this.columnConditionNumber = base.Columns["ConditionNumber"];
                this.columnValue_ = base.Columns["Value_"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnDeleted = base.Columns["Deleted"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnConditionID = new global::System.Data.DataColumn("ConditionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConditionID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnOperator = new global::System.Data.DataColumn("Operator", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperator);
                this.columnSign = new global::System.Data.DataColumn("Sign", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign);
                this.columnConditionNumber = new global::System.Data.DataColumn("ConditionNumber", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConditionNumber);
                this.columnValue_ = new global::System.Data.DataColumn("Value_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue_);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnConditionID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FmViewConditionTempRow NewFmViewConditionTempRow() {
                return ((FmViewConditionTempRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FmViewConditionTempRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FmViewConditionTempRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FmViewConditionTempRowChanged != null)) {
                    this.FmViewConditionTempRowChanged(this, new FmViewConditionTempRowChangeEvent(((FmViewConditionTempRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FmViewConditionTempRowChanging != null)) {
                    this.FmViewConditionTempRowChanging(this, new FmViewConditionTempRowChangeEvent(((FmViewConditionTempRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FmViewConditionTempRowDeleted != null)) {
                    this.FmViewConditionTempRowDeleted(this, new FmViewConditionTempRowChangeEvent(((FmViewConditionTempRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FmViewConditionTempRowDeleting != null)) {
                    this.FmViewConditionTempRowDeleting(this, new FmViewConditionTempRowChangeEvent(((FmViewConditionTempRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFmViewConditionTempRow(FmViewConditionTempRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FmViewTDS ds = new FmViewTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FmViewConditionTempDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FmViewDisplayTempDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnViewID;
            
            private global::System.Data.DataColumn columnFmType;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnDisplayID;
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FmViewDisplayTempDataTable() {
                this.TableName = "FmViewDisplayTemp";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FmViewDisplayTempDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FmViewDisplayTempDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ViewIDColumn {
                get {
                    return this.columnViewID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FmTypeColumn {
                get {
                    return this.columnFmType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DisplayIDColumn {
                get {
                    return this.columnDisplayID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FmViewDisplayTempRow this[int index] {
                get {
                    return ((FmViewDisplayTempRow)(this.Rows[index]));
                }
            }
            
            public event FmViewDisplayTempRowChangeEventHandler FmViewDisplayTempRowChanging;
            
            public event FmViewDisplayTempRowChangeEventHandler FmViewDisplayTempRowChanged;
            
            public event FmViewDisplayTempRowChangeEventHandler FmViewDisplayTempRowDeleting;
            
            public event FmViewDisplayTempRowChangeEventHandler FmViewDisplayTempRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFmViewDisplayTempRow(FmViewDisplayTempRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FmViewDisplayTempRow AddFmViewDisplayTempRow(int ViewID, string FmType, int COMPANY_ID, int DisplayID, bool Selected, bool InDatabase, bool Deleted) {
                FmViewDisplayTempRow rowFmViewDisplayTempRow = ((FmViewDisplayTempRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ViewID,
                        FmType,
                        COMPANY_ID,
                        DisplayID,
                        Selected,
                        InDatabase,
                        Deleted};
                rowFmViewDisplayTempRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFmViewDisplayTempRow);
                return rowFmViewDisplayTempRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FmViewDisplayTempRow FindByViewIDFmTypeCOMPANY_IDDisplayID(int ViewID, string FmType, int COMPANY_ID, int DisplayID) {
                return ((FmViewDisplayTempRow)(this.Rows.Find(new object[] {
                            ViewID,
                            FmType,
                            COMPANY_ID,
                            DisplayID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FmViewDisplayTempDataTable cln = ((FmViewDisplayTempDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FmViewDisplayTempDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnViewID = base.Columns["ViewID"];
                this.columnFmType = base.Columns["FmType"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnDisplayID = base.Columns["DisplayID"];
                this.columnSelected = base.Columns["Selected"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnDeleted = base.Columns["Deleted"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnViewID = new global::System.Data.DataColumn("ViewID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnViewID);
                this.columnFmType = new global::System.Data.DataColumn("FmType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFmType);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnDisplayID = new global::System.Data.DataColumn("DisplayID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDisplayID);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnViewID,
                                this.columnFmType,
                                this.columnCOMPANY_ID,
                                this.columnDisplayID}, true));
                this.columnViewID.AllowDBNull = false;
                this.columnFmType.AllowDBNull = false;
                this.columnFmType.Caption = "WorkType";
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnDisplayID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FmViewDisplayTempRow NewFmViewDisplayTempRow() {
                return ((FmViewDisplayTempRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FmViewDisplayTempRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FmViewDisplayTempRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FmViewDisplayTempRowChanged != null)) {
                    this.FmViewDisplayTempRowChanged(this, new FmViewDisplayTempRowChangeEvent(((FmViewDisplayTempRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FmViewDisplayTempRowChanging != null)) {
                    this.FmViewDisplayTempRowChanging(this, new FmViewDisplayTempRowChangeEvent(((FmViewDisplayTempRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FmViewDisplayTempRowDeleted != null)) {
                    this.FmViewDisplayTempRowDeleted(this, new FmViewDisplayTempRowChangeEvent(((FmViewDisplayTempRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FmViewDisplayTempRowDeleting != null)) {
                    this.FmViewDisplayTempRowDeleting(this, new FmViewDisplayTempRowChangeEvent(((FmViewDisplayTempRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFmViewDisplayTempRow(FmViewDisplayTempRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FmViewTDS ds = new FmViewTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FmViewDisplayTempDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FmViewSortTempDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnViewID;
            
            private global::System.Data.DataColumn columnFmType;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnSortID;
            
            private global::System.Data.DataColumn columnOrder_;
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FmViewSortTempDataTable() {
                this.TableName = "FmViewSortTemp";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FmViewSortTempDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FmViewSortTempDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ViewIDColumn {
                get {
                    return this.columnViewID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FmTypeColumn {
                get {
                    return this.columnFmType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SortIDColumn {
                get {
                    return this.columnSortID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Order_Column {
                get {
                    return this.columnOrder_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FmViewSortTempRow this[int index] {
                get {
                    return ((FmViewSortTempRow)(this.Rows[index]));
                }
            }
            
            public event FmViewSortTempRowChangeEventHandler FmViewSortTempRowChanging;
            
            public event FmViewSortTempRowChangeEventHandler FmViewSortTempRowChanged;
            
            public event FmViewSortTempRowChangeEventHandler FmViewSortTempRowDeleting;
            
            public event FmViewSortTempRowChangeEventHandler FmViewSortTempRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFmViewSortTempRow(FmViewSortTempRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FmViewSortTempRow AddFmViewSortTempRow(int ViewID, string FmType, int COMPANY_ID, int SortID, int Order_, bool Selected, bool InDatabase, bool Deleted) {
                FmViewSortTempRow rowFmViewSortTempRow = ((FmViewSortTempRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ViewID,
                        FmType,
                        COMPANY_ID,
                        SortID,
                        Order_,
                        Selected,
                        InDatabase,
                        Deleted};
                rowFmViewSortTempRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFmViewSortTempRow);
                return rowFmViewSortTempRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FmViewSortTempRow FindByViewIDFmTypeCOMPANY_IDSortID(int ViewID, string FmType, int COMPANY_ID, int SortID) {
                return ((FmViewSortTempRow)(this.Rows.Find(new object[] {
                            ViewID,
                            FmType,
                            COMPANY_ID,
                            SortID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FmViewSortTempDataTable cln = ((FmViewSortTempDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FmViewSortTempDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnViewID = base.Columns["ViewID"];
                this.columnFmType = base.Columns["FmType"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnSortID = base.Columns["SortID"];
                this.columnOrder_ = base.Columns["Order_"];
                this.columnSelected = base.Columns["Selected"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnDeleted = base.Columns["Deleted"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnViewID = new global::System.Data.DataColumn("ViewID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnViewID);
                this.columnFmType = new global::System.Data.DataColumn("FmType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFmType);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnSortID = new global::System.Data.DataColumn("SortID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSortID);
                this.columnOrder_ = new global::System.Data.DataColumn("Order_", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrder_);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnViewID,
                                this.columnFmType,
                                this.columnCOMPANY_ID,
                                this.columnSortID}, true));
                this.columnViewID.AllowDBNull = false;
                this.columnFmType.AllowDBNull = false;
                this.columnFmType.Caption = "WorkType";
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnSortID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FmViewSortTempRow NewFmViewSortTempRow() {
                return ((FmViewSortTempRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FmViewSortTempRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FmViewSortTempRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FmViewSortTempRowChanged != null)) {
                    this.FmViewSortTempRowChanged(this, new FmViewSortTempRowChangeEvent(((FmViewSortTempRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FmViewSortTempRowChanging != null)) {
                    this.FmViewSortTempRowChanging(this, new FmViewSortTempRowChangeEvent(((FmViewSortTempRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FmViewSortTempRowDeleted != null)) {
                    this.FmViewSortTempRowDeleted(this, new FmViewSortTempRowChangeEvent(((FmViewSortTempRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FmViewSortTempRowDeleting != null)) {
                    this.FmViewSortTempRowDeleting(this, new FmViewSortTempRowChangeEvent(((FmViewSortTempRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFmViewSortTempRow(FmViewSortTempRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FmViewTDS ds = new FmViewTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FmViewSortTempDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FmViewConditionNewDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnConditionID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnOperator;
            
            private global::System.Data.DataColumn columnSign;
            
            private global::System.Data.DataColumn columnConditionNumber;
            
            private global::System.Data.DataColumn columnValue_;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FmViewConditionNewDataTable() {
                this.TableName = "FmViewConditionNew";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FmViewConditionNewDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FmViewConditionNewDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConditionIDColumn {
                get {
                    return this.columnConditionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OperatorColumn {
                get {
                    return this.columnOperator;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SignColumn {
                get {
                    return this.columnSign;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConditionNumberColumn {
                get {
                    return this.columnConditionNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value_Column {
                get {
                    return this.columnValue_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FmViewConditionNewRow this[int index] {
                get {
                    return ((FmViewConditionNewRow)(this.Rows[index]));
                }
            }
            
            public event FmViewConditionNewRowChangeEventHandler FmViewConditionNewRowChanging;
            
            public event FmViewConditionNewRowChangeEventHandler FmViewConditionNewRowChanged;
            
            public event FmViewConditionNewRowChangeEventHandler FmViewConditionNewRowDeleting;
            
            public event FmViewConditionNewRowChangeEventHandler FmViewConditionNewRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFmViewConditionNewRow(FmViewConditionNewRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FmViewConditionNewRow AddFmViewConditionNewRow(int ID, int ConditionID, string Name, int RefID, string Operator, string Sign, int ConditionNumber, string Value_, bool InDatabase, bool Deleted) {
                FmViewConditionNewRow rowFmViewConditionNewRow = ((FmViewConditionNewRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        ConditionID,
                        Name,
                        RefID,
                        Operator,
                        Sign,
                        ConditionNumber,
                        Value_,
                        InDatabase,
                        Deleted};
                rowFmViewConditionNewRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFmViewConditionNewRow);
                return rowFmViewConditionNewRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FmViewConditionNewRow FindByID(int ID) {
                return ((FmViewConditionNewRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FmViewConditionNewDataTable cln = ((FmViewConditionNewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FmViewConditionNewDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnConditionID = base.Columns["ConditionID"];
                this.columnName = base.Columns["Name"];
                this.columnRefID = base.Columns["RefID"];
                this.columnOperator = base.Columns["Operator"];
                this.columnSign = base.Columns["Sign"];
                this.columnConditionNumber = base.Columns["ConditionNumber"];
                this.columnValue_ = base.Columns["Value_"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnDeleted = base.Columns["Deleted"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnConditionID = new global::System.Data.DataColumn("ConditionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConditionID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnOperator = new global::System.Data.DataColumn("Operator", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperator);
                this.columnSign = new global::System.Data.DataColumn("Sign", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSign);
                this.columnConditionNumber = new global::System.Data.DataColumn("ConditionNumber", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConditionNumber);
                this.columnValue_ = new global::System.Data.DataColumn("Value_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue_);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnConditionID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FmViewConditionNewRow NewFmViewConditionNewRow() {
                return ((FmViewConditionNewRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FmViewConditionNewRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FmViewConditionNewRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FmViewConditionNewRowChanged != null)) {
                    this.FmViewConditionNewRowChanged(this, new FmViewConditionNewRowChangeEvent(((FmViewConditionNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FmViewConditionNewRowChanging != null)) {
                    this.FmViewConditionNewRowChanging(this, new FmViewConditionNewRowChangeEvent(((FmViewConditionNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FmViewConditionNewRowDeleted != null)) {
                    this.FmViewConditionNewRowDeleted(this, new FmViewConditionNewRowChangeEvent(((FmViewConditionNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FmViewConditionNewRowDeleting != null)) {
                    this.FmViewConditionNewRowDeleting(this, new FmViewConditionNewRowChangeEvent(((FmViewConditionNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFmViewConditionNewRow(FmViewConditionNewRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FmViewTDS ds = new FmViewTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FmViewConditionNewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_FM_TYPE_VIEW_DISPLAYRow : global::System.Data.DataRow {
            
            private LFS_FM_TYPE_VIEW_DISPLAYDataTable tableLFS_FM_TYPE_VIEW_DISPLAY;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_TYPE_VIEW_DISPLAYRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_FM_TYPE_VIEW_DISPLAY = ((LFS_FM_TYPE_VIEW_DISPLAYDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FmType {
                get {
                    return ((string)(this[this.tableLFS_FM_TYPE_VIEW_DISPLAY.FmTypeColumn]));
                }
                set {
                    this[this.tableLFS_FM_TYPE_VIEW_DISPLAY.FmTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_FM_TYPE_VIEW_DISPLAY.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_FM_TYPE_VIEW_DISPLAY.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DisplayID {
                get {
                    return ((int)(this[this.tableLFS_FM_TYPE_VIEW_DISPLAY.DisplayIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_TYPE_VIEW_DISPLAY.DisplayIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableLFS_FM_TYPE_VIEW_DISPLAY.NameColumn]));
                }
                set {
                    this[this.tableLFS_FM_TYPE_VIEW_DISPLAY.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Always {
                get {
                    return ((bool)(this[this.tableLFS_FM_TYPE_VIEW_DISPLAY.AlwaysColumn]));
                }
                set {
                    this[this.tableLFS_FM_TYPE_VIEW_DISPLAY.AlwaysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Column_ {
                get {
                    return ((string)(this[this.tableLFS_FM_TYPE_VIEW_DISPLAY.Column_Column]));
                }
                set {
                    this[this.tableLFS_FM_TYPE_VIEW_DISPLAY.Column_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Table_ {
                get {
                    return ((string)(this[this.tableLFS_FM_TYPE_VIEW_DISPLAY.Table_Column]));
                }
                set {
                    this[this.tableLFS_FM_TYPE_VIEW_DISPLAY.Table_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableLFS_FM_TYPE_VIEW_DISPLAY.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'LFS_FM_TYPE_VIEW_DISPLAY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_TYPE_VIEW_DISPLAY.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableLFS_FM_TYPE_VIEW_DISPLAY.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableLFS_FM_TYPE_VIEW_DISPLAY.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEW_DISPLAYRow[] GetLFS_FM_VIEW_DISPLAYRows() {
                if ((this.Table.ChildRelations["FK_LFS_FM_VIEW_DISPLAY_LFS_FM_TYPE_VIEW_DISPLAY"] == null)) {
                    return new LFS_FM_VIEW_DISPLAYRow[0];
                }
                else {
                    return ((LFS_FM_VIEW_DISPLAYRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LFS_FM_VIEW_DISPLAY_LFS_FM_TYPE_VIEW_DISPLAY"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_FM_TYPE_VIEW_SORTRow : global::System.Data.DataRow {
            
            private LFS_FM_TYPE_VIEW_SORTDataTable tableLFS_FM_TYPE_VIEW_SORT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_TYPE_VIEW_SORTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_FM_TYPE_VIEW_SORT = ((LFS_FM_TYPE_VIEW_SORTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FmType {
                get {
                    return ((string)(this[this.tableLFS_FM_TYPE_VIEW_SORT.FmTypeColumn]));
                }
                set {
                    this[this.tableLFS_FM_TYPE_VIEW_SORT.FmTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_FM_TYPE_VIEW_SORT.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_FM_TYPE_VIEW_SORT.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SortID {
                get {
                    return ((int)(this[this.tableLFS_FM_TYPE_VIEW_SORT.SortIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_TYPE_VIEW_SORT.SortIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableLFS_FM_TYPE_VIEW_SORT.NameColumn]));
                }
                set {
                    this[this.tableLFS_FM_TYPE_VIEW_SORT.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InFor {
                get {
                    return ((bool)(this[this.tableLFS_FM_TYPE_VIEW_SORT.InForColumn]));
                }
                set {
                    this[this.tableLFS_FM_TYPE_VIEW_SORT.InForColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InView {
                get {
                    return ((bool)(this[this.tableLFS_FM_TYPE_VIEW_SORT.InViewColumn]));
                }
                set {
                    this[this.tableLFS_FM_TYPE_VIEW_SORT.InViewColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Column_ {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_TYPE_VIEW_SORT.Column_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Column_\' in table \'LFS_FM_TYPE_VIEW_SORT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_TYPE_VIEW_SORT.Column_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Table_ {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_TYPE_VIEW_SORT.Table_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Table_\' in table \'LFS_FM_TYPE_VIEW_SORT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_TYPE_VIEW_SORT.Table_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableLFS_FM_TYPE_VIEW_SORT.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'LFS_FM_TYPE_VIEW_SORT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_TYPE_VIEW_SORT.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Order_ {
                get {
                    try {
                        return ((int)(this[this.tableLFS_FM_TYPE_VIEW_SORT.Order_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Order_\' in table \'LFS_FM_TYPE_VIEW_SORT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_TYPE_VIEW_SORT.Order_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColumn_Null() {
                return this.IsNull(this.tableLFS_FM_TYPE_VIEW_SORT.Column_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColumn_Null() {
                this[this.tableLFS_FM_TYPE_VIEW_SORT.Column_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTable_Null() {
                return this.IsNull(this.tableLFS_FM_TYPE_VIEW_SORT.Table_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTable_Null() {
                this[this.tableLFS_FM_TYPE_VIEW_SORT.Table_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableLFS_FM_TYPE_VIEW_SORT.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableLFS_FM_TYPE_VIEW_SORT.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrder_Null() {
                return this.IsNull(this.tableLFS_FM_TYPE_VIEW_SORT.Order_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrder_Null() {
                this[this.tableLFS_FM_TYPE_VIEW_SORT.Order_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEW_SORTRow[] GetLFS_FM_VIEW_SORTRows() {
                if ((this.Table.ChildRelations["FK_LFS_FM_VIEW_SORT_LFS_FM_TYPE_VIEW_SORT"] == null)) {
                    return new LFS_FM_VIEW_SORTRow[0];
                }
                else {
                    return ((LFS_FM_VIEW_SORTRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LFS_FM_VIEW_SORT_LFS_FM_TYPE_VIEW_SORT"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_FM_TYPE_VIEW_CONDITIONRow : global::System.Data.DataRow {
            
            private LFS_FM_TYPE_VIEW_CONDITIONDataTable tableLFS_FM_TYPE_VIEW_CONDITION;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_TYPE_VIEW_CONDITIONRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_FM_TYPE_VIEW_CONDITION = ((LFS_FM_TYPE_VIEW_CONDITIONDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FmType {
                get {
                    return ((string)(this[this.tableLFS_FM_TYPE_VIEW_CONDITION.FmTypeColumn]));
                }
                set {
                    this[this.tableLFS_FM_TYPE_VIEW_CONDITION.FmTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_FM_TYPE_VIEW_CONDITION.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_FM_TYPE_VIEW_CONDITION.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConditionID {
                get {
                    return ((int)(this[this.tableLFS_FM_TYPE_VIEW_CONDITION.ConditionIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_TYPE_VIEW_CONDITION.ConditionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableLFS_FM_TYPE_VIEW_CONDITION.NameColumn]));
                }
                set {
                    this[this.tableLFS_FM_TYPE_VIEW_CONDITION.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    return ((string)(this[this.tableLFS_FM_TYPE_VIEW_CONDITION.TypeColumn]));
                }
                set {
                    this[this.tableLFS_FM_TYPE_VIEW_CONDITION.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InFor {
                get {
                    return ((bool)(this[this.tableLFS_FM_TYPE_VIEW_CONDITION.InForColumn]));
                }
                set {
                    this[this.tableLFS_FM_TYPE_VIEW_CONDITION.InForColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InView {
                get {
                    return ((bool)(this[this.tableLFS_FM_TYPE_VIEW_CONDITION.InViewColumn]));
                }
                set {
                    this[this.tableLFS_FM_TYPE_VIEW_CONDITION.InViewColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Column_ {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_TYPE_VIEW_CONDITION.Column_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Column_\' in table \'LFS_FM_TYPE_VIEW_CONDITION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_TYPE_VIEW_CONDITION.Column_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Table_ {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_TYPE_VIEW_CONDITION.Table_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Table_\' in table \'LFS_FM_TYPE_VIEW_CONDITION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_TYPE_VIEW_CONDITION.Table_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColumn_Null() {
                return this.IsNull(this.tableLFS_FM_TYPE_VIEW_CONDITION.Column_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColumn_Null() {
                this[this.tableLFS_FM_TYPE_VIEW_CONDITION.Column_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTable_Null() {
                return this.IsNull(this.tableLFS_FM_TYPE_VIEW_CONDITION.Table_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTable_Null() {
                this[this.tableLFS_FM_TYPE_VIEW_CONDITION.Table_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEW_CONDITIONRow[] GetLFS_FM_VIEW_CONDITIONRows() {
                if ((this.Table.ChildRelations["FK_LFS_FM_VIEW_CONDITION_LFS_FM_TYPE_VIEW_CONDITION"] == null)) {
                    return new LFS_FM_VIEW_CONDITIONRow[0];
                }
                else {
                    return ((LFS_FM_VIEW_CONDITIONRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LFS_FM_VIEW_CONDITION_LFS_FM_TYPE_VIEW_CONDITION"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_FM_VIEWRow : global::System.Data.DataRow {
            
            private LFS_FM_VIEWDataTable tableLFS_FM_VIEW;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_VIEWRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_FM_VIEW = ((LFS_FM_VIEWDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ViewID {
                get {
                    return ((int)(this[this.tableLFS_FM_VIEW.ViewIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_VIEW.ViewIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LoginID {
                get {
                    return ((int)(this[this.tableLFS_FM_VIEW.LoginIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_VIEW.LoginIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableLFS_FM_VIEW.NameColumn]));
                }
                set {
                    this[this.tableLFS_FM_VIEW.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    return ((string)(this[this.tableLFS_FM_VIEW.TypeColumn]));
                }
                set {
                    this[this.tableLFS_FM_VIEW.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Logic {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_VIEW.LogicColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Logic\' in table \'LFS_FM_VIEW\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_VIEW.LogicColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SqlCommand {
                get {
                    return ((string)(this[this.tableLFS_FM_VIEW.SqlCommandColumn]));
                }
                set {
                    this[this.tableLFS_FM_VIEW.SqlCommandColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FmType {
                get {
                    return ((string)(this[this.tableLFS_FM_VIEW.FmTypeColumn]));
                }
                set {
                    this[this.tableLFS_FM_VIEW.FmTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_FM_VIEW.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_FM_VIEW.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_FM_VIEW.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_FM_VIEW.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogicNull() {
                return this.IsNull(this.tableLFS_FM_VIEW.LogicColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogicNull() {
                this[this.tableLFS_FM_VIEW.LogicColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEW_CONDITIONRow[] GetLFS_FM_VIEW_CONDITIONRows() {
                if ((this.Table.ChildRelations["FK_LFS_FM_VIEW_LFS_FM_VIEW_CONDITION"] == null)) {
                    return new LFS_FM_VIEW_CONDITIONRow[0];
                }
                else {
                    return ((LFS_FM_VIEW_CONDITIONRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LFS_FM_VIEW_LFS_FM_VIEW_CONDITION"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEW_DISPLAYRow[] GetLFS_FM_VIEW_DISPLAYRows() {
                if ((this.Table.ChildRelations["FK_LFS_FM_VIEW_DISPLAY_LFS_FM_VIEW"] == null)) {
                    return new LFS_FM_VIEW_DISPLAYRow[0];
                }
                else {
                    return ((LFS_FM_VIEW_DISPLAYRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LFS_FM_VIEW_DISPLAY_LFS_FM_VIEW"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEW_SORTRow[] GetLFS_FM_VIEW_SORTRows() {
                if ((this.Table.ChildRelations["FK_LFS_FM_VIEW_SORT_LFS_FM_VIEW"] == null)) {
                    return new LFS_FM_VIEW_SORTRow[0];
                }
                else {
                    return ((LFS_FM_VIEW_SORTRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LFS_FM_VIEW_SORT_LFS_FM_VIEW"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_FM_VIEW_CONDITIONRow : global::System.Data.DataRow {
            
            private LFS_FM_VIEW_CONDITIONDataTable tableLFS_FM_VIEW_CONDITION;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_VIEW_CONDITIONRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_FM_VIEW_CONDITION = ((LFS_FM_VIEW_CONDITIONDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ViewID {
                get {
                    return ((int)(this[this.tableLFS_FM_VIEW_CONDITION.ViewIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_VIEW_CONDITION.ViewIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_FM_VIEW_CONDITION.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_FM_VIEW_CONDITION.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FmType {
                get {
                    return ((string)(this[this.tableLFS_FM_VIEW_CONDITION.FmTypeColumn]));
                }
                set {
                    this[this.tableLFS_FM_VIEW_CONDITION.FmTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConditionID {
                get {
                    return ((int)(this[this.tableLFS_FM_VIEW_CONDITION.ConditionIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_VIEW_CONDITION.ConditionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableLFS_FM_VIEW_CONDITION.RefIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_VIEW_CONDITION.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Operator {
                get {
                    return ((string)(this[this.tableLFS_FM_VIEW_CONDITION.OperatorColumn]));
                }
                set {
                    this[this.tableLFS_FM_VIEW_CONDITION.OperatorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConditionNumber {
                get {
                    return ((int)(this[this.tableLFS_FM_VIEW_CONDITION.ConditionNumberColumn]));
                }
                set {
                    this[this.tableLFS_FM_VIEW_CONDITION.ConditionNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value_ {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_VIEW_CONDITION.Value_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value_\' in table \'LFS_FM_VIEW_CONDITION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_VIEW_CONDITION.Value_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_FM_VIEW_CONDITION.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_FM_VIEW_CONDITION.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_TYPE_VIEW_CONDITIONRow LFS_FM_TYPE_VIEW_CONDITIONRowParent {
                get {
                    return ((LFS_FM_TYPE_VIEW_CONDITIONRow)(this.GetParentRow(this.Table.ParentRelations["FK_LFS_FM_VIEW_CONDITION_LFS_FM_TYPE_VIEW_CONDITION"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LFS_FM_VIEW_CONDITION_LFS_FM_TYPE_VIEW_CONDITION"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEWRow LFS_FM_VIEWRow {
                get {
                    return ((LFS_FM_VIEWRow)(this.GetParentRow(this.Table.ParentRelations["FK_LFS_FM_VIEW_LFS_FM_VIEW_CONDITION"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LFS_FM_VIEW_LFS_FM_VIEW_CONDITION"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue_Null() {
                return this.IsNull(this.tableLFS_FM_VIEW_CONDITION.Value_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue_Null() {
                this[this.tableLFS_FM_VIEW_CONDITION.Value_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_FM_VIEW_DISPLAYRow : global::System.Data.DataRow {
            
            private LFS_FM_VIEW_DISPLAYDataTable tableLFS_FM_VIEW_DISPLAY;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_VIEW_DISPLAYRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_FM_VIEW_DISPLAY = ((LFS_FM_VIEW_DISPLAYDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ViewID {
                get {
                    return ((int)(this[this.tableLFS_FM_VIEW_DISPLAY.ViewIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_VIEW_DISPLAY.ViewIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FmType {
                get {
                    return ((string)(this[this.tableLFS_FM_VIEW_DISPLAY.FmTypeColumn]));
                }
                set {
                    this[this.tableLFS_FM_VIEW_DISPLAY.FmTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_FM_VIEW_DISPLAY.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_FM_VIEW_DISPLAY.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DisplayID {
                get {
                    return ((int)(this[this.tableLFS_FM_VIEW_DISPLAY.DisplayIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_VIEW_DISPLAY.DisplayIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_FM_VIEW_DISPLAY.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_FM_VIEW_DISPLAY.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_TYPE_VIEW_DISPLAYRow LFS_FM_TYPE_VIEW_DISPLAYRowParent {
                get {
                    return ((LFS_FM_TYPE_VIEW_DISPLAYRow)(this.GetParentRow(this.Table.ParentRelations["FK_LFS_FM_VIEW_DISPLAY_LFS_FM_TYPE_VIEW_DISPLAY"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LFS_FM_VIEW_DISPLAY_LFS_FM_TYPE_VIEW_DISPLAY"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEWRow LFS_FM_VIEWRow {
                get {
                    return ((LFS_FM_VIEWRow)(this.GetParentRow(this.Table.ParentRelations["FK_LFS_FM_VIEW_DISPLAY_LFS_FM_VIEW"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LFS_FM_VIEW_DISPLAY_LFS_FM_VIEW"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_FM_VIEW_SORTRow : global::System.Data.DataRow {
            
            private LFS_FM_VIEW_SORTDataTable tableLFS_FM_VIEW_SORT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_VIEW_SORTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_FM_VIEW_SORT = ((LFS_FM_VIEW_SORTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ViewID {
                get {
                    return ((int)(this[this.tableLFS_FM_VIEW_SORT.ViewIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_VIEW_SORT.ViewIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FmType {
                get {
                    return ((string)(this[this.tableLFS_FM_VIEW_SORT.FmTypeColumn]));
                }
                set {
                    this[this.tableLFS_FM_VIEW_SORT.FmTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_FM_VIEW_SORT.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_FM_VIEW_SORT.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SortID {
                get {
                    return ((int)(this[this.tableLFS_FM_VIEW_SORT.SortIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_VIEW_SORT.SortIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Order_ {
                get {
                    return ((int)(this[this.tableLFS_FM_VIEW_SORT.Order_Column]));
                }
                set {
                    this[this.tableLFS_FM_VIEW_SORT.Order_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_FM_VIEW_SORT.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_FM_VIEW_SORT.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_TYPE_VIEW_SORTRow LFS_FM_TYPE_VIEW_SORTRowParent {
                get {
                    return ((LFS_FM_TYPE_VIEW_SORTRow)(this.GetParentRow(this.Table.ParentRelations["FK_LFS_FM_VIEW_SORT_LFS_FM_TYPE_VIEW_SORT"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LFS_FM_VIEW_SORT_LFS_FM_TYPE_VIEW_SORT"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEWRow LFS_FM_VIEWRow {
                get {
                    return ((LFS_FM_VIEWRow)(this.GetParentRow(this.Table.ParentRelations["FK_LFS_FM_VIEW_SORT_LFS_FM_VIEW"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LFS_FM_VIEW_SORT_LFS_FM_VIEW"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FmViewConditionTempRow : global::System.Data.DataRow {
            
            private FmViewConditionTempDataTable tableFmViewConditionTemp;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FmViewConditionTempRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFmViewConditionTemp = ((FmViewConditionTempDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableFmViewConditionTemp.IDColumn]));
                }
                set {
                    this[this.tableFmViewConditionTemp.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConditionID {
                get {
                    return ((int)(this[this.tableFmViewConditionTemp.ConditionIDColumn]));
                }
                set {
                    this[this.tableFmViewConditionTemp.ConditionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableFmViewConditionTemp.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'FmViewConditionTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFmViewConditionTemp.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableFmViewConditionTemp.RefIDColumn]));
                }
                set {
                    this[this.tableFmViewConditionTemp.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Operator {
                get {
                    try {
                        return ((string)(this[this.tableFmViewConditionTemp.OperatorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Operator\' in table \'FmViewConditionTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFmViewConditionTemp.OperatorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sign {
                get {
                    try {
                        return ((string)(this[this.tableFmViewConditionTemp.SignColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign\' in table \'FmViewConditionTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFmViewConditionTemp.SignColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConditionNumber {
                get {
                    try {
                        return ((int)(this[this.tableFmViewConditionTemp.ConditionNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConditionNumber\' in table \'FmViewConditionTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFmViewConditionTemp.ConditionNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value_ {
                get {
                    try {
                        return ((string)(this[this.tableFmViewConditionTemp.Value_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value_\' in table \'FmViewConditionTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFmViewConditionTemp.Value_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableFmViewConditionTemp.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'FmViewConditionTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFmViewConditionTemp.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    try {
                        return ((bool)(this[this.tableFmViewConditionTemp.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'FmViewConditionTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFmViewConditionTemp.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableFmViewConditionTemp.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableFmViewConditionTemp.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOperatorNull() {
                return this.IsNull(this.tableFmViewConditionTemp.OperatorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOperatorNull() {
                this[this.tableFmViewConditionTemp.OperatorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSignNull() {
                return this.IsNull(this.tableFmViewConditionTemp.SignColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSignNull() {
                this[this.tableFmViewConditionTemp.SignColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConditionNumberNull() {
                return this.IsNull(this.tableFmViewConditionTemp.ConditionNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConditionNumberNull() {
                this[this.tableFmViewConditionTemp.ConditionNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue_Null() {
                return this.IsNull(this.tableFmViewConditionTemp.Value_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue_Null() {
                this[this.tableFmViewConditionTemp.Value_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableFmViewConditionTemp.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableFmViewConditionTemp.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull() {
                return this.IsNull(this.tableFmViewConditionTemp.DeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull() {
                this[this.tableFmViewConditionTemp.DeletedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FmViewDisplayTempRow : global::System.Data.DataRow {
            
            private FmViewDisplayTempDataTable tableFmViewDisplayTemp;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FmViewDisplayTempRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFmViewDisplayTemp = ((FmViewDisplayTempDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ViewID {
                get {
                    return ((int)(this[this.tableFmViewDisplayTemp.ViewIDColumn]));
                }
                set {
                    this[this.tableFmViewDisplayTemp.ViewIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FmType {
                get {
                    return ((string)(this[this.tableFmViewDisplayTemp.FmTypeColumn]));
                }
                set {
                    this[this.tableFmViewDisplayTemp.FmTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableFmViewDisplayTemp.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableFmViewDisplayTemp.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DisplayID {
                get {
                    return ((int)(this[this.tableFmViewDisplayTemp.DisplayIDColumn]));
                }
                set {
                    this[this.tableFmViewDisplayTemp.DisplayIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableFmViewDisplayTemp.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'FmViewDisplayTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFmViewDisplayTemp.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableFmViewDisplayTemp.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'FmViewDisplayTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFmViewDisplayTemp.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    try {
                        return ((bool)(this[this.tableFmViewDisplayTemp.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'FmViewDisplayTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFmViewDisplayTemp.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableFmViewDisplayTemp.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableFmViewDisplayTemp.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableFmViewDisplayTemp.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableFmViewDisplayTemp.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull() {
                return this.IsNull(this.tableFmViewDisplayTemp.DeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull() {
                this[this.tableFmViewDisplayTemp.DeletedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FmViewSortTempRow : global::System.Data.DataRow {
            
            private FmViewSortTempDataTable tableFmViewSortTemp;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FmViewSortTempRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFmViewSortTemp = ((FmViewSortTempDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ViewID {
                get {
                    return ((int)(this[this.tableFmViewSortTemp.ViewIDColumn]));
                }
                set {
                    this[this.tableFmViewSortTemp.ViewIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FmType {
                get {
                    return ((string)(this[this.tableFmViewSortTemp.FmTypeColumn]));
                }
                set {
                    this[this.tableFmViewSortTemp.FmTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableFmViewSortTemp.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableFmViewSortTemp.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SortID {
                get {
                    return ((int)(this[this.tableFmViewSortTemp.SortIDColumn]));
                }
                set {
                    this[this.tableFmViewSortTemp.SortIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Order_ {
                get {
                    try {
                        return ((int)(this[this.tableFmViewSortTemp.Order_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Order_\' in table \'FmViewSortTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFmViewSortTemp.Order_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableFmViewSortTemp.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'FmViewSortTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFmViewSortTemp.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableFmViewSortTemp.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'FmViewSortTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFmViewSortTemp.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    try {
                        return ((bool)(this[this.tableFmViewSortTemp.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'FmViewSortTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFmViewSortTemp.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrder_Null() {
                return this.IsNull(this.tableFmViewSortTemp.Order_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrder_Null() {
                this[this.tableFmViewSortTemp.Order_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableFmViewSortTemp.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableFmViewSortTemp.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableFmViewSortTemp.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableFmViewSortTemp.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull() {
                return this.IsNull(this.tableFmViewSortTemp.DeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull() {
                this[this.tableFmViewSortTemp.DeletedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FmViewConditionNewRow : global::System.Data.DataRow {
            
            private FmViewConditionNewDataTable tableFmViewConditionNew;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FmViewConditionNewRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFmViewConditionNew = ((FmViewConditionNewDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableFmViewConditionNew.IDColumn]));
                }
                set {
                    this[this.tableFmViewConditionNew.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConditionID {
                get {
                    return ((int)(this[this.tableFmViewConditionNew.ConditionIDColumn]));
                }
                set {
                    this[this.tableFmViewConditionNew.ConditionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableFmViewConditionNew.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'FmViewConditionNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFmViewConditionNew.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableFmViewConditionNew.RefIDColumn]));
                }
                set {
                    this[this.tableFmViewConditionNew.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Operator {
                get {
                    try {
                        return ((string)(this[this.tableFmViewConditionNew.OperatorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Operator\' in table \'FmViewConditionNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFmViewConditionNew.OperatorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sign {
                get {
                    try {
                        return ((string)(this[this.tableFmViewConditionNew.SignColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sign\' in table \'FmViewConditionNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFmViewConditionNew.SignColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConditionNumber {
                get {
                    try {
                        return ((int)(this[this.tableFmViewConditionNew.ConditionNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConditionNumber\' in table \'FmViewConditionNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFmViewConditionNew.ConditionNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value_ {
                get {
                    try {
                        return ((string)(this[this.tableFmViewConditionNew.Value_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value_\' in table \'FmViewConditionNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFmViewConditionNew.Value_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableFmViewConditionNew.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'FmViewConditionNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFmViewConditionNew.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    try {
                        return ((bool)(this[this.tableFmViewConditionNew.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'FmViewConditionNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFmViewConditionNew.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableFmViewConditionNew.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableFmViewConditionNew.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOperatorNull() {
                return this.IsNull(this.tableFmViewConditionNew.OperatorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOperatorNull() {
                this[this.tableFmViewConditionNew.OperatorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSignNull() {
                return this.IsNull(this.tableFmViewConditionNew.SignColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSignNull() {
                this[this.tableFmViewConditionNew.SignColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConditionNumberNull() {
                return this.IsNull(this.tableFmViewConditionNew.ConditionNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConditionNumberNull() {
                this[this.tableFmViewConditionNew.ConditionNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue_Null() {
                return this.IsNull(this.tableFmViewConditionNew.Value_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue_Null() {
                this[this.tableFmViewConditionNew.Value_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableFmViewConditionNew.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableFmViewConditionNew.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull() {
                return this.IsNull(this.tableFmViewConditionNew.DeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull() {
                this[this.tableFmViewConditionNew.DeletedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_FM_TYPE_VIEW_DISPLAYRowChangeEvent : global::System.EventArgs {
            
            private LFS_FM_TYPE_VIEW_DISPLAYRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_TYPE_VIEW_DISPLAYRowChangeEvent(LFS_FM_TYPE_VIEW_DISPLAYRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_TYPE_VIEW_DISPLAYRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_FM_TYPE_VIEW_SORTRowChangeEvent : global::System.EventArgs {
            
            private LFS_FM_TYPE_VIEW_SORTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_TYPE_VIEW_SORTRowChangeEvent(LFS_FM_TYPE_VIEW_SORTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_TYPE_VIEW_SORTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_FM_TYPE_VIEW_CONDITIONRowChangeEvent : global::System.EventArgs {
            
            private LFS_FM_TYPE_VIEW_CONDITIONRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_TYPE_VIEW_CONDITIONRowChangeEvent(LFS_FM_TYPE_VIEW_CONDITIONRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_TYPE_VIEW_CONDITIONRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_FM_VIEWRowChangeEvent : global::System.EventArgs {
            
            private LFS_FM_VIEWRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEWRowChangeEvent(LFS_FM_VIEWRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEWRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_FM_VIEW_CONDITIONRowChangeEvent : global::System.EventArgs {
            
            private LFS_FM_VIEW_CONDITIONRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEW_CONDITIONRowChangeEvent(LFS_FM_VIEW_CONDITIONRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEW_CONDITIONRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_FM_VIEW_DISPLAYRowChangeEvent : global::System.EventArgs {
            
            private LFS_FM_VIEW_DISPLAYRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEW_DISPLAYRowChangeEvent(LFS_FM_VIEW_DISPLAYRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEW_DISPLAYRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_FM_VIEW_SORTRowChangeEvent : global::System.EventArgs {
            
            private LFS_FM_VIEW_SORTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEW_SORTRowChangeEvent(LFS_FM_VIEW_SORTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_VIEW_SORTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FmViewConditionTempRowChangeEvent : global::System.EventArgs {
            
            private FmViewConditionTempRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FmViewConditionTempRowChangeEvent(FmViewConditionTempRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FmViewConditionTempRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FmViewDisplayTempRowChangeEvent : global::System.EventArgs {
            
            private FmViewDisplayTempRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FmViewDisplayTempRowChangeEvent(FmViewDisplayTempRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FmViewDisplayTempRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FmViewSortTempRowChangeEvent : global::System.EventArgs {
            
            private FmViewSortTempRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FmViewSortTempRowChangeEvent(FmViewSortTempRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FmViewSortTempRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FmViewConditionNewRowChangeEvent : global::System.EventArgs {
            
            private FmViewConditionNewRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FmViewConditionNewRowChangeEvent(FmViewConditionNewRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FmViewConditionNewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591