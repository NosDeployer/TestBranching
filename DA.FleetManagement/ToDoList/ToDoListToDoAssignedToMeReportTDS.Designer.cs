//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3620
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.FleetManagement.ToDoList {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ToDoListToDoAssignedToMeReportTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ToDoListToDoAssignedToMeReportTDS : global::System.Data.DataSet {
        
        private ToDoListToDoAssignedToMeDataTable tableToDoListToDoAssignedToMe;
        
        private ToDoListActivityToDoAssignedToMeDataTable tableToDoListActivityToDoAssignedToMe;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ToDoListToDoAssignedToMeReportTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ToDoListToDoAssignedToMeReportTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ToDoListToDoAssignedToMe"] != null)) {
                    base.Tables.Add(new ToDoListToDoAssignedToMeDataTable(ds.Tables["ToDoListToDoAssignedToMe"]));
                }
                if ((ds.Tables["ToDoListActivityToDoAssignedToMe"] != null)) {
                    base.Tables.Add(new ToDoListActivityToDoAssignedToMeDataTable(ds.Tables["ToDoListActivityToDoAssignedToMe"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ToDoListToDoAssignedToMeDataTable ToDoListToDoAssignedToMe {
            get {
                return this.tableToDoListToDoAssignedToMe;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ToDoListActivityToDoAssignedToMeDataTable ToDoListActivityToDoAssignedToMe {
            get {
                return this.tableToDoListActivityToDoAssignedToMe;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ToDoListToDoAssignedToMeReportTDS cln = ((ToDoListToDoAssignedToMeReportTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ToDoListToDoAssignedToMe"] != null)) {
                    base.Tables.Add(new ToDoListToDoAssignedToMeDataTable(ds.Tables["ToDoListToDoAssignedToMe"]));
                }
                if ((ds.Tables["ToDoListActivityToDoAssignedToMe"] != null)) {
                    base.Tables.Add(new ToDoListActivityToDoAssignedToMeDataTable(ds.Tables["ToDoListActivityToDoAssignedToMe"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableToDoListToDoAssignedToMe = ((ToDoListToDoAssignedToMeDataTable)(base.Tables["ToDoListToDoAssignedToMe"]));
            if ((initTable == true)) {
                if ((this.tableToDoListToDoAssignedToMe != null)) {
                    this.tableToDoListToDoAssignedToMe.InitVars();
                }
            }
            this.tableToDoListActivityToDoAssignedToMe = ((ToDoListActivityToDoAssignedToMeDataTable)(base.Tables["ToDoListActivityToDoAssignedToMe"]));
            if ((initTable == true)) {
                if ((this.tableToDoListActivityToDoAssignedToMe != null)) {
                    this.tableToDoListActivityToDoAssignedToMe.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ToDoListToDoAssignedToMeReportTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ToDoListToDoAssignedToMeReportTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableToDoListToDoAssignedToMe = new ToDoListToDoAssignedToMeDataTable();
            base.Tables.Add(this.tableToDoListToDoAssignedToMe);
            this.tableToDoListActivityToDoAssignedToMe = new ToDoListActivityToDoAssignedToMeDataTable();
            base.Tables.Add(this.tableToDoListActivityToDoAssignedToMe);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeToDoListToDoAssignedToMe() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeToDoListActivityToDoAssignedToMe() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ToDoListToDoAssignedToMeReportTDS ds = new ToDoListToDoAssignedToMeReportTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ToDoListToDoAssignedToMeRowChangeEventHandler(object sender, ToDoListToDoAssignedToMeRowChangeEvent e);
        
        public delegate void ToDoListActivityToDoAssignedToMeRowChangeEventHandler(object sender, ToDoListActivityToDoAssignedToMeRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ToDoListToDoAssignedToMeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnToDoID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnCreationDate;
            
            private global::System.Data.DataColumn columnCreatedByID;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnDueDate;
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnCreatedByFullName;
            
            private global::System.Data.DataColumn columnUnitDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ToDoListToDoAssignedToMeDataTable() {
                this.TableName = "ToDoListToDoAssignedToMe";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ToDoListToDoAssignedToMeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ToDoListToDoAssignedToMeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToDoIDColumn {
                get {
                    return this.columnToDoID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreationDateColumn {
                get {
                    return this.columnCreationDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedByIDColumn {
                get {
                    return this.columnCreatedByID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DueDateColumn {
                get {
                    return this.columnDueDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedByFullNameColumn {
                get {
                    return this.columnCreatedByFullName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitDescriptionColumn {
                get {
                    return this.columnUnitDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ToDoListToDoAssignedToMeRow this[int index] {
                get {
                    return ((ToDoListToDoAssignedToMeRow)(this.Rows[index]));
                }
            }
            
            public event ToDoListToDoAssignedToMeRowChangeEventHandler ToDoListToDoAssignedToMeRowChanging;
            
            public event ToDoListToDoAssignedToMeRowChangeEventHandler ToDoListToDoAssignedToMeRowChanged;
            
            public event ToDoListToDoAssignedToMeRowChangeEventHandler ToDoListToDoAssignedToMeRowDeleting;
            
            public event ToDoListToDoAssignedToMeRowChangeEventHandler ToDoListToDoAssignedToMeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddToDoListToDoAssignedToMeRow(ToDoListToDoAssignedToMeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ToDoListToDoAssignedToMeRow AddToDoListToDoAssignedToMeRow(int RefID, string Subject, System.DateTime CreationDate, int CreatedByID, string State, System.DateTime DueDate, int UnitID, bool Deleted, int COMPANY_ID, string CreatedByFullName, string UnitDescription) {
                ToDoListToDoAssignedToMeRow rowToDoListToDoAssignedToMeRow = ((ToDoListToDoAssignedToMeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        RefID,
                        Subject,
                        CreationDate,
                        CreatedByID,
                        State,
                        DueDate,
                        UnitID,
                        Deleted,
                        COMPANY_ID,
                        CreatedByFullName,
                        UnitDescription};
                rowToDoListToDoAssignedToMeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowToDoListToDoAssignedToMeRow);
                return rowToDoListToDoAssignedToMeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ToDoListToDoAssignedToMeRow FindByRefIDToDoID(int RefID, int ToDoID) {
                return ((ToDoListToDoAssignedToMeRow)(this.Rows.Find(new object[] {
                            RefID,
                            ToDoID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ToDoListToDoAssignedToMeDataTable cln = ((ToDoListToDoAssignedToMeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ToDoListToDoAssignedToMeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnToDoID = base.Columns["ToDoID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnSubject = base.Columns["Subject"];
                this.columnCreationDate = base.Columns["CreationDate"];
                this.columnCreatedByID = base.Columns["CreatedByID"];
                this.columnState = base.Columns["State"];
                this.columnDueDate = base.Columns["DueDate"];
                this.columnUnitID = base.Columns["UnitID"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnCreatedByFullName = base.Columns["CreatedByFullName"];
                this.columnUnitDescription = base.Columns["UnitDescription"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnToDoID = new global::System.Data.DataColumn("ToDoID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToDoID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnCreationDate = new global::System.Data.DataColumn("CreationDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreationDate);
                this.columnCreatedByID = new global::System.Data.DataColumn("CreatedByID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedByID);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnDueDate = new global::System.Data.DataColumn("DueDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDueDate);
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnCreatedByFullName = new global::System.Data.DataColumn("CreatedByFullName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedByFullName);
                this.columnUnitDescription = new global::System.Data.DataColumn("UnitDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitDescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRefID,
                                this.columnToDoID}, true));
                this.columnToDoID.AutoIncrement = true;
                this.columnToDoID.AutoIncrementSeed = -1;
                this.columnToDoID.AutoIncrementStep = -1;
                this.columnToDoID.AllowDBNull = false;
                this.columnToDoID.ReadOnly = true;
                this.columnRefID.AllowDBNull = false;
                this.columnSubject.AllowDBNull = false;
                this.columnSubject.MaxLength = 250;
                this.columnCreationDate.AllowDBNull = false;
                this.columnCreatedByID.AllowDBNull = false;
                this.columnState.AllowDBNull = false;
                this.columnState.MaxLength = 25;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ToDoListToDoAssignedToMeRow NewToDoListToDoAssignedToMeRow() {
                return ((ToDoListToDoAssignedToMeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ToDoListToDoAssignedToMeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ToDoListToDoAssignedToMeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ToDoListToDoAssignedToMeRowChanged != null)) {
                    this.ToDoListToDoAssignedToMeRowChanged(this, new ToDoListToDoAssignedToMeRowChangeEvent(((ToDoListToDoAssignedToMeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ToDoListToDoAssignedToMeRowChanging != null)) {
                    this.ToDoListToDoAssignedToMeRowChanging(this, new ToDoListToDoAssignedToMeRowChangeEvent(((ToDoListToDoAssignedToMeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ToDoListToDoAssignedToMeRowDeleted != null)) {
                    this.ToDoListToDoAssignedToMeRowDeleted(this, new ToDoListToDoAssignedToMeRowChangeEvent(((ToDoListToDoAssignedToMeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ToDoListToDoAssignedToMeRowDeleting != null)) {
                    this.ToDoListToDoAssignedToMeRowDeleting(this, new ToDoListToDoAssignedToMeRowChangeEvent(((ToDoListToDoAssignedToMeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveToDoListToDoAssignedToMeRow(ToDoListToDoAssignedToMeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToDoListToDoAssignedToMeReportTDS ds = new ToDoListToDoAssignedToMeReportTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ToDoListToDoAssignedToMeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ToDoListActivityToDoAssignedToMeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnToDoID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnEmployeeID;
            
            private global::System.Data.DataColumn columnType_;
            
            private global::System.Data.DataColumn columnDateTime_;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnEmployeeFullName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ToDoListActivityToDoAssignedToMeDataTable() {
                this.TableName = "ToDoListActivityToDoAssignedToMe";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ToDoListActivityToDoAssignedToMeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ToDoListActivityToDoAssignedToMeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToDoIDColumn {
                get {
                    return this.columnToDoID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Type_Column {
                get {
                    return this.columnType_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateTime_Column {
                get {
                    return this.columnDateTime_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeFullNameColumn {
                get {
                    return this.columnEmployeeFullName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ToDoListActivityToDoAssignedToMeRow this[int index] {
                get {
                    return ((ToDoListActivityToDoAssignedToMeRow)(this.Rows[index]));
                }
            }
            
            public event ToDoListActivityToDoAssignedToMeRowChangeEventHandler ToDoListActivityToDoAssignedToMeRowChanging;
            
            public event ToDoListActivityToDoAssignedToMeRowChangeEventHandler ToDoListActivityToDoAssignedToMeRowChanged;
            
            public event ToDoListActivityToDoAssignedToMeRowChangeEventHandler ToDoListActivityToDoAssignedToMeRowDeleting;
            
            public event ToDoListActivityToDoAssignedToMeRowChangeEventHandler ToDoListActivityToDoAssignedToMeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddToDoListActivityToDoAssignedToMeRow(ToDoListActivityToDoAssignedToMeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ToDoListActivityToDoAssignedToMeRow AddToDoListActivityToDoAssignedToMeRow(int ToDoID, int RefID, int EmployeeID, string Type_, System.DateTime DateTime_, string Comment, bool Deleted, int COMPANY_ID, string EmployeeFullName) {
                ToDoListActivityToDoAssignedToMeRow rowToDoListActivityToDoAssignedToMeRow = ((ToDoListActivityToDoAssignedToMeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ToDoID,
                        RefID,
                        EmployeeID,
                        Type_,
                        DateTime_,
                        Comment,
                        Deleted,
                        COMPANY_ID,
                        EmployeeFullName};
                rowToDoListActivityToDoAssignedToMeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowToDoListActivityToDoAssignedToMeRow);
                return rowToDoListActivityToDoAssignedToMeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ToDoListActivityToDoAssignedToMeRow FindByToDoIDRefID(int ToDoID, int RefID) {
                return ((ToDoListActivityToDoAssignedToMeRow)(this.Rows.Find(new object[] {
                            ToDoID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ToDoListActivityToDoAssignedToMeDataTable cln = ((ToDoListActivityToDoAssignedToMeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ToDoListActivityToDoAssignedToMeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnToDoID = base.Columns["ToDoID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnType_ = base.Columns["Type_"];
                this.columnDateTime_ = base.Columns["DateTime_"];
                this.columnComment = base.Columns["Comment"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnEmployeeFullName = base.Columns["EmployeeFullName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnToDoID = new global::System.Data.DataColumn("ToDoID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToDoID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnEmployeeID = new global::System.Data.DataColumn("EmployeeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeID);
                this.columnType_ = new global::System.Data.DataColumn("Type_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType_);
                this.columnDateTime_ = new global::System.Data.DataColumn("DateTime_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTime_);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnEmployeeFullName = new global::System.Data.DataColumn("EmployeeFullName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeFullName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnToDoID,
                                this.columnRefID}, true));
                this.columnToDoID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnEmployeeID.AllowDBNull = false;
                this.columnType_.AllowDBNull = false;
                this.columnType_.MaxLength = 25;
                this.columnDateTime_.AllowDBNull = false;
                this.columnComment.MaxLength = 1073741823;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ToDoListActivityToDoAssignedToMeRow NewToDoListActivityToDoAssignedToMeRow() {
                return ((ToDoListActivityToDoAssignedToMeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ToDoListActivityToDoAssignedToMeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ToDoListActivityToDoAssignedToMeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ToDoListActivityToDoAssignedToMeRowChanged != null)) {
                    this.ToDoListActivityToDoAssignedToMeRowChanged(this, new ToDoListActivityToDoAssignedToMeRowChangeEvent(((ToDoListActivityToDoAssignedToMeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ToDoListActivityToDoAssignedToMeRowChanging != null)) {
                    this.ToDoListActivityToDoAssignedToMeRowChanging(this, new ToDoListActivityToDoAssignedToMeRowChangeEvent(((ToDoListActivityToDoAssignedToMeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ToDoListActivityToDoAssignedToMeRowDeleted != null)) {
                    this.ToDoListActivityToDoAssignedToMeRowDeleted(this, new ToDoListActivityToDoAssignedToMeRowChangeEvent(((ToDoListActivityToDoAssignedToMeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ToDoListActivityToDoAssignedToMeRowDeleting != null)) {
                    this.ToDoListActivityToDoAssignedToMeRowDeleting(this, new ToDoListActivityToDoAssignedToMeRowChangeEvent(((ToDoListActivityToDoAssignedToMeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveToDoListActivityToDoAssignedToMeRow(ToDoListActivityToDoAssignedToMeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToDoListToDoAssignedToMeReportTDS ds = new ToDoListToDoAssignedToMeReportTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ToDoListActivityToDoAssignedToMeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ToDoListToDoAssignedToMeRow : global::System.Data.DataRow {
            
            private ToDoListToDoAssignedToMeDataTable tableToDoListToDoAssignedToMe;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ToDoListToDoAssignedToMeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableToDoListToDoAssignedToMe = ((ToDoListToDoAssignedToMeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToDoID {
                get {
                    return ((int)(this[this.tableToDoListToDoAssignedToMe.ToDoIDColumn]));
                }
                set {
                    this[this.tableToDoListToDoAssignedToMe.ToDoIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableToDoListToDoAssignedToMe.RefIDColumn]));
                }
                set {
                    this[this.tableToDoListToDoAssignedToMe.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    return ((string)(this[this.tableToDoListToDoAssignedToMe.SubjectColumn]));
                }
                set {
                    this[this.tableToDoListToDoAssignedToMe.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreationDate {
                get {
                    return ((global::System.DateTime)(this[this.tableToDoListToDoAssignedToMe.CreationDateColumn]));
                }
                set {
                    this[this.tableToDoListToDoAssignedToMe.CreationDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CreatedByID {
                get {
                    return ((int)(this[this.tableToDoListToDoAssignedToMe.CreatedByIDColumn]));
                }
                set {
                    this[this.tableToDoListToDoAssignedToMe.CreatedByIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    return ((string)(this[this.tableToDoListToDoAssignedToMe.StateColumn]));
                }
                set {
                    this[this.tableToDoListToDoAssignedToMe.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DueDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableToDoListToDoAssignedToMe.DueDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DueDate\' in table \'ToDoListToDoAssignedToMe\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableToDoListToDoAssignedToMe.DueDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    try {
                        return ((int)(this[this.tableToDoListToDoAssignedToMe.UnitIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitID\' in table \'ToDoListToDoAssignedToMe\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableToDoListToDoAssignedToMe.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableToDoListToDoAssignedToMe.DeletedColumn]));
                }
                set {
                    this[this.tableToDoListToDoAssignedToMe.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableToDoListToDoAssignedToMe.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableToDoListToDoAssignedToMe.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreatedByFullName {
                get {
                    try {
                        return ((string)(this[this.tableToDoListToDoAssignedToMe.CreatedByFullNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatedByFullName\' in table \'ToDoListToDoAssignedToMe\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableToDoListToDoAssignedToMe.CreatedByFullNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitDescription {
                get {
                    try {
                        return ((string)(this[this.tableToDoListToDoAssignedToMe.UnitDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitDescription\' in table \'ToDoListToDoAssignedToMe\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableToDoListToDoAssignedToMe.UnitDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDueDateNull() {
                return this.IsNull(this.tableToDoListToDoAssignedToMe.DueDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDueDateNull() {
                this[this.tableToDoListToDoAssignedToMe.DueDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitIDNull() {
                return this.IsNull(this.tableToDoListToDoAssignedToMe.UnitIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitIDNull() {
                this[this.tableToDoListToDoAssignedToMe.UnitIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedByFullNameNull() {
                return this.IsNull(this.tableToDoListToDoAssignedToMe.CreatedByFullNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedByFullNameNull() {
                this[this.tableToDoListToDoAssignedToMe.CreatedByFullNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitDescriptionNull() {
                return this.IsNull(this.tableToDoListToDoAssignedToMe.UnitDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitDescriptionNull() {
                this[this.tableToDoListToDoAssignedToMe.UnitDescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ToDoListActivityToDoAssignedToMeRow : global::System.Data.DataRow {
            
            private ToDoListActivityToDoAssignedToMeDataTable tableToDoListActivityToDoAssignedToMe;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ToDoListActivityToDoAssignedToMeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableToDoListActivityToDoAssignedToMe = ((ToDoListActivityToDoAssignedToMeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToDoID {
                get {
                    return ((int)(this[this.tableToDoListActivityToDoAssignedToMe.ToDoIDColumn]));
                }
                set {
                    this[this.tableToDoListActivityToDoAssignedToMe.ToDoIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableToDoListActivityToDoAssignedToMe.RefIDColumn]));
                }
                set {
                    this[this.tableToDoListActivityToDoAssignedToMe.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmployeeID {
                get {
                    return ((int)(this[this.tableToDoListActivityToDoAssignedToMe.EmployeeIDColumn]));
                }
                set {
                    this[this.tableToDoListActivityToDoAssignedToMe.EmployeeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type_ {
                get {
                    return ((string)(this[this.tableToDoListActivityToDoAssignedToMe.Type_Column]));
                }
                set {
                    this[this.tableToDoListActivityToDoAssignedToMe.Type_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateTime_ {
                get {
                    return ((global::System.DateTime)(this[this.tableToDoListActivityToDoAssignedToMe.DateTime_Column]));
                }
                set {
                    this[this.tableToDoListActivityToDoAssignedToMe.DateTime_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableToDoListActivityToDoAssignedToMe.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'ToDoListActivityToDoAssignedToMe\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableToDoListActivityToDoAssignedToMe.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableToDoListActivityToDoAssignedToMe.DeletedColumn]));
                }
                set {
                    this[this.tableToDoListActivityToDoAssignedToMe.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableToDoListActivityToDoAssignedToMe.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableToDoListActivityToDoAssignedToMe.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeFullName {
                get {
                    try {
                        return ((string)(this[this.tableToDoListActivityToDoAssignedToMe.EmployeeFullNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmployeeFullName\' in table \'ToDoListActivityToDoAssignedToM" +
                                "e\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableToDoListActivityToDoAssignedToMe.EmployeeFullNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableToDoListActivityToDoAssignedToMe.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableToDoListActivityToDoAssignedToMe.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeFullNameNull() {
                return this.IsNull(this.tableToDoListActivityToDoAssignedToMe.EmployeeFullNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeFullNameNull() {
                this[this.tableToDoListActivityToDoAssignedToMe.EmployeeFullNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ToDoListToDoAssignedToMeRowChangeEvent : global::System.EventArgs {
            
            private ToDoListToDoAssignedToMeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ToDoListToDoAssignedToMeRowChangeEvent(ToDoListToDoAssignedToMeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ToDoListToDoAssignedToMeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ToDoListActivityToDoAssignedToMeRowChangeEvent : global::System.EventArgs {
            
            private ToDoListActivityToDoAssignedToMeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ToDoListActivityToDoAssignedToMeRowChangeEvent(ToDoListActivityToDoAssignedToMeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ToDoListActivityToDoAssignedToMeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591