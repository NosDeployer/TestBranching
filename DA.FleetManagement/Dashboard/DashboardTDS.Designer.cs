//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.FleetManagement.Dashboard {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DashboardTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DashboardTDS : global::System.Data.DataSet {
        
        private DashboardUnassignedServiceRequestsDataTable tableDashboardUnassignedServiceRequests;
        
        private DashboardExpiredServiceRequestsDataTable tableDashboardExpiredServiceRequests;
        
        private DashboardItemsAboutToExpireDataTable tableDashboardItemsAboutToExpire;
        
        private DashboardMyServiceRequestsDataTable tableDashboardMyServiceRequests;
        
        private DashboardInProgressServiceRequestsDataTable tableDashboardInProgressServiceRequests;
        
        private DashboardChecklistAlarmsDataTable tableDashboardChecklistAlarms;
        
        private DashboardMyToDoListDataTable tableDashboardMyToDoList;
        
        private DashboardMyToDoListOnHoldDataTable tableDashboardMyToDoListOnHold;
        
        private DashboardToDoListAssignedToMeDataTable tableDashboardToDoListAssignedToMe;
        
        private DashboardToDoListAssignedToMeOnHoldDataTable tableDashboardToDoListAssignedToMeOnHold;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DashboardTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DashboardTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["DashboardUnassignedServiceRequests"] != null)) {
                    base.Tables.Add(new DashboardUnassignedServiceRequestsDataTable(ds.Tables["DashboardUnassignedServiceRequests"]));
                }
                if ((ds.Tables["DashboardExpiredServiceRequests"] != null)) {
                    base.Tables.Add(new DashboardExpiredServiceRequestsDataTable(ds.Tables["DashboardExpiredServiceRequests"]));
                }
                if ((ds.Tables["DashboardItemsAboutToExpire"] != null)) {
                    base.Tables.Add(new DashboardItemsAboutToExpireDataTable(ds.Tables["DashboardItemsAboutToExpire"]));
                }
                if ((ds.Tables["DashboardMyServiceRequests"] != null)) {
                    base.Tables.Add(new DashboardMyServiceRequestsDataTable(ds.Tables["DashboardMyServiceRequests"]));
                }
                if ((ds.Tables["DashboardInProgressServiceRequests"] != null)) {
                    base.Tables.Add(new DashboardInProgressServiceRequestsDataTable(ds.Tables["DashboardInProgressServiceRequests"]));
                }
                if ((ds.Tables["DashboardChecklistAlarms"] != null)) {
                    base.Tables.Add(new DashboardChecklistAlarmsDataTable(ds.Tables["DashboardChecklistAlarms"]));
                }
                if ((ds.Tables["DashboardMyToDoList"] != null)) {
                    base.Tables.Add(new DashboardMyToDoListDataTable(ds.Tables["DashboardMyToDoList"]));
                }
                if ((ds.Tables["DashboardMyToDoListOnHold"] != null)) {
                    base.Tables.Add(new DashboardMyToDoListOnHoldDataTable(ds.Tables["DashboardMyToDoListOnHold"]));
                }
                if ((ds.Tables["DashboardToDoListAssignedToMe"] != null)) {
                    base.Tables.Add(new DashboardToDoListAssignedToMeDataTable(ds.Tables["DashboardToDoListAssignedToMe"]));
                }
                if ((ds.Tables["DashboardToDoListAssignedToMeOnHold"] != null)) {
                    base.Tables.Add(new DashboardToDoListAssignedToMeOnHoldDataTable(ds.Tables["DashboardToDoListAssignedToMeOnHold"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DashboardUnassignedServiceRequestsDataTable DashboardUnassignedServiceRequests {
            get {
                return this.tableDashboardUnassignedServiceRequests;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DashboardExpiredServiceRequestsDataTable DashboardExpiredServiceRequests {
            get {
                return this.tableDashboardExpiredServiceRequests;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DashboardItemsAboutToExpireDataTable DashboardItemsAboutToExpire {
            get {
                return this.tableDashboardItemsAboutToExpire;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DashboardMyServiceRequestsDataTable DashboardMyServiceRequests {
            get {
                return this.tableDashboardMyServiceRequests;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DashboardInProgressServiceRequestsDataTable DashboardInProgressServiceRequests {
            get {
                return this.tableDashboardInProgressServiceRequests;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DashboardChecklistAlarmsDataTable DashboardChecklistAlarms {
            get {
                return this.tableDashboardChecklistAlarms;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DashboardMyToDoListDataTable DashboardMyToDoList {
            get {
                return this.tableDashboardMyToDoList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DashboardMyToDoListOnHoldDataTable DashboardMyToDoListOnHold {
            get {
                return this.tableDashboardMyToDoListOnHold;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DashboardToDoListAssignedToMeDataTable DashboardToDoListAssignedToMe {
            get {
                return this.tableDashboardToDoListAssignedToMe;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DashboardToDoListAssignedToMeOnHoldDataTable DashboardToDoListAssignedToMeOnHold {
            get {
                return this.tableDashboardToDoListAssignedToMeOnHold;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DashboardTDS cln = ((DashboardTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DashboardUnassignedServiceRequests"] != null)) {
                    base.Tables.Add(new DashboardUnassignedServiceRequestsDataTable(ds.Tables["DashboardUnassignedServiceRequests"]));
                }
                if ((ds.Tables["DashboardExpiredServiceRequests"] != null)) {
                    base.Tables.Add(new DashboardExpiredServiceRequestsDataTable(ds.Tables["DashboardExpiredServiceRequests"]));
                }
                if ((ds.Tables["DashboardItemsAboutToExpire"] != null)) {
                    base.Tables.Add(new DashboardItemsAboutToExpireDataTable(ds.Tables["DashboardItemsAboutToExpire"]));
                }
                if ((ds.Tables["DashboardMyServiceRequests"] != null)) {
                    base.Tables.Add(new DashboardMyServiceRequestsDataTable(ds.Tables["DashboardMyServiceRequests"]));
                }
                if ((ds.Tables["DashboardInProgressServiceRequests"] != null)) {
                    base.Tables.Add(new DashboardInProgressServiceRequestsDataTable(ds.Tables["DashboardInProgressServiceRequests"]));
                }
                if ((ds.Tables["DashboardChecklistAlarms"] != null)) {
                    base.Tables.Add(new DashboardChecklistAlarmsDataTable(ds.Tables["DashboardChecklistAlarms"]));
                }
                if ((ds.Tables["DashboardMyToDoList"] != null)) {
                    base.Tables.Add(new DashboardMyToDoListDataTable(ds.Tables["DashboardMyToDoList"]));
                }
                if ((ds.Tables["DashboardMyToDoListOnHold"] != null)) {
                    base.Tables.Add(new DashboardMyToDoListOnHoldDataTable(ds.Tables["DashboardMyToDoListOnHold"]));
                }
                if ((ds.Tables["DashboardToDoListAssignedToMe"] != null)) {
                    base.Tables.Add(new DashboardToDoListAssignedToMeDataTable(ds.Tables["DashboardToDoListAssignedToMe"]));
                }
                if ((ds.Tables["DashboardToDoListAssignedToMeOnHold"] != null)) {
                    base.Tables.Add(new DashboardToDoListAssignedToMeOnHoldDataTable(ds.Tables["DashboardToDoListAssignedToMeOnHold"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDashboardUnassignedServiceRequests = ((DashboardUnassignedServiceRequestsDataTable)(base.Tables["DashboardUnassignedServiceRequests"]));
            if ((initTable == true)) {
                if ((this.tableDashboardUnassignedServiceRequests != null)) {
                    this.tableDashboardUnassignedServiceRequests.InitVars();
                }
            }
            this.tableDashboardExpiredServiceRequests = ((DashboardExpiredServiceRequestsDataTable)(base.Tables["DashboardExpiredServiceRequests"]));
            if ((initTable == true)) {
                if ((this.tableDashboardExpiredServiceRequests != null)) {
                    this.tableDashboardExpiredServiceRequests.InitVars();
                }
            }
            this.tableDashboardItemsAboutToExpire = ((DashboardItemsAboutToExpireDataTable)(base.Tables["DashboardItemsAboutToExpire"]));
            if ((initTable == true)) {
                if ((this.tableDashboardItemsAboutToExpire != null)) {
                    this.tableDashboardItemsAboutToExpire.InitVars();
                }
            }
            this.tableDashboardMyServiceRequests = ((DashboardMyServiceRequestsDataTable)(base.Tables["DashboardMyServiceRequests"]));
            if ((initTable == true)) {
                if ((this.tableDashboardMyServiceRequests != null)) {
                    this.tableDashboardMyServiceRequests.InitVars();
                }
            }
            this.tableDashboardInProgressServiceRequests = ((DashboardInProgressServiceRequestsDataTable)(base.Tables["DashboardInProgressServiceRequests"]));
            if ((initTable == true)) {
                if ((this.tableDashboardInProgressServiceRequests != null)) {
                    this.tableDashboardInProgressServiceRequests.InitVars();
                }
            }
            this.tableDashboardChecklistAlarms = ((DashboardChecklistAlarmsDataTable)(base.Tables["DashboardChecklistAlarms"]));
            if ((initTable == true)) {
                if ((this.tableDashboardChecklistAlarms != null)) {
                    this.tableDashboardChecklistAlarms.InitVars();
                }
            }
            this.tableDashboardMyToDoList = ((DashboardMyToDoListDataTable)(base.Tables["DashboardMyToDoList"]));
            if ((initTable == true)) {
                if ((this.tableDashboardMyToDoList != null)) {
                    this.tableDashboardMyToDoList.InitVars();
                }
            }
            this.tableDashboardMyToDoListOnHold = ((DashboardMyToDoListOnHoldDataTable)(base.Tables["DashboardMyToDoListOnHold"]));
            if ((initTable == true)) {
                if ((this.tableDashboardMyToDoListOnHold != null)) {
                    this.tableDashboardMyToDoListOnHold.InitVars();
                }
            }
            this.tableDashboardToDoListAssignedToMe = ((DashboardToDoListAssignedToMeDataTable)(base.Tables["DashboardToDoListAssignedToMe"]));
            if ((initTable == true)) {
                if ((this.tableDashboardToDoListAssignedToMe != null)) {
                    this.tableDashboardToDoListAssignedToMe.InitVars();
                }
            }
            this.tableDashboardToDoListAssignedToMeOnHold = ((DashboardToDoListAssignedToMeOnHoldDataTable)(base.Tables["DashboardToDoListAssignedToMeOnHold"]));
            if ((initTable == true)) {
                if ((this.tableDashboardToDoListAssignedToMeOnHold != null)) {
                    this.tableDashboardToDoListAssignedToMeOnHold.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DashboardTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DashboardTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDashboardUnassignedServiceRequests = new DashboardUnassignedServiceRequestsDataTable();
            base.Tables.Add(this.tableDashboardUnassignedServiceRequests);
            this.tableDashboardExpiredServiceRequests = new DashboardExpiredServiceRequestsDataTable();
            base.Tables.Add(this.tableDashboardExpiredServiceRequests);
            this.tableDashboardItemsAboutToExpire = new DashboardItemsAboutToExpireDataTable();
            base.Tables.Add(this.tableDashboardItemsAboutToExpire);
            this.tableDashboardMyServiceRequests = new DashboardMyServiceRequestsDataTable();
            base.Tables.Add(this.tableDashboardMyServiceRequests);
            this.tableDashboardInProgressServiceRequests = new DashboardInProgressServiceRequestsDataTable();
            base.Tables.Add(this.tableDashboardInProgressServiceRequests);
            this.tableDashboardChecklistAlarms = new DashboardChecklistAlarmsDataTable();
            base.Tables.Add(this.tableDashboardChecklistAlarms);
            this.tableDashboardMyToDoList = new DashboardMyToDoListDataTable();
            base.Tables.Add(this.tableDashboardMyToDoList);
            this.tableDashboardMyToDoListOnHold = new DashboardMyToDoListOnHoldDataTable();
            base.Tables.Add(this.tableDashboardMyToDoListOnHold);
            this.tableDashboardToDoListAssignedToMe = new DashboardToDoListAssignedToMeDataTable();
            base.Tables.Add(this.tableDashboardToDoListAssignedToMe);
            this.tableDashboardToDoListAssignedToMeOnHold = new DashboardToDoListAssignedToMeOnHoldDataTable();
            base.Tables.Add(this.tableDashboardToDoListAssignedToMeOnHold);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDashboardUnassignedServiceRequests() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDashboardExpiredServiceRequests() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDashboardItemsAboutToExpire() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDashboardMyServiceRequests() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDashboardInProgressServiceRequests() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDashboardChecklistAlarms() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDashboardMyToDoList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDashboardMyToDoListOnHold() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDashboardToDoListAssignedToMe() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDashboardToDoListAssignedToMeOnHold() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DashboardTDS ds = new DashboardTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void DashboardUnassignedServiceRequestsRowChangeEventHandler(object sender, DashboardUnassignedServiceRequestsRowChangeEvent e);
        
        public delegate void DashboardExpiredServiceRequestsRowChangeEventHandler(object sender, DashboardExpiredServiceRequestsRowChangeEvent e);
        
        public delegate void DashboardItemsAboutToExpireRowChangeEventHandler(object sender, DashboardItemsAboutToExpireRowChangeEvent e);
        
        public delegate void DashboardMyServiceRequestsRowChangeEventHandler(object sender, DashboardMyServiceRequestsRowChangeEvent e);
        
        public delegate void DashboardInProgressServiceRequestsRowChangeEventHandler(object sender, DashboardInProgressServiceRequestsRowChangeEvent e);
        
        public delegate void DashboardChecklistAlarmsRowChangeEventHandler(object sender, DashboardChecklistAlarmsRowChangeEvent e);
        
        public delegate void DashboardMyToDoListRowChangeEventHandler(object sender, DashboardMyToDoListRowChangeEvent e);
        
        public delegate void DashboardMyToDoListOnHoldRowChangeEventHandler(object sender, DashboardMyToDoListOnHoldRowChangeEvent e);
        
        public delegate void DashboardToDoListAssignedToMeRowChangeEventHandler(object sender, DashboardToDoListAssignedToMeRowChangeEvent e);
        
        public delegate void DashboardToDoListAssignedToMeOnHoldRowChangeEventHandler(object sender, DashboardToDoListAssignedToMeOnHoldRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DashboardUnassignedServiceRequestsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnServiceID;
            
            private global::System.Data.DataColumn columnUnassignedServicesCompleteName;
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnServiceDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardUnassignedServiceRequestsDataTable() {
                this.TableName = "DashboardUnassignedServiceRequests";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DashboardUnassignedServiceRequestsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DashboardUnassignedServiceRequestsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceIDColumn {
                get {
                    return this.columnServiceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnassignedServicesCompleteNameColumn {
                get {
                    return this.columnUnassignedServicesCompleteName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceDescriptionColumn {
                get {
                    return this.columnServiceDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardUnassignedServiceRequestsRow this[int index] {
                get {
                    return ((DashboardUnassignedServiceRequestsRow)(this.Rows[index]));
                }
            }
            
            public event DashboardUnassignedServiceRequestsRowChangeEventHandler DashboardUnassignedServiceRequestsRowChanging;
            
            public event DashboardUnassignedServiceRequestsRowChangeEventHandler DashboardUnassignedServiceRequestsRowChanged;
            
            public event DashboardUnassignedServiceRequestsRowChangeEventHandler DashboardUnassignedServiceRequestsRowDeleting;
            
            public event DashboardUnassignedServiceRequestsRowChangeEventHandler DashboardUnassignedServiceRequestsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDashboardUnassignedServiceRequestsRow(DashboardUnassignedServiceRequestsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardUnassignedServiceRequestsRow AddDashboardUnassignedServiceRequestsRow(int ServiceID, string UnassignedServicesCompleteName, bool Selected, string ServiceDescription) {
                DashboardUnassignedServiceRequestsRow rowDashboardUnassignedServiceRequestsRow = ((DashboardUnassignedServiceRequestsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ServiceID,
                        UnassignedServicesCompleteName,
                        Selected,
                        ServiceDescription};
                rowDashboardUnassignedServiceRequestsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDashboardUnassignedServiceRequestsRow);
                return rowDashboardUnassignedServiceRequestsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardUnassignedServiceRequestsRow FindByServiceID(int ServiceID) {
                return ((DashboardUnassignedServiceRequestsRow)(this.Rows.Find(new object[] {
                            ServiceID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DashboardUnassignedServiceRequestsDataTable cln = ((DashboardUnassignedServiceRequestsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DashboardUnassignedServiceRequestsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnServiceID = base.Columns["ServiceID"];
                this.columnUnassignedServicesCompleteName = base.Columns["UnassignedServicesCompleteName"];
                this.columnSelected = base.Columns["Selected"];
                this.columnServiceDescription = base.Columns["ServiceDescription"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnServiceID = new global::System.Data.DataColumn("ServiceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceID);
                this.columnUnassignedServicesCompleteName = new global::System.Data.DataColumn("UnassignedServicesCompleteName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnassignedServicesCompleteName);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnServiceDescription = new global::System.Data.DataColumn("ServiceDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceDescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnServiceID}, true));
                this.columnServiceID.AllowDBNull = false;
                this.columnServiceID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardUnassignedServiceRequestsRow NewDashboardUnassignedServiceRequestsRow() {
                return ((DashboardUnassignedServiceRequestsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DashboardUnassignedServiceRequestsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DashboardUnassignedServiceRequestsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DashboardUnassignedServiceRequestsRowChanged != null)) {
                    this.DashboardUnassignedServiceRequestsRowChanged(this, new DashboardUnassignedServiceRequestsRowChangeEvent(((DashboardUnassignedServiceRequestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DashboardUnassignedServiceRequestsRowChanging != null)) {
                    this.DashboardUnassignedServiceRequestsRowChanging(this, new DashboardUnassignedServiceRequestsRowChangeEvent(((DashboardUnassignedServiceRequestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DashboardUnassignedServiceRequestsRowDeleted != null)) {
                    this.DashboardUnassignedServiceRequestsRowDeleted(this, new DashboardUnassignedServiceRequestsRowChangeEvent(((DashboardUnassignedServiceRequestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DashboardUnassignedServiceRequestsRowDeleting != null)) {
                    this.DashboardUnassignedServiceRequestsRowDeleting(this, new DashboardUnassignedServiceRequestsRowChangeEvent(((DashboardUnassignedServiceRequestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDashboardUnassignedServiceRequestsRow(DashboardUnassignedServiceRequestsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DashboardTDS ds = new DashboardTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DashboardUnassignedServiceRequestsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DashboardExpiredServiceRequestsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnServiceID;
            
            private global::System.Data.DataColumn columnExpiredServicesCompleteName;
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnServiceDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardExpiredServiceRequestsDataTable() {
                this.TableName = "DashboardExpiredServiceRequests";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DashboardExpiredServiceRequestsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DashboardExpiredServiceRequestsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceIDColumn {
                get {
                    return this.columnServiceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExpiredServicesCompleteNameColumn {
                get {
                    return this.columnExpiredServicesCompleteName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceDescriptionColumn {
                get {
                    return this.columnServiceDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardExpiredServiceRequestsRow this[int index] {
                get {
                    return ((DashboardExpiredServiceRequestsRow)(this.Rows[index]));
                }
            }
            
            public event DashboardExpiredServiceRequestsRowChangeEventHandler DashboardExpiredServiceRequestsRowChanging;
            
            public event DashboardExpiredServiceRequestsRowChangeEventHandler DashboardExpiredServiceRequestsRowChanged;
            
            public event DashboardExpiredServiceRequestsRowChangeEventHandler DashboardExpiredServiceRequestsRowDeleting;
            
            public event DashboardExpiredServiceRequestsRowChangeEventHandler DashboardExpiredServiceRequestsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDashboardExpiredServiceRequestsRow(DashboardExpiredServiceRequestsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardExpiredServiceRequestsRow AddDashboardExpiredServiceRequestsRow(int ServiceID, string ExpiredServicesCompleteName, bool Selected, string ServiceDescription) {
                DashboardExpiredServiceRequestsRow rowDashboardExpiredServiceRequestsRow = ((DashboardExpiredServiceRequestsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ServiceID,
                        ExpiredServicesCompleteName,
                        Selected,
                        ServiceDescription};
                rowDashboardExpiredServiceRequestsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDashboardExpiredServiceRequestsRow);
                return rowDashboardExpiredServiceRequestsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardExpiredServiceRequestsRow FindByServiceID(int ServiceID) {
                return ((DashboardExpiredServiceRequestsRow)(this.Rows.Find(new object[] {
                            ServiceID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DashboardExpiredServiceRequestsDataTable cln = ((DashboardExpiredServiceRequestsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DashboardExpiredServiceRequestsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnServiceID = base.Columns["ServiceID"];
                this.columnExpiredServicesCompleteName = base.Columns["ExpiredServicesCompleteName"];
                this.columnSelected = base.Columns["Selected"];
                this.columnServiceDescription = base.Columns["ServiceDescription"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnServiceID = new global::System.Data.DataColumn("ServiceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceID);
                this.columnExpiredServicesCompleteName = new global::System.Data.DataColumn("ExpiredServicesCompleteName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpiredServicesCompleteName);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnServiceDescription = new global::System.Data.DataColumn("ServiceDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceDescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnServiceID}, true));
                this.columnServiceID.AllowDBNull = false;
                this.columnServiceID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardExpiredServiceRequestsRow NewDashboardExpiredServiceRequestsRow() {
                return ((DashboardExpiredServiceRequestsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DashboardExpiredServiceRequestsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DashboardExpiredServiceRequestsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DashboardExpiredServiceRequestsRowChanged != null)) {
                    this.DashboardExpiredServiceRequestsRowChanged(this, new DashboardExpiredServiceRequestsRowChangeEvent(((DashboardExpiredServiceRequestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DashboardExpiredServiceRequestsRowChanging != null)) {
                    this.DashboardExpiredServiceRequestsRowChanging(this, new DashboardExpiredServiceRequestsRowChangeEvent(((DashboardExpiredServiceRequestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DashboardExpiredServiceRequestsRowDeleted != null)) {
                    this.DashboardExpiredServiceRequestsRowDeleted(this, new DashboardExpiredServiceRequestsRowChangeEvent(((DashboardExpiredServiceRequestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DashboardExpiredServiceRequestsRowDeleting != null)) {
                    this.DashboardExpiredServiceRequestsRowDeleting(this, new DashboardExpiredServiceRequestsRowChangeEvent(((DashboardExpiredServiceRequestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDashboardExpiredServiceRequestsRow(DashboardExpiredServiceRequestsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DashboardTDS ds = new DashboardTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DashboardExpiredServiceRequestsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DashboardItemsAboutToExpireDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnServiceID;
            
            private global::System.Data.DataColumn columnItemsAboutToExpireCompleteName;
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnServiceDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardItemsAboutToExpireDataTable() {
                this.TableName = "DashboardItemsAboutToExpire";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DashboardItemsAboutToExpireDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DashboardItemsAboutToExpireDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceIDColumn {
                get {
                    return this.columnServiceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemsAboutToExpireCompleteNameColumn {
                get {
                    return this.columnItemsAboutToExpireCompleteName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceDescriptionColumn {
                get {
                    return this.columnServiceDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardItemsAboutToExpireRow this[int index] {
                get {
                    return ((DashboardItemsAboutToExpireRow)(this.Rows[index]));
                }
            }
            
            public event DashboardItemsAboutToExpireRowChangeEventHandler DashboardItemsAboutToExpireRowChanging;
            
            public event DashboardItemsAboutToExpireRowChangeEventHandler DashboardItemsAboutToExpireRowChanged;
            
            public event DashboardItemsAboutToExpireRowChangeEventHandler DashboardItemsAboutToExpireRowDeleting;
            
            public event DashboardItemsAboutToExpireRowChangeEventHandler DashboardItemsAboutToExpireRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDashboardItemsAboutToExpireRow(DashboardItemsAboutToExpireRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardItemsAboutToExpireRow AddDashboardItemsAboutToExpireRow(int ServiceID, string ItemsAboutToExpireCompleteName, bool Selected, string ServiceDescription) {
                DashboardItemsAboutToExpireRow rowDashboardItemsAboutToExpireRow = ((DashboardItemsAboutToExpireRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ServiceID,
                        ItemsAboutToExpireCompleteName,
                        Selected,
                        ServiceDescription};
                rowDashboardItemsAboutToExpireRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDashboardItemsAboutToExpireRow);
                return rowDashboardItemsAboutToExpireRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardItemsAboutToExpireRow FindByServiceID(int ServiceID) {
                return ((DashboardItemsAboutToExpireRow)(this.Rows.Find(new object[] {
                            ServiceID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DashboardItemsAboutToExpireDataTable cln = ((DashboardItemsAboutToExpireDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DashboardItemsAboutToExpireDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnServiceID = base.Columns["ServiceID"];
                this.columnItemsAboutToExpireCompleteName = base.Columns["ItemsAboutToExpireCompleteName"];
                this.columnSelected = base.Columns["Selected"];
                this.columnServiceDescription = base.Columns["ServiceDescription"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnServiceID = new global::System.Data.DataColumn("ServiceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceID);
                this.columnItemsAboutToExpireCompleteName = new global::System.Data.DataColumn("ItemsAboutToExpireCompleteName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemsAboutToExpireCompleteName);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnServiceDescription = new global::System.Data.DataColumn("ServiceDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceDescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnServiceID}, true));
                this.columnServiceID.AllowDBNull = false;
                this.columnServiceID.Unique = true;
                this.columnItemsAboutToExpireCompleteName.Caption = "ExpiredServicesCompleteName";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardItemsAboutToExpireRow NewDashboardItemsAboutToExpireRow() {
                return ((DashboardItemsAboutToExpireRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DashboardItemsAboutToExpireRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DashboardItemsAboutToExpireRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DashboardItemsAboutToExpireRowChanged != null)) {
                    this.DashboardItemsAboutToExpireRowChanged(this, new DashboardItemsAboutToExpireRowChangeEvent(((DashboardItemsAboutToExpireRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DashboardItemsAboutToExpireRowChanging != null)) {
                    this.DashboardItemsAboutToExpireRowChanging(this, new DashboardItemsAboutToExpireRowChangeEvent(((DashboardItemsAboutToExpireRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DashboardItemsAboutToExpireRowDeleted != null)) {
                    this.DashboardItemsAboutToExpireRowDeleted(this, new DashboardItemsAboutToExpireRowChangeEvent(((DashboardItemsAboutToExpireRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DashboardItemsAboutToExpireRowDeleting != null)) {
                    this.DashboardItemsAboutToExpireRowDeleting(this, new DashboardItemsAboutToExpireRowChangeEvent(((DashboardItemsAboutToExpireRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDashboardItemsAboutToExpireRow(DashboardItemsAboutToExpireRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DashboardTDS ds = new DashboardTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DashboardItemsAboutToExpireDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DashboardMyServiceRequestsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnServiceID;
            
            private global::System.Data.DataColumn columnMyServicesCompleteName;
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnServiceDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMyServiceRequestsDataTable() {
                this.TableName = "DashboardMyServiceRequests";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DashboardMyServiceRequestsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DashboardMyServiceRequestsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceIDColumn {
                get {
                    return this.columnServiceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MyServicesCompleteNameColumn {
                get {
                    return this.columnMyServicesCompleteName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceDescriptionColumn {
                get {
                    return this.columnServiceDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMyServiceRequestsRow this[int index] {
                get {
                    return ((DashboardMyServiceRequestsRow)(this.Rows[index]));
                }
            }
            
            public event DashboardMyServiceRequestsRowChangeEventHandler DashboardMyServiceRequestsRowChanging;
            
            public event DashboardMyServiceRequestsRowChangeEventHandler DashboardMyServiceRequestsRowChanged;
            
            public event DashboardMyServiceRequestsRowChangeEventHandler DashboardMyServiceRequestsRowDeleting;
            
            public event DashboardMyServiceRequestsRowChangeEventHandler DashboardMyServiceRequestsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDashboardMyServiceRequestsRow(DashboardMyServiceRequestsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMyServiceRequestsRow AddDashboardMyServiceRequestsRow(int ServiceID, string MyServicesCompleteName, bool Selected, string State, string ServiceDescription) {
                DashboardMyServiceRequestsRow rowDashboardMyServiceRequestsRow = ((DashboardMyServiceRequestsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ServiceID,
                        MyServicesCompleteName,
                        Selected,
                        State,
                        ServiceDescription};
                rowDashboardMyServiceRequestsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDashboardMyServiceRequestsRow);
                return rowDashboardMyServiceRequestsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMyServiceRequestsRow FindByServiceID(int ServiceID) {
                return ((DashboardMyServiceRequestsRow)(this.Rows.Find(new object[] {
                            ServiceID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DashboardMyServiceRequestsDataTable cln = ((DashboardMyServiceRequestsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DashboardMyServiceRequestsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnServiceID = base.Columns["ServiceID"];
                this.columnMyServicesCompleteName = base.Columns["MyServicesCompleteName"];
                this.columnSelected = base.Columns["Selected"];
                this.columnState = base.Columns["State"];
                this.columnServiceDescription = base.Columns["ServiceDescription"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnServiceID = new global::System.Data.DataColumn("ServiceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceID);
                this.columnMyServicesCompleteName = new global::System.Data.DataColumn("MyServicesCompleteName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMyServicesCompleteName);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnServiceDescription = new global::System.Data.DataColumn("ServiceDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceDescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnServiceID}, true));
                this.columnServiceID.AllowDBNull = false;
                this.columnServiceID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMyServiceRequestsRow NewDashboardMyServiceRequestsRow() {
                return ((DashboardMyServiceRequestsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DashboardMyServiceRequestsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DashboardMyServiceRequestsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DashboardMyServiceRequestsRowChanged != null)) {
                    this.DashboardMyServiceRequestsRowChanged(this, new DashboardMyServiceRequestsRowChangeEvent(((DashboardMyServiceRequestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DashboardMyServiceRequestsRowChanging != null)) {
                    this.DashboardMyServiceRequestsRowChanging(this, new DashboardMyServiceRequestsRowChangeEvent(((DashboardMyServiceRequestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DashboardMyServiceRequestsRowDeleted != null)) {
                    this.DashboardMyServiceRequestsRowDeleted(this, new DashboardMyServiceRequestsRowChangeEvent(((DashboardMyServiceRequestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DashboardMyServiceRequestsRowDeleting != null)) {
                    this.DashboardMyServiceRequestsRowDeleting(this, new DashboardMyServiceRequestsRowChangeEvent(((DashboardMyServiceRequestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDashboardMyServiceRequestsRow(DashboardMyServiceRequestsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DashboardTDS ds = new DashboardTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DashboardMyServiceRequestsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DashboardInProgressServiceRequestsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnServiceID;
            
            private global::System.Data.DataColumn columnInProgressServicesCompleteName;
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnServiceDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardInProgressServiceRequestsDataTable() {
                this.TableName = "DashboardInProgressServiceRequests";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DashboardInProgressServiceRequestsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DashboardInProgressServiceRequestsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceIDColumn {
                get {
                    return this.columnServiceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InProgressServicesCompleteNameColumn {
                get {
                    return this.columnInProgressServicesCompleteName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceDescriptionColumn {
                get {
                    return this.columnServiceDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardInProgressServiceRequestsRow this[int index] {
                get {
                    return ((DashboardInProgressServiceRequestsRow)(this.Rows[index]));
                }
            }
            
            public event DashboardInProgressServiceRequestsRowChangeEventHandler DashboardInProgressServiceRequestsRowChanging;
            
            public event DashboardInProgressServiceRequestsRowChangeEventHandler DashboardInProgressServiceRequestsRowChanged;
            
            public event DashboardInProgressServiceRequestsRowChangeEventHandler DashboardInProgressServiceRequestsRowDeleting;
            
            public event DashboardInProgressServiceRequestsRowChangeEventHandler DashboardInProgressServiceRequestsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDashboardInProgressServiceRequestsRow(DashboardInProgressServiceRequestsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardInProgressServiceRequestsRow AddDashboardInProgressServiceRequestsRow(int ServiceID, string InProgressServicesCompleteName, bool Selected, string State, string ServiceDescription) {
                DashboardInProgressServiceRequestsRow rowDashboardInProgressServiceRequestsRow = ((DashboardInProgressServiceRequestsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ServiceID,
                        InProgressServicesCompleteName,
                        Selected,
                        State,
                        ServiceDescription};
                rowDashboardInProgressServiceRequestsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDashboardInProgressServiceRequestsRow);
                return rowDashboardInProgressServiceRequestsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardInProgressServiceRequestsRow FindByServiceID(int ServiceID) {
                return ((DashboardInProgressServiceRequestsRow)(this.Rows.Find(new object[] {
                            ServiceID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DashboardInProgressServiceRequestsDataTable cln = ((DashboardInProgressServiceRequestsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DashboardInProgressServiceRequestsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnServiceID = base.Columns["ServiceID"];
                this.columnInProgressServicesCompleteName = base.Columns["InProgressServicesCompleteName"];
                this.columnSelected = base.Columns["Selected"];
                this.columnState = base.Columns["State"];
                this.columnServiceDescription = base.Columns["ServiceDescription"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnServiceID = new global::System.Data.DataColumn("ServiceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceID);
                this.columnInProgressServicesCompleteName = new global::System.Data.DataColumn("InProgressServicesCompleteName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInProgressServicesCompleteName);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnServiceDescription = new global::System.Data.DataColumn("ServiceDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceDescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnServiceID}, true));
                this.columnServiceID.AllowDBNull = false;
                this.columnServiceID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardInProgressServiceRequestsRow NewDashboardInProgressServiceRequestsRow() {
                return ((DashboardInProgressServiceRequestsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DashboardInProgressServiceRequestsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DashboardInProgressServiceRequestsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DashboardInProgressServiceRequestsRowChanged != null)) {
                    this.DashboardInProgressServiceRequestsRowChanged(this, new DashboardInProgressServiceRequestsRowChangeEvent(((DashboardInProgressServiceRequestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DashboardInProgressServiceRequestsRowChanging != null)) {
                    this.DashboardInProgressServiceRequestsRowChanging(this, new DashboardInProgressServiceRequestsRowChangeEvent(((DashboardInProgressServiceRequestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DashboardInProgressServiceRequestsRowDeleted != null)) {
                    this.DashboardInProgressServiceRequestsRowDeleted(this, new DashboardInProgressServiceRequestsRowChangeEvent(((DashboardInProgressServiceRequestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DashboardInProgressServiceRequestsRowDeleting != null)) {
                    this.DashboardInProgressServiceRequestsRowDeleting(this, new DashboardInProgressServiceRequestsRowChangeEvent(((DashboardInProgressServiceRequestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDashboardInProgressServiceRequestsRow(DashboardInProgressServiceRequestsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DashboardTDS ds = new DashboardTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DashboardInProgressServiceRequestsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DashboardChecklistAlarmsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnRuleID;
            
            private global::System.Data.DataColumn columnChecklistAlarmsCompleteName;
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnState;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardChecklistAlarmsDataTable() {
                this.TableName = "DashboardChecklistAlarms";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DashboardChecklistAlarmsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DashboardChecklistAlarmsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RuleIDColumn {
                get {
                    return this.columnRuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChecklistAlarmsCompleteNameColumn {
                get {
                    return this.columnChecklistAlarmsCompleteName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardChecklistAlarmsRow this[int index] {
                get {
                    return ((DashboardChecklistAlarmsRow)(this.Rows[index]));
                }
            }
            
            public event DashboardChecklistAlarmsRowChangeEventHandler DashboardChecklistAlarmsRowChanging;
            
            public event DashboardChecklistAlarmsRowChangeEventHandler DashboardChecklistAlarmsRowChanged;
            
            public event DashboardChecklistAlarmsRowChangeEventHandler DashboardChecklistAlarmsRowDeleting;
            
            public event DashboardChecklistAlarmsRowChangeEventHandler DashboardChecklistAlarmsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDashboardChecklistAlarmsRow(DashboardChecklistAlarmsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardChecklistAlarmsRow AddDashboardChecklistAlarmsRow(int UnitID, int RuleID, string ChecklistAlarmsCompleteName, bool Selected, string State) {
                DashboardChecklistAlarmsRow rowDashboardChecklistAlarmsRow = ((DashboardChecklistAlarmsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UnitID,
                        RuleID,
                        ChecklistAlarmsCompleteName,
                        Selected,
                        State};
                rowDashboardChecklistAlarmsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDashboardChecklistAlarmsRow);
                return rowDashboardChecklistAlarmsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardChecklistAlarmsRow FindByUnitIDRuleID(int UnitID, int RuleID) {
                return ((DashboardChecklistAlarmsRow)(this.Rows.Find(new object[] {
                            UnitID,
                            RuleID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DashboardChecklistAlarmsDataTable cln = ((DashboardChecklistAlarmsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DashboardChecklistAlarmsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUnitID = base.Columns["UnitID"];
                this.columnRuleID = base.Columns["RuleID"];
                this.columnChecklistAlarmsCompleteName = base.Columns["ChecklistAlarmsCompleteName"];
                this.columnSelected = base.Columns["Selected"];
                this.columnState = base.Columns["State"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnRuleID = new global::System.Data.DataColumn("RuleID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRuleID);
                this.columnChecklistAlarmsCompleteName = new global::System.Data.DataColumn("ChecklistAlarmsCompleteName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChecklistAlarmsCompleteName);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUnitID,
                                this.columnRuleID}, true));
                this.columnUnitID.AllowDBNull = false;
                this.columnRuleID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardChecklistAlarmsRow NewDashboardChecklistAlarmsRow() {
                return ((DashboardChecklistAlarmsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DashboardChecklistAlarmsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DashboardChecklistAlarmsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DashboardChecklistAlarmsRowChanged != null)) {
                    this.DashboardChecklistAlarmsRowChanged(this, new DashboardChecklistAlarmsRowChangeEvent(((DashboardChecklistAlarmsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DashboardChecklistAlarmsRowChanging != null)) {
                    this.DashboardChecklistAlarmsRowChanging(this, new DashboardChecklistAlarmsRowChangeEvent(((DashboardChecklistAlarmsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DashboardChecklistAlarmsRowDeleted != null)) {
                    this.DashboardChecklistAlarmsRowDeleted(this, new DashboardChecklistAlarmsRowChangeEvent(((DashboardChecklistAlarmsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DashboardChecklistAlarmsRowDeleting != null)) {
                    this.DashboardChecklistAlarmsRowDeleting(this, new DashboardChecklistAlarmsRowChangeEvent(((DashboardChecklistAlarmsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDashboardChecklistAlarmsRow(DashboardChecklistAlarmsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DashboardTDS ds = new DashboardTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DashboardChecklistAlarmsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DashboardMyToDoListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnToDoID;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnLastComment;
            
            private global::System.Data.DataColumn columnUnitCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMyToDoListDataTable() {
                this.TableName = "DashboardMyToDoList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DashboardMyToDoListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DashboardMyToDoListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToDoIDColumn {
                get {
                    return this.columnToDoID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastCommentColumn {
                get {
                    return this.columnLastComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitCodeColumn {
                get {
                    return this.columnUnitCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMyToDoListRow this[int index] {
                get {
                    return ((DashboardMyToDoListRow)(this.Rows[index]));
                }
            }
            
            public event DashboardMyToDoListRowChangeEventHandler DashboardMyToDoListRowChanging;
            
            public event DashboardMyToDoListRowChangeEventHandler DashboardMyToDoListRowChanged;
            
            public event DashboardMyToDoListRowChangeEventHandler DashboardMyToDoListRowDeleting;
            
            public event DashboardMyToDoListRowChangeEventHandler DashboardMyToDoListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDashboardMyToDoListRow(DashboardMyToDoListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMyToDoListRow AddDashboardMyToDoListRow(int ToDoID, string Subject, bool Selected, string State, string LastComment, string UnitCode) {
                DashboardMyToDoListRow rowDashboardMyToDoListRow = ((DashboardMyToDoListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ToDoID,
                        Subject,
                        Selected,
                        State,
                        LastComment,
                        UnitCode};
                rowDashboardMyToDoListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDashboardMyToDoListRow);
                return rowDashboardMyToDoListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMyToDoListRow FindByToDoID(int ToDoID) {
                return ((DashboardMyToDoListRow)(this.Rows.Find(new object[] {
                            ToDoID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DashboardMyToDoListDataTable cln = ((DashboardMyToDoListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DashboardMyToDoListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnToDoID = base.Columns["ToDoID"];
                this.columnSubject = base.Columns["Subject"];
                this.columnSelected = base.Columns["Selected"];
                this.columnState = base.Columns["State"];
                this.columnLastComment = base.Columns["LastComment"];
                this.columnUnitCode = base.Columns["UnitCode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnToDoID = new global::System.Data.DataColumn("ToDoID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToDoID);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnLastComment = new global::System.Data.DataColumn("LastComment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastComment);
                this.columnUnitCode = new global::System.Data.DataColumn("UnitCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitCode);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnToDoID}, true));
                this.columnToDoID.AllowDBNull = false;
                this.columnToDoID.Unique = true;
                this.columnToDoID.Caption = "ServiceID";
                this.columnSubject.Caption = "MyServicesCompleteName";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMyToDoListRow NewDashboardMyToDoListRow() {
                return ((DashboardMyToDoListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DashboardMyToDoListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DashboardMyToDoListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DashboardMyToDoListRowChanged != null)) {
                    this.DashboardMyToDoListRowChanged(this, new DashboardMyToDoListRowChangeEvent(((DashboardMyToDoListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DashboardMyToDoListRowChanging != null)) {
                    this.DashboardMyToDoListRowChanging(this, new DashboardMyToDoListRowChangeEvent(((DashboardMyToDoListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DashboardMyToDoListRowDeleted != null)) {
                    this.DashboardMyToDoListRowDeleted(this, new DashboardMyToDoListRowChangeEvent(((DashboardMyToDoListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DashboardMyToDoListRowDeleting != null)) {
                    this.DashboardMyToDoListRowDeleting(this, new DashboardMyToDoListRowChangeEvent(((DashboardMyToDoListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDashboardMyToDoListRow(DashboardMyToDoListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DashboardTDS ds = new DashboardTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DashboardMyToDoListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DashboardMyToDoListOnHoldDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnToDoID;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnLastComment;
            
            private global::System.Data.DataColumn columnUnitcode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMyToDoListOnHoldDataTable() {
                this.TableName = "DashboardMyToDoListOnHold";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DashboardMyToDoListOnHoldDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DashboardMyToDoListOnHoldDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToDoIDColumn {
                get {
                    return this.columnToDoID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastCommentColumn {
                get {
                    return this.columnLastComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitcodeColumn {
                get {
                    return this.columnUnitcode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMyToDoListOnHoldRow this[int index] {
                get {
                    return ((DashboardMyToDoListOnHoldRow)(this.Rows[index]));
                }
            }
            
            public event DashboardMyToDoListOnHoldRowChangeEventHandler DashboardMyToDoListOnHoldRowChanging;
            
            public event DashboardMyToDoListOnHoldRowChangeEventHandler DashboardMyToDoListOnHoldRowChanged;
            
            public event DashboardMyToDoListOnHoldRowChangeEventHandler DashboardMyToDoListOnHoldRowDeleting;
            
            public event DashboardMyToDoListOnHoldRowChangeEventHandler DashboardMyToDoListOnHoldRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDashboardMyToDoListOnHoldRow(DashboardMyToDoListOnHoldRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMyToDoListOnHoldRow AddDashboardMyToDoListOnHoldRow(int ToDoID, string Subject, bool Selected, string State, string LastComment, string Unitcode) {
                DashboardMyToDoListOnHoldRow rowDashboardMyToDoListOnHoldRow = ((DashboardMyToDoListOnHoldRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ToDoID,
                        Subject,
                        Selected,
                        State,
                        LastComment,
                        Unitcode};
                rowDashboardMyToDoListOnHoldRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDashboardMyToDoListOnHoldRow);
                return rowDashboardMyToDoListOnHoldRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMyToDoListOnHoldRow FindByToDoID(int ToDoID) {
                return ((DashboardMyToDoListOnHoldRow)(this.Rows.Find(new object[] {
                            ToDoID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DashboardMyToDoListOnHoldDataTable cln = ((DashboardMyToDoListOnHoldDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DashboardMyToDoListOnHoldDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnToDoID = base.Columns["ToDoID"];
                this.columnSubject = base.Columns["Subject"];
                this.columnSelected = base.Columns["Selected"];
                this.columnState = base.Columns["State"];
                this.columnLastComment = base.Columns["LastComment"];
                this.columnUnitcode = base.Columns["Unitcode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnToDoID = new global::System.Data.DataColumn("ToDoID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToDoID);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnLastComment = new global::System.Data.DataColumn("LastComment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastComment);
                this.columnUnitcode = new global::System.Data.DataColumn("Unitcode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitcode);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnToDoID}, true));
                this.columnToDoID.AllowDBNull = false;
                this.columnToDoID.Unique = true;
                this.columnToDoID.Caption = "ServiceID";
                this.columnSubject.Caption = "MyServicesCompleteName";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMyToDoListOnHoldRow NewDashboardMyToDoListOnHoldRow() {
                return ((DashboardMyToDoListOnHoldRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DashboardMyToDoListOnHoldRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DashboardMyToDoListOnHoldRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DashboardMyToDoListOnHoldRowChanged != null)) {
                    this.DashboardMyToDoListOnHoldRowChanged(this, new DashboardMyToDoListOnHoldRowChangeEvent(((DashboardMyToDoListOnHoldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DashboardMyToDoListOnHoldRowChanging != null)) {
                    this.DashboardMyToDoListOnHoldRowChanging(this, new DashboardMyToDoListOnHoldRowChangeEvent(((DashboardMyToDoListOnHoldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DashboardMyToDoListOnHoldRowDeleted != null)) {
                    this.DashboardMyToDoListOnHoldRowDeleted(this, new DashboardMyToDoListOnHoldRowChangeEvent(((DashboardMyToDoListOnHoldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DashboardMyToDoListOnHoldRowDeleting != null)) {
                    this.DashboardMyToDoListOnHoldRowDeleting(this, new DashboardMyToDoListOnHoldRowChangeEvent(((DashboardMyToDoListOnHoldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDashboardMyToDoListOnHoldRow(DashboardMyToDoListOnHoldRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DashboardTDS ds = new DashboardTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DashboardMyToDoListOnHoldDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DashboardToDoListAssignedToMeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnToDoID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnLastComment;
            
            private global::System.Data.DataColumn columnUnitCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardToDoListAssignedToMeDataTable() {
                this.TableName = "DashboardToDoListAssignedToMe";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DashboardToDoListAssignedToMeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DashboardToDoListAssignedToMeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToDoIDColumn {
                get {
                    return this.columnToDoID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastCommentColumn {
                get {
                    return this.columnLastComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitCodeColumn {
                get {
                    return this.columnUnitCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardToDoListAssignedToMeRow this[int index] {
                get {
                    return ((DashboardToDoListAssignedToMeRow)(this.Rows[index]));
                }
            }
            
            public event DashboardToDoListAssignedToMeRowChangeEventHandler DashboardToDoListAssignedToMeRowChanging;
            
            public event DashboardToDoListAssignedToMeRowChangeEventHandler DashboardToDoListAssignedToMeRowChanged;
            
            public event DashboardToDoListAssignedToMeRowChangeEventHandler DashboardToDoListAssignedToMeRowDeleting;
            
            public event DashboardToDoListAssignedToMeRowChangeEventHandler DashboardToDoListAssignedToMeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDashboardToDoListAssignedToMeRow(DashboardToDoListAssignedToMeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardToDoListAssignedToMeRow AddDashboardToDoListAssignedToMeRow(int ToDoID, int RefID, string Subject, bool Selected, string State, string LastComment, string UnitCode) {
                DashboardToDoListAssignedToMeRow rowDashboardToDoListAssignedToMeRow = ((DashboardToDoListAssignedToMeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ToDoID,
                        RefID,
                        Subject,
                        Selected,
                        State,
                        LastComment,
                        UnitCode};
                rowDashboardToDoListAssignedToMeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDashboardToDoListAssignedToMeRow);
                return rowDashboardToDoListAssignedToMeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardToDoListAssignedToMeRow FindByRefIDToDoID(int RefID, int ToDoID) {
                return ((DashboardToDoListAssignedToMeRow)(this.Rows.Find(new object[] {
                            RefID,
                            ToDoID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DashboardToDoListAssignedToMeDataTable cln = ((DashboardToDoListAssignedToMeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DashboardToDoListAssignedToMeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnToDoID = base.Columns["ToDoID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnSubject = base.Columns["Subject"];
                this.columnSelected = base.Columns["Selected"];
                this.columnState = base.Columns["State"];
                this.columnLastComment = base.Columns["LastComment"];
                this.columnUnitCode = base.Columns["UnitCode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnToDoID = new global::System.Data.DataColumn("ToDoID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToDoID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnLastComment = new global::System.Data.DataColumn("LastComment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastComment);
                this.columnUnitCode = new global::System.Data.DataColumn("UnitCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitCode);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRefID,
                                this.columnToDoID}, true));
                this.columnToDoID.AllowDBNull = false;
                this.columnToDoID.Caption = "ServiceID";
                this.columnRefID.AllowDBNull = false;
                this.columnSubject.Caption = "MyServicesCompleteName";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardToDoListAssignedToMeRow NewDashboardToDoListAssignedToMeRow() {
                return ((DashboardToDoListAssignedToMeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DashboardToDoListAssignedToMeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DashboardToDoListAssignedToMeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DashboardToDoListAssignedToMeRowChanged != null)) {
                    this.DashboardToDoListAssignedToMeRowChanged(this, new DashboardToDoListAssignedToMeRowChangeEvent(((DashboardToDoListAssignedToMeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DashboardToDoListAssignedToMeRowChanging != null)) {
                    this.DashboardToDoListAssignedToMeRowChanging(this, new DashboardToDoListAssignedToMeRowChangeEvent(((DashboardToDoListAssignedToMeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DashboardToDoListAssignedToMeRowDeleted != null)) {
                    this.DashboardToDoListAssignedToMeRowDeleted(this, new DashboardToDoListAssignedToMeRowChangeEvent(((DashboardToDoListAssignedToMeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DashboardToDoListAssignedToMeRowDeleting != null)) {
                    this.DashboardToDoListAssignedToMeRowDeleting(this, new DashboardToDoListAssignedToMeRowChangeEvent(((DashboardToDoListAssignedToMeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDashboardToDoListAssignedToMeRow(DashboardToDoListAssignedToMeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DashboardTDS ds = new DashboardTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DashboardToDoListAssignedToMeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DashboardToDoListAssignedToMeOnHoldDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnToDoID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnLastComment;
            
            private global::System.Data.DataColumn columnUnitCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardToDoListAssignedToMeOnHoldDataTable() {
                this.TableName = "DashboardToDoListAssignedToMeOnHold";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DashboardToDoListAssignedToMeOnHoldDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DashboardToDoListAssignedToMeOnHoldDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToDoIDColumn {
                get {
                    return this.columnToDoID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastCommentColumn {
                get {
                    return this.columnLastComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitCodeColumn {
                get {
                    return this.columnUnitCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardToDoListAssignedToMeOnHoldRow this[int index] {
                get {
                    return ((DashboardToDoListAssignedToMeOnHoldRow)(this.Rows[index]));
                }
            }
            
            public event DashboardToDoListAssignedToMeOnHoldRowChangeEventHandler DashboardToDoListAssignedToMeOnHoldRowChanging;
            
            public event DashboardToDoListAssignedToMeOnHoldRowChangeEventHandler DashboardToDoListAssignedToMeOnHoldRowChanged;
            
            public event DashboardToDoListAssignedToMeOnHoldRowChangeEventHandler DashboardToDoListAssignedToMeOnHoldRowDeleting;
            
            public event DashboardToDoListAssignedToMeOnHoldRowChangeEventHandler DashboardToDoListAssignedToMeOnHoldRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDashboardToDoListAssignedToMeOnHoldRow(DashboardToDoListAssignedToMeOnHoldRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardToDoListAssignedToMeOnHoldRow AddDashboardToDoListAssignedToMeOnHoldRow(int ToDoID, int RefID, string Subject, bool Selected, string State, string LastComment, string UnitCode) {
                DashboardToDoListAssignedToMeOnHoldRow rowDashboardToDoListAssignedToMeOnHoldRow = ((DashboardToDoListAssignedToMeOnHoldRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ToDoID,
                        RefID,
                        Subject,
                        Selected,
                        State,
                        LastComment,
                        UnitCode};
                rowDashboardToDoListAssignedToMeOnHoldRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDashboardToDoListAssignedToMeOnHoldRow);
                return rowDashboardToDoListAssignedToMeOnHoldRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardToDoListAssignedToMeOnHoldRow FindByRefIDToDoID(int RefID, int ToDoID) {
                return ((DashboardToDoListAssignedToMeOnHoldRow)(this.Rows.Find(new object[] {
                            RefID,
                            ToDoID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DashboardToDoListAssignedToMeOnHoldDataTable cln = ((DashboardToDoListAssignedToMeOnHoldDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DashboardToDoListAssignedToMeOnHoldDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnToDoID = base.Columns["ToDoID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnSubject = base.Columns["Subject"];
                this.columnSelected = base.Columns["Selected"];
                this.columnState = base.Columns["State"];
                this.columnLastComment = base.Columns["LastComment"];
                this.columnUnitCode = base.Columns["UnitCode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnToDoID = new global::System.Data.DataColumn("ToDoID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToDoID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnLastComment = new global::System.Data.DataColumn("LastComment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastComment);
                this.columnUnitCode = new global::System.Data.DataColumn("UnitCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitCode);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRefID,
                                this.columnToDoID}, true));
                this.columnToDoID.AllowDBNull = false;
                this.columnToDoID.Caption = "ServiceID";
                this.columnRefID.AllowDBNull = false;
                this.columnSubject.Caption = "MyServicesCompleteName";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardToDoListAssignedToMeOnHoldRow NewDashboardToDoListAssignedToMeOnHoldRow() {
                return ((DashboardToDoListAssignedToMeOnHoldRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DashboardToDoListAssignedToMeOnHoldRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DashboardToDoListAssignedToMeOnHoldRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DashboardToDoListAssignedToMeOnHoldRowChanged != null)) {
                    this.DashboardToDoListAssignedToMeOnHoldRowChanged(this, new DashboardToDoListAssignedToMeOnHoldRowChangeEvent(((DashboardToDoListAssignedToMeOnHoldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DashboardToDoListAssignedToMeOnHoldRowChanging != null)) {
                    this.DashboardToDoListAssignedToMeOnHoldRowChanging(this, new DashboardToDoListAssignedToMeOnHoldRowChangeEvent(((DashboardToDoListAssignedToMeOnHoldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DashboardToDoListAssignedToMeOnHoldRowDeleted != null)) {
                    this.DashboardToDoListAssignedToMeOnHoldRowDeleted(this, new DashboardToDoListAssignedToMeOnHoldRowChangeEvent(((DashboardToDoListAssignedToMeOnHoldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DashboardToDoListAssignedToMeOnHoldRowDeleting != null)) {
                    this.DashboardToDoListAssignedToMeOnHoldRowDeleting(this, new DashboardToDoListAssignedToMeOnHoldRowChangeEvent(((DashboardToDoListAssignedToMeOnHoldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDashboardToDoListAssignedToMeOnHoldRow(DashboardToDoListAssignedToMeOnHoldRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DashboardTDS ds = new DashboardTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DashboardToDoListAssignedToMeOnHoldDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DashboardUnassignedServiceRequestsRow : global::System.Data.DataRow {
            
            private DashboardUnassignedServiceRequestsDataTable tableDashboardUnassignedServiceRequests;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DashboardUnassignedServiceRequestsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDashboardUnassignedServiceRequests = ((DashboardUnassignedServiceRequestsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServiceID {
                get {
                    return ((int)(this[this.tableDashboardUnassignedServiceRequests.ServiceIDColumn]));
                }
                set {
                    this[this.tableDashboardUnassignedServiceRequests.ServiceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnassignedServicesCompleteName {
                get {
                    try {
                        return ((string)(this[this.tableDashboardUnassignedServiceRequests.UnassignedServicesCompleteNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnassignedServicesCompleteName\' in table \'DashboardUnassign" +
                                "edServiceRequests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardUnassignedServiceRequests.UnassignedServicesCompleteNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableDashboardUnassignedServiceRequests.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'DashboardUnassignedServiceRequests\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardUnassignedServiceRequests.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServiceDescription {
                get {
                    try {
                        return ((string)(this[this.tableDashboardUnassignedServiceRequests.ServiceDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ServiceDescription\' in table \'DashboardUnassignedServiceReq" +
                                "uests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardUnassignedServiceRequests.ServiceDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnassignedServicesCompleteNameNull() {
                return this.IsNull(this.tableDashboardUnassignedServiceRequests.UnassignedServicesCompleteNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnassignedServicesCompleteNameNull() {
                this[this.tableDashboardUnassignedServiceRequests.UnassignedServicesCompleteNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableDashboardUnassignedServiceRequests.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableDashboardUnassignedServiceRequests.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServiceDescriptionNull() {
                return this.IsNull(this.tableDashboardUnassignedServiceRequests.ServiceDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServiceDescriptionNull() {
                this[this.tableDashboardUnassignedServiceRequests.ServiceDescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DashboardExpiredServiceRequestsRow : global::System.Data.DataRow {
            
            private DashboardExpiredServiceRequestsDataTable tableDashboardExpiredServiceRequests;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DashboardExpiredServiceRequestsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDashboardExpiredServiceRequests = ((DashboardExpiredServiceRequestsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServiceID {
                get {
                    return ((int)(this[this.tableDashboardExpiredServiceRequests.ServiceIDColumn]));
                }
                set {
                    this[this.tableDashboardExpiredServiceRequests.ServiceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExpiredServicesCompleteName {
                get {
                    try {
                        return ((string)(this[this.tableDashboardExpiredServiceRequests.ExpiredServicesCompleteNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExpiredServicesCompleteName\' in table \'DashboardExpiredServ" +
                                "iceRequests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardExpiredServiceRequests.ExpiredServicesCompleteNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableDashboardExpiredServiceRequests.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'DashboardExpiredServiceRequests\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableDashboardExpiredServiceRequests.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServiceDescription {
                get {
                    try {
                        return ((string)(this[this.tableDashboardExpiredServiceRequests.ServiceDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ServiceDescription\' in table \'DashboardExpiredServiceReques" +
                                "ts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardExpiredServiceRequests.ServiceDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExpiredServicesCompleteNameNull() {
                return this.IsNull(this.tableDashboardExpiredServiceRequests.ExpiredServicesCompleteNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExpiredServicesCompleteNameNull() {
                this[this.tableDashboardExpiredServiceRequests.ExpiredServicesCompleteNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableDashboardExpiredServiceRequests.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableDashboardExpiredServiceRequests.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServiceDescriptionNull() {
                return this.IsNull(this.tableDashboardExpiredServiceRequests.ServiceDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServiceDescriptionNull() {
                this[this.tableDashboardExpiredServiceRequests.ServiceDescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DashboardItemsAboutToExpireRow : global::System.Data.DataRow {
            
            private DashboardItemsAboutToExpireDataTable tableDashboardItemsAboutToExpire;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DashboardItemsAboutToExpireRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDashboardItemsAboutToExpire = ((DashboardItemsAboutToExpireDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServiceID {
                get {
                    return ((int)(this[this.tableDashboardItemsAboutToExpire.ServiceIDColumn]));
                }
                set {
                    this[this.tableDashboardItemsAboutToExpire.ServiceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemsAboutToExpireCompleteName {
                get {
                    try {
                        return ((string)(this[this.tableDashboardItemsAboutToExpire.ItemsAboutToExpireCompleteNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemsAboutToExpireCompleteName\' in table \'DashboardItemsAbo" +
                                "utToExpire\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardItemsAboutToExpire.ItemsAboutToExpireCompleteNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableDashboardItemsAboutToExpire.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'DashboardItemsAboutToExpire\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableDashboardItemsAboutToExpire.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServiceDescription {
                get {
                    try {
                        return ((string)(this[this.tableDashboardItemsAboutToExpire.ServiceDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ServiceDescription\' in table \'DashboardItemsAboutToExpire\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardItemsAboutToExpire.ServiceDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemsAboutToExpireCompleteNameNull() {
                return this.IsNull(this.tableDashboardItemsAboutToExpire.ItemsAboutToExpireCompleteNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemsAboutToExpireCompleteNameNull() {
                this[this.tableDashboardItemsAboutToExpire.ItemsAboutToExpireCompleteNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableDashboardItemsAboutToExpire.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableDashboardItemsAboutToExpire.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServiceDescriptionNull() {
                return this.IsNull(this.tableDashboardItemsAboutToExpire.ServiceDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServiceDescriptionNull() {
                this[this.tableDashboardItemsAboutToExpire.ServiceDescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DashboardMyServiceRequestsRow : global::System.Data.DataRow {
            
            private DashboardMyServiceRequestsDataTable tableDashboardMyServiceRequests;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DashboardMyServiceRequestsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDashboardMyServiceRequests = ((DashboardMyServiceRequestsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServiceID {
                get {
                    return ((int)(this[this.tableDashboardMyServiceRequests.ServiceIDColumn]));
                }
                set {
                    this[this.tableDashboardMyServiceRequests.ServiceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MyServicesCompleteName {
                get {
                    try {
                        return ((string)(this[this.tableDashboardMyServiceRequests.MyServicesCompleteNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MyServicesCompleteName\' in table \'DashboardMyServiceRequest" +
                                "s\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardMyServiceRequests.MyServicesCompleteNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableDashboardMyServiceRequests.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'DashboardMyServiceRequests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardMyServiceRequests.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableDashboardMyServiceRequests.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'DashboardMyServiceRequests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardMyServiceRequests.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServiceDescription {
                get {
                    try {
                        return ((string)(this[this.tableDashboardMyServiceRequests.ServiceDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ServiceDescription\' in table \'DashboardMyServiceRequests\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardMyServiceRequests.ServiceDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMyServicesCompleteNameNull() {
                return this.IsNull(this.tableDashboardMyServiceRequests.MyServicesCompleteNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMyServicesCompleteNameNull() {
                this[this.tableDashboardMyServiceRequests.MyServicesCompleteNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableDashboardMyServiceRequests.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableDashboardMyServiceRequests.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableDashboardMyServiceRequests.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableDashboardMyServiceRequests.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServiceDescriptionNull() {
                return this.IsNull(this.tableDashboardMyServiceRequests.ServiceDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServiceDescriptionNull() {
                this[this.tableDashboardMyServiceRequests.ServiceDescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DashboardInProgressServiceRequestsRow : global::System.Data.DataRow {
            
            private DashboardInProgressServiceRequestsDataTable tableDashboardInProgressServiceRequests;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DashboardInProgressServiceRequestsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDashboardInProgressServiceRequests = ((DashboardInProgressServiceRequestsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServiceID {
                get {
                    return ((int)(this[this.tableDashboardInProgressServiceRequests.ServiceIDColumn]));
                }
                set {
                    this[this.tableDashboardInProgressServiceRequests.ServiceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InProgressServicesCompleteName {
                get {
                    try {
                        return ((string)(this[this.tableDashboardInProgressServiceRequests.InProgressServicesCompleteNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InProgressServicesCompleteName\' in table \'DashboardInProgre" +
                                "ssServiceRequests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardInProgressServiceRequests.InProgressServicesCompleteNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableDashboardInProgressServiceRequests.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'DashboardInProgressServiceRequests\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardInProgressServiceRequests.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableDashboardInProgressServiceRequests.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'DashboardInProgressServiceRequests\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableDashboardInProgressServiceRequests.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServiceDescription {
                get {
                    try {
                        return ((string)(this[this.tableDashboardInProgressServiceRequests.ServiceDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ServiceDescription\' in table \'DashboardInProgressServiceReq" +
                                "uests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardInProgressServiceRequests.ServiceDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInProgressServicesCompleteNameNull() {
                return this.IsNull(this.tableDashboardInProgressServiceRequests.InProgressServicesCompleteNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInProgressServicesCompleteNameNull() {
                this[this.tableDashboardInProgressServiceRequests.InProgressServicesCompleteNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableDashboardInProgressServiceRequests.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableDashboardInProgressServiceRequests.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableDashboardInProgressServiceRequests.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableDashboardInProgressServiceRequests.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServiceDescriptionNull() {
                return this.IsNull(this.tableDashboardInProgressServiceRequests.ServiceDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServiceDescriptionNull() {
                this[this.tableDashboardInProgressServiceRequests.ServiceDescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DashboardChecklistAlarmsRow : global::System.Data.DataRow {
            
            private DashboardChecklistAlarmsDataTable tableDashboardChecklistAlarms;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DashboardChecklistAlarmsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDashboardChecklistAlarms = ((DashboardChecklistAlarmsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    return ((int)(this[this.tableDashboardChecklistAlarms.UnitIDColumn]));
                }
                set {
                    this[this.tableDashboardChecklistAlarms.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RuleID {
                get {
                    return ((int)(this[this.tableDashboardChecklistAlarms.RuleIDColumn]));
                }
                set {
                    this[this.tableDashboardChecklistAlarms.RuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChecklistAlarmsCompleteName {
                get {
                    try {
                        return ((string)(this[this.tableDashboardChecklistAlarms.ChecklistAlarmsCompleteNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChecklistAlarmsCompleteName\' in table \'DashboardChecklistAl" +
                                "arms\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardChecklistAlarms.ChecklistAlarmsCompleteNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableDashboardChecklistAlarms.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'DashboardChecklistAlarms\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardChecklistAlarms.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableDashboardChecklistAlarms.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'DashboardChecklistAlarms\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardChecklistAlarms.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChecklistAlarmsCompleteNameNull() {
                return this.IsNull(this.tableDashboardChecklistAlarms.ChecklistAlarmsCompleteNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChecklistAlarmsCompleteNameNull() {
                this[this.tableDashboardChecklistAlarms.ChecklistAlarmsCompleteNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableDashboardChecklistAlarms.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableDashboardChecklistAlarms.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableDashboardChecklistAlarms.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableDashboardChecklistAlarms.StateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DashboardMyToDoListRow : global::System.Data.DataRow {
            
            private DashboardMyToDoListDataTable tableDashboardMyToDoList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DashboardMyToDoListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDashboardMyToDoList = ((DashboardMyToDoListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToDoID {
                get {
                    return ((int)(this[this.tableDashboardMyToDoList.ToDoIDColumn]));
                }
                set {
                    this[this.tableDashboardMyToDoList.ToDoIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableDashboardMyToDoList.SubjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Subject\' in table \'DashboardMyToDoList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardMyToDoList.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableDashboardMyToDoList.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'DashboardMyToDoList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardMyToDoList.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableDashboardMyToDoList.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'DashboardMyToDoList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardMyToDoList.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastComment {
                get {
                    try {
                        return ((string)(this[this.tableDashboardMyToDoList.LastCommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastComment\' in table \'DashboardMyToDoList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardMyToDoList.LastCommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitCode {
                get {
                    try {
                        return ((string)(this[this.tableDashboardMyToDoList.UnitCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitCode\' in table \'DashboardMyToDoList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardMyToDoList.UnitCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectNull() {
                return this.IsNull(this.tableDashboardMyToDoList.SubjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectNull() {
                this[this.tableDashboardMyToDoList.SubjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableDashboardMyToDoList.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableDashboardMyToDoList.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableDashboardMyToDoList.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableDashboardMyToDoList.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastCommentNull() {
                return this.IsNull(this.tableDashboardMyToDoList.LastCommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastCommentNull() {
                this[this.tableDashboardMyToDoList.LastCommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitCodeNull() {
                return this.IsNull(this.tableDashboardMyToDoList.UnitCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitCodeNull() {
                this[this.tableDashboardMyToDoList.UnitCodeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DashboardMyToDoListOnHoldRow : global::System.Data.DataRow {
            
            private DashboardMyToDoListOnHoldDataTable tableDashboardMyToDoListOnHold;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DashboardMyToDoListOnHoldRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDashboardMyToDoListOnHold = ((DashboardMyToDoListOnHoldDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToDoID {
                get {
                    return ((int)(this[this.tableDashboardMyToDoListOnHold.ToDoIDColumn]));
                }
                set {
                    this[this.tableDashboardMyToDoListOnHold.ToDoIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableDashboardMyToDoListOnHold.SubjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Subject\' in table \'DashboardMyToDoListOnHold\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardMyToDoListOnHold.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableDashboardMyToDoListOnHold.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'DashboardMyToDoListOnHold\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardMyToDoListOnHold.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableDashboardMyToDoListOnHold.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'DashboardMyToDoListOnHold\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardMyToDoListOnHold.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastComment {
                get {
                    try {
                        return ((string)(this[this.tableDashboardMyToDoListOnHold.LastCommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastComment\' in table \'DashboardMyToDoListOnHold\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableDashboardMyToDoListOnHold.LastCommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Unitcode {
                get {
                    try {
                        return ((string)(this[this.tableDashboardMyToDoListOnHold.UnitcodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Unitcode\' in table \'DashboardMyToDoListOnHold\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardMyToDoListOnHold.UnitcodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectNull() {
                return this.IsNull(this.tableDashboardMyToDoListOnHold.SubjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectNull() {
                this[this.tableDashboardMyToDoListOnHold.SubjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableDashboardMyToDoListOnHold.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableDashboardMyToDoListOnHold.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableDashboardMyToDoListOnHold.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableDashboardMyToDoListOnHold.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastCommentNull() {
                return this.IsNull(this.tableDashboardMyToDoListOnHold.LastCommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastCommentNull() {
                this[this.tableDashboardMyToDoListOnHold.LastCommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitcodeNull() {
                return this.IsNull(this.tableDashboardMyToDoListOnHold.UnitcodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitcodeNull() {
                this[this.tableDashboardMyToDoListOnHold.UnitcodeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DashboardToDoListAssignedToMeRow : global::System.Data.DataRow {
            
            private DashboardToDoListAssignedToMeDataTable tableDashboardToDoListAssignedToMe;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DashboardToDoListAssignedToMeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDashboardToDoListAssignedToMe = ((DashboardToDoListAssignedToMeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToDoID {
                get {
                    return ((int)(this[this.tableDashboardToDoListAssignedToMe.ToDoIDColumn]));
                }
                set {
                    this[this.tableDashboardToDoListAssignedToMe.ToDoIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableDashboardToDoListAssignedToMe.RefIDColumn]));
                }
                set {
                    this[this.tableDashboardToDoListAssignedToMe.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableDashboardToDoListAssignedToMe.SubjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Subject\' in table \'DashboardToDoListAssignedToMe\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableDashboardToDoListAssignedToMe.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableDashboardToDoListAssignedToMe.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'DashboardToDoListAssignedToMe\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableDashboardToDoListAssignedToMe.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableDashboardToDoListAssignedToMe.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'DashboardToDoListAssignedToMe\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardToDoListAssignedToMe.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastComment {
                get {
                    try {
                        return ((string)(this[this.tableDashboardToDoListAssignedToMe.LastCommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastComment\' in table \'DashboardToDoListAssignedToMe\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableDashboardToDoListAssignedToMe.LastCommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitCode {
                get {
                    try {
                        return ((string)(this[this.tableDashboardToDoListAssignedToMe.UnitCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitCode\' in table \'DashboardToDoListAssignedToMe\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableDashboardToDoListAssignedToMe.UnitCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectNull() {
                return this.IsNull(this.tableDashboardToDoListAssignedToMe.SubjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectNull() {
                this[this.tableDashboardToDoListAssignedToMe.SubjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableDashboardToDoListAssignedToMe.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableDashboardToDoListAssignedToMe.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableDashboardToDoListAssignedToMe.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableDashboardToDoListAssignedToMe.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastCommentNull() {
                return this.IsNull(this.tableDashboardToDoListAssignedToMe.LastCommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastCommentNull() {
                this[this.tableDashboardToDoListAssignedToMe.LastCommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitCodeNull() {
                return this.IsNull(this.tableDashboardToDoListAssignedToMe.UnitCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitCodeNull() {
                this[this.tableDashboardToDoListAssignedToMe.UnitCodeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DashboardToDoListAssignedToMeOnHoldRow : global::System.Data.DataRow {
            
            private DashboardToDoListAssignedToMeOnHoldDataTable tableDashboardToDoListAssignedToMeOnHold;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DashboardToDoListAssignedToMeOnHoldRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDashboardToDoListAssignedToMeOnHold = ((DashboardToDoListAssignedToMeOnHoldDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToDoID {
                get {
                    return ((int)(this[this.tableDashboardToDoListAssignedToMeOnHold.ToDoIDColumn]));
                }
                set {
                    this[this.tableDashboardToDoListAssignedToMeOnHold.ToDoIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableDashboardToDoListAssignedToMeOnHold.RefIDColumn]));
                }
                set {
                    this[this.tableDashboardToDoListAssignedToMeOnHold.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableDashboardToDoListAssignedToMeOnHold.SubjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Subject\' in table \'DashboardToDoListAssignedToMeOnHold\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardToDoListAssignedToMeOnHold.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableDashboardToDoListAssignedToMeOnHold.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'DashboardToDoListAssignedToMeOnHold\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardToDoListAssignedToMeOnHold.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableDashboardToDoListAssignedToMeOnHold.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'DashboardToDoListAssignedToMeOnHold\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableDashboardToDoListAssignedToMeOnHold.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastComment {
                get {
                    try {
                        return ((string)(this[this.tableDashboardToDoListAssignedToMeOnHold.LastCommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastComment\' in table \'DashboardToDoListAssignedToMeOnHold\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardToDoListAssignedToMeOnHold.LastCommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitCode {
                get {
                    try {
                        return ((string)(this[this.tableDashboardToDoListAssignedToMeOnHold.UnitCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitCode\' in table \'DashboardToDoListAssignedToMeOnHold\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardToDoListAssignedToMeOnHold.UnitCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectNull() {
                return this.IsNull(this.tableDashboardToDoListAssignedToMeOnHold.SubjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectNull() {
                this[this.tableDashboardToDoListAssignedToMeOnHold.SubjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableDashboardToDoListAssignedToMeOnHold.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableDashboardToDoListAssignedToMeOnHold.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableDashboardToDoListAssignedToMeOnHold.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableDashboardToDoListAssignedToMeOnHold.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastCommentNull() {
                return this.IsNull(this.tableDashboardToDoListAssignedToMeOnHold.LastCommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastCommentNull() {
                this[this.tableDashboardToDoListAssignedToMeOnHold.LastCommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitCodeNull() {
                return this.IsNull(this.tableDashboardToDoListAssignedToMeOnHold.UnitCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitCodeNull() {
                this[this.tableDashboardToDoListAssignedToMeOnHold.UnitCodeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DashboardUnassignedServiceRequestsRowChangeEvent : global::System.EventArgs {
            
            private DashboardUnassignedServiceRequestsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardUnassignedServiceRequestsRowChangeEvent(DashboardUnassignedServiceRequestsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardUnassignedServiceRequestsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DashboardExpiredServiceRequestsRowChangeEvent : global::System.EventArgs {
            
            private DashboardExpiredServiceRequestsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardExpiredServiceRequestsRowChangeEvent(DashboardExpiredServiceRequestsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardExpiredServiceRequestsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DashboardItemsAboutToExpireRowChangeEvent : global::System.EventArgs {
            
            private DashboardItemsAboutToExpireRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardItemsAboutToExpireRowChangeEvent(DashboardItemsAboutToExpireRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardItemsAboutToExpireRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DashboardMyServiceRequestsRowChangeEvent : global::System.EventArgs {
            
            private DashboardMyServiceRequestsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMyServiceRequestsRowChangeEvent(DashboardMyServiceRequestsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMyServiceRequestsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DashboardInProgressServiceRequestsRowChangeEvent : global::System.EventArgs {
            
            private DashboardInProgressServiceRequestsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardInProgressServiceRequestsRowChangeEvent(DashboardInProgressServiceRequestsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardInProgressServiceRequestsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DashboardChecklistAlarmsRowChangeEvent : global::System.EventArgs {
            
            private DashboardChecklistAlarmsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardChecklistAlarmsRowChangeEvent(DashboardChecklistAlarmsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardChecklistAlarmsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DashboardMyToDoListRowChangeEvent : global::System.EventArgs {
            
            private DashboardMyToDoListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMyToDoListRowChangeEvent(DashboardMyToDoListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMyToDoListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DashboardMyToDoListOnHoldRowChangeEvent : global::System.EventArgs {
            
            private DashboardMyToDoListOnHoldRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMyToDoListOnHoldRowChangeEvent(DashboardMyToDoListOnHoldRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMyToDoListOnHoldRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DashboardToDoListAssignedToMeRowChangeEvent : global::System.EventArgs {
            
            private DashboardToDoListAssignedToMeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardToDoListAssignedToMeRowChangeEvent(DashboardToDoListAssignedToMeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardToDoListAssignedToMeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DashboardToDoListAssignedToMeOnHoldRowChangeEvent : global::System.EventArgs {
            
            private DashboardToDoListAssignedToMeOnHoldRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardToDoListAssignedToMeOnHoldRowChangeEvent(DashboardToDoListAssignedToMeOnHoldRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardToDoListAssignedToMeOnHoldRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591