//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.FleetManagement.CompanyLevels {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("CompanyLevelsTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class CompanyLevelsTDS : global::System.Data.DataSet {
        
        private LFS_FM_COMPANYLEVEL_MANAGERSDataTable tableLFS_FM_COMPANYLEVEL_MANAGERS;
        
        private LFS_FM_COMPANYLEVELDataTable tableLFS_FM_COMPANYLEVEL;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CompanyLevelsTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected CompanyLevelsTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["LFS_FM_COMPANYLEVEL_MANAGERS"] != null)) {
                    base.Tables.Add(new LFS_FM_COMPANYLEVEL_MANAGERSDataTable(ds.Tables["LFS_FM_COMPANYLEVEL_MANAGERS"]));
                }
                if ((ds.Tables["LFS_FM_COMPANYLEVEL"] != null)) {
                    base.Tables.Add(new LFS_FM_COMPANYLEVELDataTable(ds.Tables["LFS_FM_COMPANYLEVEL"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_FM_COMPANYLEVEL_MANAGERSDataTable LFS_FM_COMPANYLEVEL_MANAGERS {
            get {
                return this.tableLFS_FM_COMPANYLEVEL_MANAGERS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_FM_COMPANYLEVELDataTable LFS_FM_COMPANYLEVEL {
            get {
                return this.tableLFS_FM_COMPANYLEVEL;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            CompanyLevelsTDS cln = ((CompanyLevelsTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["LFS_FM_COMPANYLEVEL_MANAGERS"] != null)) {
                    base.Tables.Add(new LFS_FM_COMPANYLEVEL_MANAGERSDataTable(ds.Tables["LFS_FM_COMPANYLEVEL_MANAGERS"]));
                }
                if ((ds.Tables["LFS_FM_COMPANYLEVEL"] != null)) {
                    base.Tables.Add(new LFS_FM_COMPANYLEVELDataTable(ds.Tables["LFS_FM_COMPANYLEVEL"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableLFS_FM_COMPANYLEVEL_MANAGERS = ((LFS_FM_COMPANYLEVEL_MANAGERSDataTable)(base.Tables["LFS_FM_COMPANYLEVEL_MANAGERS"]));
            if ((initTable == true)) {
                if ((this.tableLFS_FM_COMPANYLEVEL_MANAGERS != null)) {
                    this.tableLFS_FM_COMPANYLEVEL_MANAGERS.InitVars();
                }
            }
            this.tableLFS_FM_COMPANYLEVEL = ((LFS_FM_COMPANYLEVELDataTable)(base.Tables["LFS_FM_COMPANYLEVEL"]));
            if ((initTable == true)) {
                if ((this.tableLFS_FM_COMPANYLEVEL != null)) {
                    this.tableLFS_FM_COMPANYLEVEL.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "CompanyLevelsTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/CompanyLevelsTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableLFS_FM_COMPANYLEVEL_MANAGERS = new LFS_FM_COMPANYLEVEL_MANAGERSDataTable();
            base.Tables.Add(this.tableLFS_FM_COMPANYLEVEL_MANAGERS);
            this.tableLFS_FM_COMPANYLEVEL = new LFS_FM_COMPANYLEVELDataTable();
            base.Tables.Add(this.tableLFS_FM_COMPANYLEVEL);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_FM_COMPANYLEVEL_MANAGERS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_FM_COMPANYLEVEL() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            CompanyLevelsTDS ds = new CompanyLevelsTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void LFS_FM_COMPANYLEVEL_MANAGERSRowChangeEventHandler(object sender, LFS_FM_COMPANYLEVEL_MANAGERSRowChangeEvent e);
        
        public delegate void LFS_FM_COMPANYLEVELRowChangeEventHandler(object sender, LFS_FM_COMPANYLEVELRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_FM_COMPANYLEVEL_MANAGERSDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCompanyLevelID;
            
            private global::System.Data.DataColumn columnEmployeeID;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_COMPANYLEVEL_MANAGERSDataTable() {
                this.TableName = "LFS_FM_COMPANYLEVEL_MANAGERS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_COMPANYLEVEL_MANAGERSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_FM_COMPANYLEVEL_MANAGERSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyLevelIDColumn {
                get {
                    return this.columnCompanyLevelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_COMPANYLEVEL_MANAGERSRow this[int index] {
                get {
                    return ((LFS_FM_COMPANYLEVEL_MANAGERSRow)(this.Rows[index]));
                }
            }
            
            public event LFS_FM_COMPANYLEVEL_MANAGERSRowChangeEventHandler LFS_FM_COMPANYLEVEL_MANAGERSRowChanging;
            
            public event LFS_FM_COMPANYLEVEL_MANAGERSRowChangeEventHandler LFS_FM_COMPANYLEVEL_MANAGERSRowChanged;
            
            public event LFS_FM_COMPANYLEVEL_MANAGERSRowChangeEventHandler LFS_FM_COMPANYLEVEL_MANAGERSRowDeleting;
            
            public event LFS_FM_COMPANYLEVEL_MANAGERSRowChangeEventHandler LFS_FM_COMPANYLEVEL_MANAGERSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_FM_COMPANYLEVEL_MANAGERSRow(LFS_FM_COMPANYLEVEL_MANAGERSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_COMPANYLEVEL_MANAGERSRow AddLFS_FM_COMPANYLEVEL_MANAGERSRow(int CompanyLevelID, int EmployeeID, bool Deleted, int COMPANY_ID) {
                LFS_FM_COMPANYLEVEL_MANAGERSRow rowLFS_FM_COMPANYLEVEL_MANAGERSRow = ((LFS_FM_COMPANYLEVEL_MANAGERSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CompanyLevelID,
                        EmployeeID,
                        Deleted,
                        COMPANY_ID};
                rowLFS_FM_COMPANYLEVEL_MANAGERSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_FM_COMPANYLEVEL_MANAGERSRow);
                return rowLFS_FM_COMPANYLEVEL_MANAGERSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_COMPANYLEVEL_MANAGERSRow FindByCompanyLevelIDEmployeeID(int CompanyLevelID, int EmployeeID) {
                return ((LFS_FM_COMPANYLEVEL_MANAGERSRow)(this.Rows.Find(new object[] {
                            CompanyLevelID,
                            EmployeeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_FM_COMPANYLEVEL_MANAGERSDataTable cln = ((LFS_FM_COMPANYLEVEL_MANAGERSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_FM_COMPANYLEVEL_MANAGERSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCompanyLevelID = base.Columns["CompanyLevelID"];
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCompanyLevelID = new global::System.Data.DataColumn("CompanyLevelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyLevelID);
                this.columnEmployeeID = new global::System.Data.DataColumn("EmployeeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeID);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCompanyLevelID,
                                this.columnEmployeeID}, true));
                this.columnCompanyLevelID.AllowDBNull = false;
                this.columnEmployeeID.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_COMPANYLEVEL_MANAGERSRow NewLFS_FM_COMPANYLEVEL_MANAGERSRow() {
                return ((LFS_FM_COMPANYLEVEL_MANAGERSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_FM_COMPANYLEVEL_MANAGERSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_FM_COMPANYLEVEL_MANAGERSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_FM_COMPANYLEVEL_MANAGERSRowChanged != null)) {
                    this.LFS_FM_COMPANYLEVEL_MANAGERSRowChanged(this, new LFS_FM_COMPANYLEVEL_MANAGERSRowChangeEvent(((LFS_FM_COMPANYLEVEL_MANAGERSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_FM_COMPANYLEVEL_MANAGERSRowChanging != null)) {
                    this.LFS_FM_COMPANYLEVEL_MANAGERSRowChanging(this, new LFS_FM_COMPANYLEVEL_MANAGERSRowChangeEvent(((LFS_FM_COMPANYLEVEL_MANAGERSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_FM_COMPANYLEVEL_MANAGERSRowDeleted != null)) {
                    this.LFS_FM_COMPANYLEVEL_MANAGERSRowDeleted(this, new LFS_FM_COMPANYLEVEL_MANAGERSRowChangeEvent(((LFS_FM_COMPANYLEVEL_MANAGERSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_FM_COMPANYLEVEL_MANAGERSRowDeleting != null)) {
                    this.LFS_FM_COMPANYLEVEL_MANAGERSRowDeleting(this, new LFS_FM_COMPANYLEVEL_MANAGERSRowChangeEvent(((LFS_FM_COMPANYLEVEL_MANAGERSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_FM_COMPANYLEVEL_MANAGERSRow(LFS_FM_COMPANYLEVEL_MANAGERSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CompanyLevelsTDS ds = new CompanyLevelsTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_FM_COMPANYLEVEL_MANAGERSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_FM_COMPANYLEVELDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCompanyLevelID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnParentID;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnUnitsUnitOfMeasurement;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_COMPANYLEVELDataTable() {
                this.TableName = "LFS_FM_COMPANYLEVEL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_COMPANYLEVELDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_FM_COMPANYLEVELDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyLevelIDColumn {
                get {
                    return this.columnCompanyLevelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParentIDColumn {
                get {
                    return this.columnParentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitsUnitOfMeasurementColumn {
                get {
                    return this.columnUnitsUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_COMPANYLEVELRow this[int index] {
                get {
                    return ((LFS_FM_COMPANYLEVELRow)(this.Rows[index]));
                }
            }
            
            public event LFS_FM_COMPANYLEVELRowChangeEventHandler LFS_FM_COMPANYLEVELRowChanging;
            
            public event LFS_FM_COMPANYLEVELRowChangeEventHandler LFS_FM_COMPANYLEVELRowChanged;
            
            public event LFS_FM_COMPANYLEVELRowChangeEventHandler LFS_FM_COMPANYLEVELRowDeleting;
            
            public event LFS_FM_COMPANYLEVELRowChangeEventHandler LFS_FM_COMPANYLEVELRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_FM_COMPANYLEVELRow(LFS_FM_COMPANYLEVELRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_COMPANYLEVELRow AddLFS_FM_COMPANYLEVELRow(string Name, int ParentID, bool Deleted, int COMPANY_ID, string UnitsUnitOfMeasurement) {
                LFS_FM_COMPANYLEVELRow rowLFS_FM_COMPANYLEVELRow = ((LFS_FM_COMPANYLEVELRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name,
                        ParentID,
                        Deleted,
                        COMPANY_ID,
                        UnitsUnitOfMeasurement};
                rowLFS_FM_COMPANYLEVELRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_FM_COMPANYLEVELRow);
                return rowLFS_FM_COMPANYLEVELRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_COMPANYLEVELRow FindByCompanyLevelID(int CompanyLevelID) {
                return ((LFS_FM_COMPANYLEVELRow)(this.Rows.Find(new object[] {
                            CompanyLevelID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_FM_COMPANYLEVELDataTable cln = ((LFS_FM_COMPANYLEVELDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_FM_COMPANYLEVELDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCompanyLevelID = base.Columns["CompanyLevelID"];
                this.columnName = base.Columns["Name"];
                this.columnParentID = base.Columns["ParentID"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnUnitsUnitOfMeasurement = base.Columns["UnitsUnitOfMeasurement"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCompanyLevelID = new global::System.Data.DataColumn("CompanyLevelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyLevelID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnParentID = new global::System.Data.DataColumn("ParentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParentID);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnUnitsUnitOfMeasurement = new global::System.Data.DataColumn("UnitsUnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitsUnitOfMeasurement);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCompanyLevelID}, true));
                this.columnCompanyLevelID.AutoIncrement = true;
                this.columnCompanyLevelID.AutoIncrementSeed = -1;
                this.columnCompanyLevelID.AutoIncrementStep = -1;
                this.columnCompanyLevelID.AllowDBNull = false;
                this.columnCompanyLevelID.ReadOnly = true;
                this.columnCompanyLevelID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 100;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnUnitsUnitOfMeasurement.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_COMPANYLEVELRow NewLFS_FM_COMPANYLEVELRow() {
                return ((LFS_FM_COMPANYLEVELRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_FM_COMPANYLEVELRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_FM_COMPANYLEVELRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_FM_COMPANYLEVELRowChanged != null)) {
                    this.LFS_FM_COMPANYLEVELRowChanged(this, new LFS_FM_COMPANYLEVELRowChangeEvent(((LFS_FM_COMPANYLEVELRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_FM_COMPANYLEVELRowChanging != null)) {
                    this.LFS_FM_COMPANYLEVELRowChanging(this, new LFS_FM_COMPANYLEVELRowChangeEvent(((LFS_FM_COMPANYLEVELRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_FM_COMPANYLEVELRowDeleted != null)) {
                    this.LFS_FM_COMPANYLEVELRowDeleted(this, new LFS_FM_COMPANYLEVELRowChangeEvent(((LFS_FM_COMPANYLEVELRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_FM_COMPANYLEVELRowDeleting != null)) {
                    this.LFS_FM_COMPANYLEVELRowDeleting(this, new LFS_FM_COMPANYLEVELRowChangeEvent(((LFS_FM_COMPANYLEVELRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_FM_COMPANYLEVELRow(LFS_FM_COMPANYLEVELRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CompanyLevelsTDS ds = new CompanyLevelsTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_FM_COMPANYLEVELDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_FM_COMPANYLEVEL_MANAGERSRow : global::System.Data.DataRow {
            
            private LFS_FM_COMPANYLEVEL_MANAGERSDataTable tableLFS_FM_COMPANYLEVEL_MANAGERS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_COMPANYLEVEL_MANAGERSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_FM_COMPANYLEVEL_MANAGERS = ((LFS_FM_COMPANYLEVEL_MANAGERSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CompanyLevelID {
                get {
                    return ((int)(this[this.tableLFS_FM_COMPANYLEVEL_MANAGERS.CompanyLevelIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_COMPANYLEVEL_MANAGERS.CompanyLevelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmployeeID {
                get {
                    return ((int)(this[this.tableLFS_FM_COMPANYLEVEL_MANAGERS.EmployeeIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_COMPANYLEVEL_MANAGERS.EmployeeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_FM_COMPANYLEVEL_MANAGERS.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_FM_COMPANYLEVEL_MANAGERS.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_FM_COMPANYLEVEL_MANAGERS.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_FM_COMPANYLEVEL_MANAGERS.COMPANY_IDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_FM_COMPANYLEVELRow : global::System.Data.DataRow {
            
            private LFS_FM_COMPANYLEVELDataTable tableLFS_FM_COMPANYLEVEL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_COMPANYLEVELRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_FM_COMPANYLEVEL = ((LFS_FM_COMPANYLEVELDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CompanyLevelID {
                get {
                    return ((int)(this[this.tableLFS_FM_COMPANYLEVEL.CompanyLevelIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_COMPANYLEVEL.CompanyLevelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableLFS_FM_COMPANYLEVEL.NameColumn]));
                }
                set {
                    this[this.tableLFS_FM_COMPANYLEVEL.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParentID {
                get {
                    try {
                        return ((int)(this[this.tableLFS_FM_COMPANYLEVEL.ParentIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParentID\' in table \'LFS_FM_COMPANYLEVEL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_COMPANYLEVEL.ParentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_FM_COMPANYLEVEL.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_FM_COMPANYLEVEL.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_FM_COMPANYLEVEL.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_FM_COMPANYLEVEL.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitsUnitOfMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_COMPANYLEVEL.UnitsUnitOfMeasurementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitsUnitOfMeasurement\' in table \'LFS_FM_COMPANYLEVEL\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_COMPANYLEVEL.UnitsUnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParentIDNull() {
                return this.IsNull(this.tableLFS_FM_COMPANYLEVEL.ParentIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParentIDNull() {
                this[this.tableLFS_FM_COMPANYLEVEL.ParentIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitsUnitOfMeasurementNull() {
                return this.IsNull(this.tableLFS_FM_COMPANYLEVEL.UnitsUnitOfMeasurementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitsUnitOfMeasurementNull() {
                this[this.tableLFS_FM_COMPANYLEVEL.UnitsUnitOfMeasurementColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_FM_COMPANYLEVEL_MANAGERSRowChangeEvent : global::System.EventArgs {
            
            private LFS_FM_COMPANYLEVEL_MANAGERSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_COMPANYLEVEL_MANAGERSRowChangeEvent(LFS_FM_COMPANYLEVEL_MANAGERSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_COMPANYLEVEL_MANAGERSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_FM_COMPANYLEVELRowChangeEvent : global::System.EventArgs {
            
            private LFS_FM_COMPANYLEVELRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_COMPANYLEVELRowChangeEvent(LFS_FM_COMPANYLEVELRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_COMPANYLEVELRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591