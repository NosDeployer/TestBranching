//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3615
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.FleetManagement.ChecklistRules {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("RuleTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class RuleTDS : global::System.Data.DataSet {
        
        private LFS_FM_RULE_CATEGORYDataTable tableLFS_FM_RULE_CATEGORY;
        
        private LFS_FM_RULE_COMPANYLEVELDataTable tableLFS_FM_RULE_COMPANYLEVEL;
        
        private LFS_FM_RULEDataTable tableLFS_FM_RULE;
        
        private ChecklistRulesDetailsDataTable tableChecklistRulesDetails;
        
        private LFS_FM_CHECKLISTDataTable tableLFS_FM_CHECKLIST;
        
        private LFS_FM_RULE_CATEGORY_UNITSDataTable tableLFS_FM_RULE_CATEGORY_UNITS;
        
        private global::System.Data.DataRelation relationLFS_FM_RULE_LFS_FM_RULE_CATEGORY;
        
        private global::System.Data.DataRelation relationLFS_FM_RULE_LFS_FM_RULE_COMPANYLEVEL;
        
        private global::System.Data.DataRelation relationLFS_FM_RULE_LFS_FM_CHECKLIST;
        
        private global::System.Data.DataRelation relationLFS_FM_RULE_LFS_FM_RULE_CATEGORY_UNITS;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RuleTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected RuleTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["LFS_FM_RULE_CATEGORY"] != null)) {
                    base.Tables.Add(new LFS_FM_RULE_CATEGORYDataTable(ds.Tables["LFS_FM_RULE_CATEGORY"]));
                }
                if ((ds.Tables["LFS_FM_RULE_COMPANYLEVEL"] != null)) {
                    base.Tables.Add(new LFS_FM_RULE_COMPANYLEVELDataTable(ds.Tables["LFS_FM_RULE_COMPANYLEVEL"]));
                }
                if ((ds.Tables["LFS_FM_RULE"] != null)) {
                    base.Tables.Add(new LFS_FM_RULEDataTable(ds.Tables["LFS_FM_RULE"]));
                }
                if ((ds.Tables["ChecklistRulesDetails"] != null)) {
                    base.Tables.Add(new ChecklistRulesDetailsDataTable(ds.Tables["ChecklistRulesDetails"]));
                }
                if ((ds.Tables["LFS_FM_CHECKLIST"] != null)) {
                    base.Tables.Add(new LFS_FM_CHECKLISTDataTable(ds.Tables["LFS_FM_CHECKLIST"]));
                }
                if ((ds.Tables["LFS_FM_RULE_CATEGORY_UNITS"] != null)) {
                    base.Tables.Add(new LFS_FM_RULE_CATEGORY_UNITSDataTable(ds.Tables["LFS_FM_RULE_CATEGORY_UNITS"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_FM_RULE_CATEGORYDataTable LFS_FM_RULE_CATEGORY {
            get {
                return this.tableLFS_FM_RULE_CATEGORY;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_FM_RULE_COMPANYLEVELDataTable LFS_FM_RULE_COMPANYLEVEL {
            get {
                return this.tableLFS_FM_RULE_COMPANYLEVEL;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_FM_RULEDataTable LFS_FM_RULE {
            get {
                return this.tableLFS_FM_RULE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ChecklistRulesDetailsDataTable ChecklistRulesDetails {
            get {
                return this.tableChecklistRulesDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_FM_CHECKLISTDataTable LFS_FM_CHECKLIST {
            get {
                return this.tableLFS_FM_CHECKLIST;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_FM_RULE_CATEGORY_UNITSDataTable LFS_FM_RULE_CATEGORY_UNITS {
            get {
                return this.tableLFS_FM_RULE_CATEGORY_UNITS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            RuleTDS cln = ((RuleTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["LFS_FM_RULE_CATEGORY"] != null)) {
                    base.Tables.Add(new LFS_FM_RULE_CATEGORYDataTable(ds.Tables["LFS_FM_RULE_CATEGORY"]));
                }
                if ((ds.Tables["LFS_FM_RULE_COMPANYLEVEL"] != null)) {
                    base.Tables.Add(new LFS_FM_RULE_COMPANYLEVELDataTable(ds.Tables["LFS_FM_RULE_COMPANYLEVEL"]));
                }
                if ((ds.Tables["LFS_FM_RULE"] != null)) {
                    base.Tables.Add(new LFS_FM_RULEDataTable(ds.Tables["LFS_FM_RULE"]));
                }
                if ((ds.Tables["ChecklistRulesDetails"] != null)) {
                    base.Tables.Add(new ChecklistRulesDetailsDataTable(ds.Tables["ChecklistRulesDetails"]));
                }
                if ((ds.Tables["LFS_FM_CHECKLIST"] != null)) {
                    base.Tables.Add(new LFS_FM_CHECKLISTDataTable(ds.Tables["LFS_FM_CHECKLIST"]));
                }
                if ((ds.Tables["LFS_FM_RULE_CATEGORY_UNITS"] != null)) {
                    base.Tables.Add(new LFS_FM_RULE_CATEGORY_UNITSDataTable(ds.Tables["LFS_FM_RULE_CATEGORY_UNITS"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableLFS_FM_RULE_CATEGORY = ((LFS_FM_RULE_CATEGORYDataTable)(base.Tables["LFS_FM_RULE_CATEGORY"]));
            if ((initTable == true)) {
                if ((this.tableLFS_FM_RULE_CATEGORY != null)) {
                    this.tableLFS_FM_RULE_CATEGORY.InitVars();
                }
            }
            this.tableLFS_FM_RULE_COMPANYLEVEL = ((LFS_FM_RULE_COMPANYLEVELDataTable)(base.Tables["LFS_FM_RULE_COMPANYLEVEL"]));
            if ((initTable == true)) {
                if ((this.tableLFS_FM_RULE_COMPANYLEVEL != null)) {
                    this.tableLFS_FM_RULE_COMPANYLEVEL.InitVars();
                }
            }
            this.tableLFS_FM_RULE = ((LFS_FM_RULEDataTable)(base.Tables["LFS_FM_RULE"]));
            if ((initTable == true)) {
                if ((this.tableLFS_FM_RULE != null)) {
                    this.tableLFS_FM_RULE.InitVars();
                }
            }
            this.tableChecklistRulesDetails = ((ChecklistRulesDetailsDataTable)(base.Tables["ChecklistRulesDetails"]));
            if ((initTable == true)) {
                if ((this.tableChecklistRulesDetails != null)) {
                    this.tableChecklistRulesDetails.InitVars();
                }
            }
            this.tableLFS_FM_CHECKLIST = ((LFS_FM_CHECKLISTDataTable)(base.Tables["LFS_FM_CHECKLIST"]));
            if ((initTable == true)) {
                if ((this.tableLFS_FM_CHECKLIST != null)) {
                    this.tableLFS_FM_CHECKLIST.InitVars();
                }
            }
            this.tableLFS_FM_RULE_CATEGORY_UNITS = ((LFS_FM_RULE_CATEGORY_UNITSDataTable)(base.Tables["LFS_FM_RULE_CATEGORY_UNITS"]));
            if ((initTable == true)) {
                if ((this.tableLFS_FM_RULE_CATEGORY_UNITS != null)) {
                    this.tableLFS_FM_RULE_CATEGORY_UNITS.InitVars();
                }
            }
            this.relationLFS_FM_RULE_LFS_FM_RULE_CATEGORY = this.Relations["LFS_FM_RULE_LFS_FM_RULE_CATEGORY"];
            this.relationLFS_FM_RULE_LFS_FM_RULE_COMPANYLEVEL = this.Relations["LFS_FM_RULE_LFS_FM_RULE_COMPANYLEVEL"];
            this.relationLFS_FM_RULE_LFS_FM_CHECKLIST = this.Relations["LFS_FM_RULE_LFS_FM_CHECKLIST"];
            this.relationLFS_FM_RULE_LFS_FM_RULE_CATEGORY_UNITS = this.Relations["LFS_FM_RULE_LFS_FM_RULE_CATEGORY_UNITS"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "RuleTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/RuleTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableLFS_FM_RULE_CATEGORY = new LFS_FM_RULE_CATEGORYDataTable();
            base.Tables.Add(this.tableLFS_FM_RULE_CATEGORY);
            this.tableLFS_FM_RULE_COMPANYLEVEL = new LFS_FM_RULE_COMPANYLEVELDataTable();
            base.Tables.Add(this.tableLFS_FM_RULE_COMPANYLEVEL);
            this.tableLFS_FM_RULE = new LFS_FM_RULEDataTable();
            base.Tables.Add(this.tableLFS_FM_RULE);
            this.tableChecklistRulesDetails = new ChecklistRulesDetailsDataTable();
            base.Tables.Add(this.tableChecklistRulesDetails);
            this.tableLFS_FM_CHECKLIST = new LFS_FM_CHECKLISTDataTable();
            base.Tables.Add(this.tableLFS_FM_CHECKLIST);
            this.tableLFS_FM_RULE_CATEGORY_UNITS = new LFS_FM_RULE_CATEGORY_UNITSDataTable();
            base.Tables.Add(this.tableLFS_FM_RULE_CATEGORY_UNITS);
            this.relationLFS_FM_RULE_LFS_FM_RULE_CATEGORY = new global::System.Data.DataRelation("LFS_FM_RULE_LFS_FM_RULE_CATEGORY", new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_RULE.RuleIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_RULE_CATEGORY.RuleIDColumn}, false);
            this.Relations.Add(this.relationLFS_FM_RULE_LFS_FM_RULE_CATEGORY);
            this.relationLFS_FM_RULE_LFS_FM_RULE_COMPANYLEVEL = new global::System.Data.DataRelation("LFS_FM_RULE_LFS_FM_RULE_COMPANYLEVEL", new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_RULE.RuleIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_RULE_COMPANYLEVEL.RuleIDColumn}, false);
            this.Relations.Add(this.relationLFS_FM_RULE_LFS_FM_RULE_COMPANYLEVEL);
            this.relationLFS_FM_RULE_LFS_FM_CHECKLIST = new global::System.Data.DataRelation("LFS_FM_RULE_LFS_FM_CHECKLIST", new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_RULE.RuleIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_CHECKLIST.RuleIDColumn}, false);
            this.Relations.Add(this.relationLFS_FM_RULE_LFS_FM_CHECKLIST);
            this.relationLFS_FM_RULE_LFS_FM_RULE_CATEGORY_UNITS = new global::System.Data.DataRelation("LFS_FM_RULE_LFS_FM_RULE_CATEGORY_UNITS", new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_RULE.RuleIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLFS_FM_RULE_CATEGORY_UNITS.RuleIDColumn}, false);
            this.Relations.Add(this.relationLFS_FM_RULE_LFS_FM_RULE_CATEGORY_UNITS);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_FM_RULE_CATEGORY() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_FM_RULE_COMPANYLEVEL() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_FM_RULE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeChecklistRulesDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_FM_CHECKLIST() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_FM_RULE_CATEGORY_UNITS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            RuleTDS ds = new RuleTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void LFS_FM_RULE_CATEGORYRowChangeEventHandler(object sender, LFS_FM_RULE_CATEGORYRowChangeEvent e);
        
        public delegate void LFS_FM_RULE_COMPANYLEVELRowChangeEventHandler(object sender, LFS_FM_RULE_COMPANYLEVELRowChangeEvent e);
        
        public delegate void LFS_FM_RULERowChangeEventHandler(object sender, LFS_FM_RULERowChangeEvent e);
        
        public delegate void ChecklistRulesDetailsRowChangeEventHandler(object sender, ChecklistRulesDetailsRowChangeEvent e);
        
        public delegate void LFS_FM_CHECKLISTRowChangeEventHandler(object sender, LFS_FM_CHECKLISTRowChangeEvent e);
        
        public delegate void LFS_FM_RULE_CATEGORY_UNITSRowChangeEventHandler(object sender, LFS_FM_RULE_CATEGORY_UNITSRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_FM_RULE_CATEGORYDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRuleID;
            
            private global::System.Data.DataColumn columnCategoryID;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULE_CATEGORYDataTable() {
                this.TableName = "LFS_FM_RULE_CATEGORY";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_RULE_CATEGORYDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_FM_RULE_CATEGORYDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RuleIDColumn {
                get {
                    return this.columnRuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryIDColumn {
                get {
                    return this.columnCategoryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULE_CATEGORYRow this[int index] {
                get {
                    return ((LFS_FM_RULE_CATEGORYRow)(this.Rows[index]));
                }
            }
            
            public event LFS_FM_RULE_CATEGORYRowChangeEventHandler LFS_FM_RULE_CATEGORYRowChanging;
            
            public event LFS_FM_RULE_CATEGORYRowChangeEventHandler LFS_FM_RULE_CATEGORYRowChanged;
            
            public event LFS_FM_RULE_CATEGORYRowChangeEventHandler LFS_FM_RULE_CATEGORYRowDeleting;
            
            public event LFS_FM_RULE_CATEGORYRowChangeEventHandler LFS_FM_RULE_CATEGORYRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_FM_RULE_CATEGORYRow(LFS_FM_RULE_CATEGORYRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULE_CATEGORYRow AddLFS_FM_RULE_CATEGORYRow(LFS_FM_RULERow parentLFS_FM_RULERowByLFS_FM_RULE_LFS_FM_RULE_CATEGORY, int CategoryID, bool Deleted, int COMPANY_ID) {
                LFS_FM_RULE_CATEGORYRow rowLFS_FM_RULE_CATEGORYRow = ((LFS_FM_RULE_CATEGORYRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CategoryID,
                        Deleted,
                        COMPANY_ID};
                if ((parentLFS_FM_RULERowByLFS_FM_RULE_LFS_FM_RULE_CATEGORY != null)) {
                    columnValuesArray[0] = parentLFS_FM_RULERowByLFS_FM_RULE_LFS_FM_RULE_CATEGORY[0];
                }
                rowLFS_FM_RULE_CATEGORYRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_FM_RULE_CATEGORYRow);
                return rowLFS_FM_RULE_CATEGORYRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULE_CATEGORYRow FindByRuleIDCategoryID(int RuleID, int CategoryID) {
                return ((LFS_FM_RULE_CATEGORYRow)(this.Rows.Find(new object[] {
                            RuleID,
                            CategoryID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_FM_RULE_CATEGORYDataTable cln = ((LFS_FM_RULE_CATEGORYDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_FM_RULE_CATEGORYDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRuleID = base.Columns["RuleID"];
                this.columnCategoryID = base.Columns["CategoryID"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRuleID = new global::System.Data.DataColumn("RuleID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRuleID);
                this.columnCategoryID = new global::System.Data.DataColumn("CategoryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryID);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRuleID,
                                this.columnCategoryID}, true));
                this.columnRuleID.AllowDBNull = false;
                this.columnCategoryID.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULE_CATEGORYRow NewLFS_FM_RULE_CATEGORYRow() {
                return ((LFS_FM_RULE_CATEGORYRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_FM_RULE_CATEGORYRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_FM_RULE_CATEGORYRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_FM_RULE_CATEGORYRowChanged != null)) {
                    this.LFS_FM_RULE_CATEGORYRowChanged(this, new LFS_FM_RULE_CATEGORYRowChangeEvent(((LFS_FM_RULE_CATEGORYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_FM_RULE_CATEGORYRowChanging != null)) {
                    this.LFS_FM_RULE_CATEGORYRowChanging(this, new LFS_FM_RULE_CATEGORYRowChangeEvent(((LFS_FM_RULE_CATEGORYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_FM_RULE_CATEGORYRowDeleted != null)) {
                    this.LFS_FM_RULE_CATEGORYRowDeleted(this, new LFS_FM_RULE_CATEGORYRowChangeEvent(((LFS_FM_RULE_CATEGORYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_FM_RULE_CATEGORYRowDeleting != null)) {
                    this.LFS_FM_RULE_CATEGORYRowDeleting(this, new LFS_FM_RULE_CATEGORYRowChangeEvent(((LFS_FM_RULE_CATEGORYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_FM_RULE_CATEGORYRow(LFS_FM_RULE_CATEGORYRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RuleTDS ds = new RuleTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_FM_RULE_CATEGORYDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_FM_RULE_COMPANYLEVELDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRuleID;
            
            private global::System.Data.DataColumn columnCompanyLevelID;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULE_COMPANYLEVELDataTable() {
                this.TableName = "LFS_FM_RULE_COMPANYLEVEL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_RULE_COMPANYLEVELDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_FM_RULE_COMPANYLEVELDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RuleIDColumn {
                get {
                    return this.columnRuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyLevelIDColumn {
                get {
                    return this.columnCompanyLevelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULE_COMPANYLEVELRow this[int index] {
                get {
                    return ((LFS_FM_RULE_COMPANYLEVELRow)(this.Rows[index]));
                }
            }
            
            public event LFS_FM_RULE_COMPANYLEVELRowChangeEventHandler LFS_FM_RULE_COMPANYLEVELRowChanging;
            
            public event LFS_FM_RULE_COMPANYLEVELRowChangeEventHandler LFS_FM_RULE_COMPANYLEVELRowChanged;
            
            public event LFS_FM_RULE_COMPANYLEVELRowChangeEventHandler LFS_FM_RULE_COMPANYLEVELRowDeleting;
            
            public event LFS_FM_RULE_COMPANYLEVELRowChangeEventHandler LFS_FM_RULE_COMPANYLEVELRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_FM_RULE_COMPANYLEVELRow(LFS_FM_RULE_COMPANYLEVELRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULE_COMPANYLEVELRow AddLFS_FM_RULE_COMPANYLEVELRow(LFS_FM_RULERow parentLFS_FM_RULERowByLFS_FM_RULE_LFS_FM_RULE_COMPANYLEVEL, int CompanyLevelID, bool Deleted, int COMPANY_ID) {
                LFS_FM_RULE_COMPANYLEVELRow rowLFS_FM_RULE_COMPANYLEVELRow = ((LFS_FM_RULE_COMPANYLEVELRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CompanyLevelID,
                        Deleted,
                        COMPANY_ID};
                if ((parentLFS_FM_RULERowByLFS_FM_RULE_LFS_FM_RULE_COMPANYLEVEL != null)) {
                    columnValuesArray[0] = parentLFS_FM_RULERowByLFS_FM_RULE_LFS_FM_RULE_COMPANYLEVEL[0];
                }
                rowLFS_FM_RULE_COMPANYLEVELRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_FM_RULE_COMPANYLEVELRow);
                return rowLFS_FM_RULE_COMPANYLEVELRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULE_COMPANYLEVELRow FindByRuleIDCompanyLevelID(int RuleID, int CompanyLevelID) {
                return ((LFS_FM_RULE_COMPANYLEVELRow)(this.Rows.Find(new object[] {
                            RuleID,
                            CompanyLevelID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_FM_RULE_COMPANYLEVELDataTable cln = ((LFS_FM_RULE_COMPANYLEVELDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_FM_RULE_COMPANYLEVELDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRuleID = base.Columns["RuleID"];
                this.columnCompanyLevelID = base.Columns["CompanyLevelID"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRuleID = new global::System.Data.DataColumn("RuleID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRuleID);
                this.columnCompanyLevelID = new global::System.Data.DataColumn("CompanyLevelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyLevelID);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRuleID,
                                this.columnCompanyLevelID}, true));
                this.columnRuleID.AllowDBNull = false;
                this.columnCompanyLevelID.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULE_COMPANYLEVELRow NewLFS_FM_RULE_COMPANYLEVELRow() {
                return ((LFS_FM_RULE_COMPANYLEVELRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_FM_RULE_COMPANYLEVELRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_FM_RULE_COMPANYLEVELRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_FM_RULE_COMPANYLEVELRowChanged != null)) {
                    this.LFS_FM_RULE_COMPANYLEVELRowChanged(this, new LFS_FM_RULE_COMPANYLEVELRowChangeEvent(((LFS_FM_RULE_COMPANYLEVELRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_FM_RULE_COMPANYLEVELRowChanging != null)) {
                    this.LFS_FM_RULE_COMPANYLEVELRowChanging(this, new LFS_FM_RULE_COMPANYLEVELRowChangeEvent(((LFS_FM_RULE_COMPANYLEVELRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_FM_RULE_COMPANYLEVELRowDeleted != null)) {
                    this.LFS_FM_RULE_COMPANYLEVELRowDeleted(this, new LFS_FM_RULE_COMPANYLEVELRowChangeEvent(((LFS_FM_RULE_COMPANYLEVELRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_FM_RULE_COMPANYLEVELRowDeleting != null)) {
                    this.LFS_FM_RULE_COMPANYLEVELRowDeleting(this, new LFS_FM_RULE_COMPANYLEVELRowChangeEvent(((LFS_FM_RULE_COMPANYLEVELRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_FM_RULE_COMPANYLEVELRow(LFS_FM_RULE_COMPANYLEVELRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RuleTDS ds = new RuleTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_FM_RULE_COMPANYLEVELDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_FM_RULEDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRuleID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnMTO;
            
            private global::System.Data.DataColumn columnFrequency;
            
            private global::System.Data.DataColumn columnAlarm;
            
            private global::System.Data.DataColumn columnAlarmDays;
            
            private global::System.Data.DataColumn columnServiceRequest;
            
            private global::System.Data.DataColumn columnServiceRequestDays;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULEDataTable() {
                this.TableName = "LFS_FM_RULE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_RULEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_FM_RULEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RuleIDColumn {
                get {
                    return this.columnRuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MTOColumn {
                get {
                    return this.columnMTO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FrequencyColumn {
                get {
                    return this.columnFrequency;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AlarmColumn {
                get {
                    return this.columnAlarm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AlarmDaysColumn {
                get {
                    return this.columnAlarmDays;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceRequestColumn {
                get {
                    return this.columnServiceRequest;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceRequestDaysColumn {
                get {
                    return this.columnServiceRequestDays;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULERow this[int index] {
                get {
                    return ((LFS_FM_RULERow)(this.Rows[index]));
                }
            }
            
            public event LFS_FM_RULERowChangeEventHandler LFS_FM_RULERowChanging;
            
            public event LFS_FM_RULERowChangeEventHandler LFS_FM_RULERowChanged;
            
            public event LFS_FM_RULERowChangeEventHandler LFS_FM_RULERowDeleting;
            
            public event LFS_FM_RULERowChangeEventHandler LFS_FM_RULERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_FM_RULERow(LFS_FM_RULERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULERow AddLFS_FM_RULERow(string Name, string Description, bool MTO, string Frequency, bool Alarm, int AlarmDays, bool ServiceRequest, int ServiceRequestDays, bool Deleted, int COMPANY_ID) {
                LFS_FM_RULERow rowLFS_FM_RULERow = ((LFS_FM_RULERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name,
                        Description,
                        MTO,
                        Frequency,
                        Alarm,
                        AlarmDays,
                        ServiceRequest,
                        ServiceRequestDays,
                        Deleted,
                        COMPANY_ID};
                rowLFS_FM_RULERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_FM_RULERow);
                return rowLFS_FM_RULERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULERow FindByRuleID(int RuleID) {
                return ((LFS_FM_RULERow)(this.Rows.Find(new object[] {
                            RuleID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_FM_RULEDataTable cln = ((LFS_FM_RULEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_FM_RULEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRuleID = base.Columns["RuleID"];
                this.columnName = base.Columns["Name"];
                this.columnDescription = base.Columns["Description"];
                this.columnMTO = base.Columns["MTO"];
                this.columnFrequency = base.Columns["Frequency"];
                this.columnAlarm = base.Columns["Alarm"];
                this.columnAlarmDays = base.Columns["AlarmDays"];
                this.columnServiceRequest = base.Columns["ServiceRequest"];
                this.columnServiceRequestDays = base.Columns["ServiceRequestDays"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRuleID = new global::System.Data.DataColumn("RuleID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRuleID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnMTO = new global::System.Data.DataColumn("MTO", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMTO);
                this.columnFrequency = new global::System.Data.DataColumn("Frequency", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrequency);
                this.columnAlarm = new global::System.Data.DataColumn("Alarm", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAlarm);
                this.columnAlarmDays = new global::System.Data.DataColumn("AlarmDays", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAlarmDays);
                this.columnServiceRequest = new global::System.Data.DataColumn("ServiceRequest", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceRequest);
                this.columnServiceRequestDays = new global::System.Data.DataColumn("ServiceRequestDays", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceRequestDays);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRuleID}, true));
                this.columnRuleID.AutoIncrement = true;
                this.columnRuleID.AllowDBNull = false;
                this.columnRuleID.ReadOnly = true;
                this.columnRuleID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 100;
                this.columnDescription.MaxLength = 1073741823;
                this.columnMTO.AllowDBNull = false;
                this.columnFrequency.AllowDBNull = false;
                this.columnFrequency.MaxLength = 25;
                this.columnAlarm.AllowDBNull = false;
                this.columnServiceRequest.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULERow NewLFS_FM_RULERow() {
                return ((LFS_FM_RULERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_FM_RULERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_FM_RULERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_FM_RULERowChanged != null)) {
                    this.LFS_FM_RULERowChanged(this, new LFS_FM_RULERowChangeEvent(((LFS_FM_RULERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_FM_RULERowChanging != null)) {
                    this.LFS_FM_RULERowChanging(this, new LFS_FM_RULERowChangeEvent(((LFS_FM_RULERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_FM_RULERowDeleted != null)) {
                    this.LFS_FM_RULERowDeleted(this, new LFS_FM_RULERowChangeEvent(((LFS_FM_RULERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_FM_RULERowDeleting != null)) {
                    this.LFS_FM_RULERowDeleting(this, new LFS_FM_RULERowChangeEvent(((LFS_FM_RULERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_FM_RULERow(LFS_FM_RULERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RuleTDS ds = new RuleTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_FM_RULEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ChecklistRulesDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRuleID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnMTO;
            
            private global::System.Data.DataColumn columnFrequency;
            
            private global::System.Data.DataColumn columnAlarm;
            
            private global::System.Data.DataColumn columnAlarmDays;
            
            private global::System.Data.DataColumn columnServiceRequest;
            
            private global::System.Data.DataColumn columnServiceRequestDays;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChecklistRulesDetailsDataTable() {
                this.TableName = "ChecklistRulesDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ChecklistRulesDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ChecklistRulesDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RuleIDColumn {
                get {
                    return this.columnRuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MTOColumn {
                get {
                    return this.columnMTO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FrequencyColumn {
                get {
                    return this.columnFrequency;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AlarmColumn {
                get {
                    return this.columnAlarm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AlarmDaysColumn {
                get {
                    return this.columnAlarmDays;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceRequestColumn {
                get {
                    return this.columnServiceRequest;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceRequestDaysColumn {
                get {
                    return this.columnServiceRequestDays;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChecklistRulesDetailsRow this[int index] {
                get {
                    return ((ChecklistRulesDetailsRow)(this.Rows[index]));
                }
            }
            
            public event ChecklistRulesDetailsRowChangeEventHandler ChecklistRulesDetailsRowChanging;
            
            public event ChecklistRulesDetailsRowChangeEventHandler ChecklistRulesDetailsRowChanged;
            
            public event ChecklistRulesDetailsRowChangeEventHandler ChecklistRulesDetailsRowDeleting;
            
            public event ChecklistRulesDetailsRowChangeEventHandler ChecklistRulesDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddChecklistRulesDetailsRow(ChecklistRulesDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChecklistRulesDetailsRow AddChecklistRulesDetailsRow(string Name, string Description, bool MTO, string Frequency, bool Alarm, int AlarmDays, bool ServiceRequest, int ServiceRequestDays, bool Deleted, int COMPANY_ID) {
                ChecklistRulesDetailsRow rowChecklistRulesDetailsRow = ((ChecklistRulesDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name,
                        Description,
                        MTO,
                        Frequency,
                        Alarm,
                        AlarmDays,
                        ServiceRequest,
                        ServiceRequestDays,
                        Deleted,
                        COMPANY_ID};
                rowChecklistRulesDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowChecklistRulesDetailsRow);
                return rowChecklistRulesDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChecklistRulesDetailsRow FindByRuleID(int RuleID) {
                return ((ChecklistRulesDetailsRow)(this.Rows.Find(new object[] {
                            RuleID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ChecklistRulesDetailsDataTable cln = ((ChecklistRulesDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ChecklistRulesDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRuleID = base.Columns["RuleID"];
                this.columnName = base.Columns["Name"];
                this.columnDescription = base.Columns["Description"];
                this.columnMTO = base.Columns["MTO"];
                this.columnFrequency = base.Columns["Frequency"];
                this.columnAlarm = base.Columns["Alarm"];
                this.columnAlarmDays = base.Columns["AlarmDays"];
                this.columnServiceRequest = base.Columns["ServiceRequest"];
                this.columnServiceRequestDays = base.Columns["ServiceRequestDays"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRuleID = new global::System.Data.DataColumn("RuleID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRuleID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnMTO = new global::System.Data.DataColumn("MTO", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMTO);
                this.columnFrequency = new global::System.Data.DataColumn("Frequency", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrequency);
                this.columnAlarm = new global::System.Data.DataColumn("Alarm", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAlarm);
                this.columnAlarmDays = new global::System.Data.DataColumn("AlarmDays", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAlarmDays);
                this.columnServiceRequest = new global::System.Data.DataColumn("ServiceRequest", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceRequest);
                this.columnServiceRequestDays = new global::System.Data.DataColumn("ServiceRequestDays", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceRequestDays);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRuleID}, true));
                this.columnRuleID.AutoIncrement = true;
                this.columnRuleID.AllowDBNull = false;
                this.columnRuleID.ReadOnly = true;
                this.columnRuleID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 100;
                this.columnDescription.MaxLength = 1073741823;
                this.columnMTO.AllowDBNull = false;
                this.columnFrequency.AllowDBNull = false;
                this.columnFrequency.MaxLength = 25;
                this.columnAlarm.AllowDBNull = false;
                this.columnServiceRequest.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChecklistRulesDetailsRow NewChecklistRulesDetailsRow() {
                return ((ChecklistRulesDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ChecklistRulesDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ChecklistRulesDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ChecklistRulesDetailsRowChanged != null)) {
                    this.ChecklistRulesDetailsRowChanged(this, new ChecklistRulesDetailsRowChangeEvent(((ChecklistRulesDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ChecklistRulesDetailsRowChanging != null)) {
                    this.ChecklistRulesDetailsRowChanging(this, new ChecklistRulesDetailsRowChangeEvent(((ChecklistRulesDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ChecklistRulesDetailsRowDeleted != null)) {
                    this.ChecklistRulesDetailsRowDeleted(this, new ChecklistRulesDetailsRowChangeEvent(((ChecklistRulesDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ChecklistRulesDetailsRowDeleting != null)) {
                    this.ChecklistRulesDetailsRowDeleting(this, new ChecklistRulesDetailsRowChangeEvent(((ChecklistRulesDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveChecklistRulesDetailsRow(ChecklistRulesDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RuleTDS ds = new RuleTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ChecklistRulesDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_FM_CHECKLISTDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnRuleID;
            
            private global::System.Data.DataColumn columnLastService;
            
            private global::System.Data.DataColumn columnNextDue;
            
            private global::System.Data.DataColumn columnDone;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_CHECKLISTDataTable() {
                this.TableName = "LFS_FM_CHECKLIST";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_CHECKLISTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_FM_CHECKLISTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RuleIDColumn {
                get {
                    return this.columnRuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastServiceColumn {
                get {
                    return this.columnLastService;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NextDueColumn {
                get {
                    return this.columnNextDue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DoneColumn {
                get {
                    return this.columnDone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_CHECKLISTRow this[int index] {
                get {
                    return ((LFS_FM_CHECKLISTRow)(this.Rows[index]));
                }
            }
            
            public event LFS_FM_CHECKLISTRowChangeEventHandler LFS_FM_CHECKLISTRowChanging;
            
            public event LFS_FM_CHECKLISTRowChangeEventHandler LFS_FM_CHECKLISTRowChanged;
            
            public event LFS_FM_CHECKLISTRowChangeEventHandler LFS_FM_CHECKLISTRowDeleting;
            
            public event LFS_FM_CHECKLISTRowChangeEventHandler LFS_FM_CHECKLISTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_FM_CHECKLISTRow(LFS_FM_CHECKLISTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_CHECKLISTRow AddLFS_FM_CHECKLISTRow(int UnitID, LFS_FM_RULERow parentLFS_FM_RULERowByLFS_FM_RULE_LFS_FM_CHECKLIST, System.DateTime LastService, System.DateTime NextDue, bool Done, string State, bool Deleted, int COMPANY_ID) {
                LFS_FM_CHECKLISTRow rowLFS_FM_CHECKLISTRow = ((LFS_FM_CHECKLISTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UnitID,
                        null,
                        LastService,
                        NextDue,
                        Done,
                        State,
                        Deleted,
                        COMPANY_ID};
                if ((parentLFS_FM_RULERowByLFS_FM_RULE_LFS_FM_CHECKLIST != null)) {
                    columnValuesArray[1] = parentLFS_FM_RULERowByLFS_FM_RULE_LFS_FM_CHECKLIST[0];
                }
                rowLFS_FM_CHECKLISTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_FM_CHECKLISTRow);
                return rowLFS_FM_CHECKLISTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_CHECKLISTRow FindByUnitIDRuleID(int UnitID, int RuleID) {
                return ((LFS_FM_CHECKLISTRow)(this.Rows.Find(new object[] {
                            UnitID,
                            RuleID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_FM_CHECKLISTDataTable cln = ((LFS_FM_CHECKLISTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_FM_CHECKLISTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUnitID = base.Columns["UnitID"];
                this.columnRuleID = base.Columns["RuleID"];
                this.columnLastService = base.Columns["LastService"];
                this.columnNextDue = base.Columns["NextDue"];
                this.columnDone = base.Columns["Done"];
                this.columnState = base.Columns["State"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnRuleID = new global::System.Data.DataColumn("RuleID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRuleID);
                this.columnLastService = new global::System.Data.DataColumn("LastService", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastService);
                this.columnNextDue = new global::System.Data.DataColumn("NextDue", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNextDue);
                this.columnDone = new global::System.Data.DataColumn("Done", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDone);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUnitID,
                                this.columnRuleID}, true));
                this.columnUnitID.AllowDBNull = false;
                this.columnRuleID.AllowDBNull = false;
                this.columnDone.AllowDBNull = false;
                this.columnState.AllowDBNull = false;
                this.columnState.MaxLength = 25;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_CHECKLISTRow NewLFS_FM_CHECKLISTRow() {
                return ((LFS_FM_CHECKLISTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_FM_CHECKLISTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_FM_CHECKLISTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_FM_CHECKLISTRowChanged != null)) {
                    this.LFS_FM_CHECKLISTRowChanged(this, new LFS_FM_CHECKLISTRowChangeEvent(((LFS_FM_CHECKLISTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_FM_CHECKLISTRowChanging != null)) {
                    this.LFS_FM_CHECKLISTRowChanging(this, new LFS_FM_CHECKLISTRowChangeEvent(((LFS_FM_CHECKLISTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_FM_CHECKLISTRowDeleted != null)) {
                    this.LFS_FM_CHECKLISTRowDeleted(this, new LFS_FM_CHECKLISTRowChangeEvent(((LFS_FM_CHECKLISTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_FM_CHECKLISTRowDeleting != null)) {
                    this.LFS_FM_CHECKLISTRowDeleting(this, new LFS_FM_CHECKLISTRowChangeEvent(((LFS_FM_CHECKLISTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_FM_CHECKLISTRow(LFS_FM_CHECKLISTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RuleTDS ds = new RuleTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_FM_CHECKLISTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_FM_RULE_CATEGORY_UNITSDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRuleID;
            
            private global::System.Data.DataColumn columnCategoryID;
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULE_CATEGORY_UNITSDataTable() {
                this.TableName = "LFS_FM_RULE_CATEGORY_UNITS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_RULE_CATEGORY_UNITSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_FM_RULE_CATEGORY_UNITSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RuleIDColumn {
                get {
                    return this.columnRuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryIDColumn {
                get {
                    return this.columnCategoryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULE_CATEGORY_UNITSRow this[int index] {
                get {
                    return ((LFS_FM_RULE_CATEGORY_UNITSRow)(this.Rows[index]));
                }
            }
            
            public event LFS_FM_RULE_CATEGORY_UNITSRowChangeEventHandler LFS_FM_RULE_CATEGORY_UNITSRowChanging;
            
            public event LFS_FM_RULE_CATEGORY_UNITSRowChangeEventHandler LFS_FM_RULE_CATEGORY_UNITSRowChanged;
            
            public event LFS_FM_RULE_CATEGORY_UNITSRowChangeEventHandler LFS_FM_RULE_CATEGORY_UNITSRowDeleting;
            
            public event LFS_FM_RULE_CATEGORY_UNITSRowChangeEventHandler LFS_FM_RULE_CATEGORY_UNITSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_FM_RULE_CATEGORY_UNITSRow(LFS_FM_RULE_CATEGORY_UNITSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULE_CATEGORY_UNITSRow AddLFS_FM_RULE_CATEGORY_UNITSRow(LFS_FM_RULERow parentLFS_FM_RULERowByLFS_FM_RULE_LFS_FM_RULE_CATEGORY_UNITS, int CategoryID, int UnitID, bool Deleted, int COMPANY_ID) {
                LFS_FM_RULE_CATEGORY_UNITSRow rowLFS_FM_RULE_CATEGORY_UNITSRow = ((LFS_FM_RULE_CATEGORY_UNITSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CategoryID,
                        UnitID,
                        Deleted,
                        COMPANY_ID};
                if ((parentLFS_FM_RULERowByLFS_FM_RULE_LFS_FM_RULE_CATEGORY_UNITS != null)) {
                    columnValuesArray[0] = parentLFS_FM_RULERowByLFS_FM_RULE_LFS_FM_RULE_CATEGORY_UNITS[0];
                }
                rowLFS_FM_RULE_CATEGORY_UNITSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_FM_RULE_CATEGORY_UNITSRow);
                return rowLFS_FM_RULE_CATEGORY_UNITSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULE_CATEGORY_UNITSRow FindByRuleIDCategoryIDUnitID(int RuleID, int CategoryID, int UnitID) {
                return ((LFS_FM_RULE_CATEGORY_UNITSRow)(this.Rows.Find(new object[] {
                            RuleID,
                            CategoryID,
                            UnitID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_FM_RULE_CATEGORY_UNITSDataTable cln = ((LFS_FM_RULE_CATEGORY_UNITSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_FM_RULE_CATEGORY_UNITSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRuleID = base.Columns["RuleID"];
                this.columnCategoryID = base.Columns["CategoryID"];
                this.columnUnitID = base.Columns["UnitID"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRuleID = new global::System.Data.DataColumn("RuleID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRuleID);
                this.columnCategoryID = new global::System.Data.DataColumn("CategoryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryID);
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRuleID,
                                this.columnCategoryID,
                                this.columnUnitID}, true));
                this.columnRuleID.AllowDBNull = false;
                this.columnCategoryID.AllowDBNull = false;
                this.columnUnitID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULE_CATEGORY_UNITSRow NewLFS_FM_RULE_CATEGORY_UNITSRow() {
                return ((LFS_FM_RULE_CATEGORY_UNITSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_FM_RULE_CATEGORY_UNITSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_FM_RULE_CATEGORY_UNITSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_FM_RULE_CATEGORY_UNITSRowChanged != null)) {
                    this.LFS_FM_RULE_CATEGORY_UNITSRowChanged(this, new LFS_FM_RULE_CATEGORY_UNITSRowChangeEvent(((LFS_FM_RULE_CATEGORY_UNITSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_FM_RULE_CATEGORY_UNITSRowChanging != null)) {
                    this.LFS_FM_RULE_CATEGORY_UNITSRowChanging(this, new LFS_FM_RULE_CATEGORY_UNITSRowChangeEvent(((LFS_FM_RULE_CATEGORY_UNITSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_FM_RULE_CATEGORY_UNITSRowDeleted != null)) {
                    this.LFS_FM_RULE_CATEGORY_UNITSRowDeleted(this, new LFS_FM_RULE_CATEGORY_UNITSRowChangeEvent(((LFS_FM_RULE_CATEGORY_UNITSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_FM_RULE_CATEGORY_UNITSRowDeleting != null)) {
                    this.LFS_FM_RULE_CATEGORY_UNITSRowDeleting(this, new LFS_FM_RULE_CATEGORY_UNITSRowChangeEvent(((LFS_FM_RULE_CATEGORY_UNITSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_FM_RULE_CATEGORY_UNITSRow(LFS_FM_RULE_CATEGORY_UNITSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RuleTDS ds = new RuleTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_FM_RULE_CATEGORY_UNITSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_FM_RULE_CATEGORYRow : global::System.Data.DataRow {
            
            private LFS_FM_RULE_CATEGORYDataTable tableLFS_FM_RULE_CATEGORY;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_RULE_CATEGORYRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_FM_RULE_CATEGORY = ((LFS_FM_RULE_CATEGORYDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RuleID {
                get {
                    return ((int)(this[this.tableLFS_FM_RULE_CATEGORY.RuleIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_RULE_CATEGORY.RuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CategoryID {
                get {
                    return ((int)(this[this.tableLFS_FM_RULE_CATEGORY.CategoryIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_RULE_CATEGORY.CategoryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_FM_RULE_CATEGORY.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_FM_RULE_CATEGORY.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_FM_RULE_CATEGORY.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_FM_RULE_CATEGORY.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULERow LFS_FM_RULERow {
                get {
                    return ((LFS_FM_RULERow)(this.GetParentRow(this.Table.ParentRelations["LFS_FM_RULE_LFS_FM_RULE_CATEGORY"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LFS_FM_RULE_LFS_FM_RULE_CATEGORY"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_FM_RULE_COMPANYLEVELRow : global::System.Data.DataRow {
            
            private LFS_FM_RULE_COMPANYLEVELDataTable tableLFS_FM_RULE_COMPANYLEVEL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_RULE_COMPANYLEVELRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_FM_RULE_COMPANYLEVEL = ((LFS_FM_RULE_COMPANYLEVELDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RuleID {
                get {
                    return ((int)(this[this.tableLFS_FM_RULE_COMPANYLEVEL.RuleIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_RULE_COMPANYLEVEL.RuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CompanyLevelID {
                get {
                    return ((int)(this[this.tableLFS_FM_RULE_COMPANYLEVEL.CompanyLevelIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_RULE_COMPANYLEVEL.CompanyLevelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_FM_RULE_COMPANYLEVEL.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_FM_RULE_COMPANYLEVEL.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_FM_RULE_COMPANYLEVEL.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_FM_RULE_COMPANYLEVEL.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULERow LFS_FM_RULERow {
                get {
                    return ((LFS_FM_RULERow)(this.GetParentRow(this.Table.ParentRelations["LFS_FM_RULE_LFS_FM_RULE_COMPANYLEVEL"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LFS_FM_RULE_LFS_FM_RULE_COMPANYLEVEL"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_FM_RULERow : global::System.Data.DataRow {
            
            private LFS_FM_RULEDataTable tableLFS_FM_RULE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_RULERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_FM_RULE = ((LFS_FM_RULEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RuleID {
                get {
                    return ((int)(this[this.tableLFS_FM_RULE.RuleIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_RULE.RuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableLFS_FM_RULE.NameColumn]));
                }
                set {
                    this[this.tableLFS_FM_RULE.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableLFS_FM_RULE.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'LFS_FM_RULE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_RULE.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MTO {
                get {
                    return ((bool)(this[this.tableLFS_FM_RULE.MTOColumn]));
                }
                set {
                    this[this.tableLFS_FM_RULE.MTOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Frequency {
                get {
                    return ((string)(this[this.tableLFS_FM_RULE.FrequencyColumn]));
                }
                set {
                    this[this.tableLFS_FM_RULE.FrequencyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Alarm {
                get {
                    return ((bool)(this[this.tableLFS_FM_RULE.AlarmColumn]));
                }
                set {
                    this[this.tableLFS_FM_RULE.AlarmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AlarmDays {
                get {
                    try {
                        return ((int)(this[this.tableLFS_FM_RULE.AlarmDaysColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AlarmDays\' in table \'LFS_FM_RULE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_RULE.AlarmDaysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ServiceRequest {
                get {
                    return ((bool)(this[this.tableLFS_FM_RULE.ServiceRequestColumn]));
                }
                set {
                    this[this.tableLFS_FM_RULE.ServiceRequestColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServiceRequestDays {
                get {
                    try {
                        return ((int)(this[this.tableLFS_FM_RULE.ServiceRequestDaysColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ServiceRequestDays\' in table \'LFS_FM_RULE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_RULE.ServiceRequestDaysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_FM_RULE.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_FM_RULE.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_FM_RULE.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_FM_RULE.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableLFS_FM_RULE.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableLFS_FM_RULE.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAlarmDaysNull() {
                return this.IsNull(this.tableLFS_FM_RULE.AlarmDaysColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAlarmDaysNull() {
                this[this.tableLFS_FM_RULE.AlarmDaysColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServiceRequestDaysNull() {
                return this.IsNull(this.tableLFS_FM_RULE.ServiceRequestDaysColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServiceRequestDaysNull() {
                this[this.tableLFS_FM_RULE.ServiceRequestDaysColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULE_CATEGORYRow[] GetLFS_FM_RULE_CATEGORYRows() {
                if ((this.Table.ChildRelations["LFS_FM_RULE_LFS_FM_RULE_CATEGORY"] == null)) {
                    return new LFS_FM_RULE_CATEGORYRow[0];
                }
                else {
                    return ((LFS_FM_RULE_CATEGORYRow[])(base.GetChildRows(this.Table.ChildRelations["LFS_FM_RULE_LFS_FM_RULE_CATEGORY"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULE_COMPANYLEVELRow[] GetLFS_FM_RULE_COMPANYLEVELRows() {
                if ((this.Table.ChildRelations["LFS_FM_RULE_LFS_FM_RULE_COMPANYLEVEL"] == null)) {
                    return new LFS_FM_RULE_COMPANYLEVELRow[0];
                }
                else {
                    return ((LFS_FM_RULE_COMPANYLEVELRow[])(base.GetChildRows(this.Table.ChildRelations["LFS_FM_RULE_LFS_FM_RULE_COMPANYLEVEL"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_CHECKLISTRow[] GetLFS_FM_CHECKLISTRows() {
                if ((this.Table.ChildRelations["LFS_FM_RULE_LFS_FM_CHECKLIST"] == null)) {
                    return new LFS_FM_CHECKLISTRow[0];
                }
                else {
                    return ((LFS_FM_CHECKLISTRow[])(base.GetChildRows(this.Table.ChildRelations["LFS_FM_RULE_LFS_FM_CHECKLIST"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULE_CATEGORY_UNITSRow[] GetLFS_FM_RULE_CATEGORY_UNITSRows() {
                if ((this.Table.ChildRelations["LFS_FM_RULE_LFS_FM_RULE_CATEGORY_UNITS"] == null)) {
                    return new LFS_FM_RULE_CATEGORY_UNITSRow[0];
                }
                else {
                    return ((LFS_FM_RULE_CATEGORY_UNITSRow[])(base.GetChildRows(this.Table.ChildRelations["LFS_FM_RULE_LFS_FM_RULE_CATEGORY_UNITS"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ChecklistRulesDetailsRow : global::System.Data.DataRow {
            
            private ChecklistRulesDetailsDataTable tableChecklistRulesDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ChecklistRulesDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableChecklistRulesDetails = ((ChecklistRulesDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RuleID {
                get {
                    return ((int)(this[this.tableChecklistRulesDetails.RuleIDColumn]));
                }
                set {
                    this[this.tableChecklistRulesDetails.RuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableChecklistRulesDetails.NameColumn]));
                }
                set {
                    this[this.tableChecklistRulesDetails.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableChecklistRulesDetails.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'ChecklistRulesDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChecklistRulesDetails.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MTO {
                get {
                    return ((bool)(this[this.tableChecklistRulesDetails.MTOColumn]));
                }
                set {
                    this[this.tableChecklistRulesDetails.MTOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Frequency {
                get {
                    return ((string)(this[this.tableChecklistRulesDetails.FrequencyColumn]));
                }
                set {
                    this[this.tableChecklistRulesDetails.FrequencyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Alarm {
                get {
                    return ((bool)(this[this.tableChecklistRulesDetails.AlarmColumn]));
                }
                set {
                    this[this.tableChecklistRulesDetails.AlarmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AlarmDays {
                get {
                    try {
                        return ((int)(this[this.tableChecklistRulesDetails.AlarmDaysColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AlarmDays\' in table \'ChecklistRulesDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChecklistRulesDetails.AlarmDaysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ServiceRequest {
                get {
                    return ((bool)(this[this.tableChecklistRulesDetails.ServiceRequestColumn]));
                }
                set {
                    this[this.tableChecklistRulesDetails.ServiceRequestColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServiceRequestDays {
                get {
                    try {
                        return ((int)(this[this.tableChecklistRulesDetails.ServiceRequestDaysColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ServiceRequestDays\' in table \'ChecklistRulesDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableChecklistRulesDetails.ServiceRequestDaysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableChecklistRulesDetails.DeletedColumn]));
                }
                set {
                    this[this.tableChecklistRulesDetails.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableChecklistRulesDetails.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableChecklistRulesDetails.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableChecklistRulesDetails.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableChecklistRulesDetails.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAlarmDaysNull() {
                return this.IsNull(this.tableChecklistRulesDetails.AlarmDaysColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAlarmDaysNull() {
                this[this.tableChecklistRulesDetails.AlarmDaysColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServiceRequestDaysNull() {
                return this.IsNull(this.tableChecklistRulesDetails.ServiceRequestDaysColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServiceRequestDaysNull() {
                this[this.tableChecklistRulesDetails.ServiceRequestDaysColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_FM_CHECKLISTRow : global::System.Data.DataRow {
            
            private LFS_FM_CHECKLISTDataTable tableLFS_FM_CHECKLIST;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_CHECKLISTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_FM_CHECKLIST = ((LFS_FM_CHECKLISTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    return ((int)(this[this.tableLFS_FM_CHECKLIST.UnitIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_CHECKLIST.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RuleID {
                get {
                    return ((int)(this[this.tableLFS_FM_CHECKLIST.RuleIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_CHECKLIST.RuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastService {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_FM_CHECKLIST.LastServiceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastService\' in table \'LFS_FM_CHECKLIST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_CHECKLIST.LastServiceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime NextDue {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_FM_CHECKLIST.NextDueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NextDue\' in table \'LFS_FM_CHECKLIST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_CHECKLIST.NextDueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Done {
                get {
                    return ((bool)(this[this.tableLFS_FM_CHECKLIST.DoneColumn]));
                }
                set {
                    this[this.tableLFS_FM_CHECKLIST.DoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    return ((string)(this[this.tableLFS_FM_CHECKLIST.StateColumn]));
                }
                set {
                    this[this.tableLFS_FM_CHECKLIST.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_FM_CHECKLIST.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_FM_CHECKLIST.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_FM_CHECKLIST.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_FM_CHECKLIST.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULERow LFS_FM_RULERow {
                get {
                    return ((LFS_FM_RULERow)(this.GetParentRow(this.Table.ParentRelations["LFS_FM_RULE_LFS_FM_CHECKLIST"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LFS_FM_RULE_LFS_FM_CHECKLIST"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastServiceNull() {
                return this.IsNull(this.tableLFS_FM_CHECKLIST.LastServiceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastServiceNull() {
                this[this.tableLFS_FM_CHECKLIST.LastServiceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNextDueNull() {
                return this.IsNull(this.tableLFS_FM_CHECKLIST.NextDueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNextDueNull() {
                this[this.tableLFS_FM_CHECKLIST.NextDueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_FM_RULE_CATEGORY_UNITSRow : global::System.Data.DataRow {
            
            private LFS_FM_RULE_CATEGORY_UNITSDataTable tableLFS_FM_RULE_CATEGORY_UNITS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_FM_RULE_CATEGORY_UNITSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_FM_RULE_CATEGORY_UNITS = ((LFS_FM_RULE_CATEGORY_UNITSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RuleID {
                get {
                    return ((int)(this[this.tableLFS_FM_RULE_CATEGORY_UNITS.RuleIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_RULE_CATEGORY_UNITS.RuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CategoryID {
                get {
                    return ((int)(this[this.tableLFS_FM_RULE_CATEGORY_UNITS.CategoryIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_RULE_CATEGORY_UNITS.CategoryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    return ((int)(this[this.tableLFS_FM_RULE_CATEGORY_UNITS.UnitIDColumn]));
                }
                set {
                    this[this.tableLFS_FM_RULE_CATEGORY_UNITS.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    try {
                        return ((bool)(this[this.tableLFS_FM_RULE_CATEGORY_UNITS.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'LFS_FM_RULE_CATEGORY_UNITS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_RULE_CATEGORY_UNITS.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    try {
                        return ((int)(this[this.tableLFS_FM_RULE_CATEGORY_UNITS.COMPANY_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPANY_ID\' in table \'LFS_FM_RULE_CATEGORY_UNITS\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableLFS_FM_RULE_CATEGORY_UNITS.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULERow LFS_FM_RULERow {
                get {
                    return ((LFS_FM_RULERow)(this.GetParentRow(this.Table.ParentRelations["LFS_FM_RULE_LFS_FM_RULE_CATEGORY_UNITS"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LFS_FM_RULE_LFS_FM_RULE_CATEGORY_UNITS"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull() {
                return this.IsNull(this.tableLFS_FM_RULE_CATEGORY_UNITS.DeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull() {
                this[this.tableLFS_FM_RULE_CATEGORY_UNITS.DeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPANY_IDNull() {
                return this.IsNull(this.tableLFS_FM_RULE_CATEGORY_UNITS.COMPANY_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPANY_IDNull() {
                this[this.tableLFS_FM_RULE_CATEGORY_UNITS.COMPANY_IDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_FM_RULE_CATEGORYRowChangeEvent : global::System.EventArgs {
            
            private LFS_FM_RULE_CATEGORYRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULE_CATEGORYRowChangeEvent(LFS_FM_RULE_CATEGORYRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULE_CATEGORYRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_FM_RULE_COMPANYLEVELRowChangeEvent : global::System.EventArgs {
            
            private LFS_FM_RULE_COMPANYLEVELRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULE_COMPANYLEVELRowChangeEvent(LFS_FM_RULE_COMPANYLEVELRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULE_COMPANYLEVELRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_FM_RULERowChangeEvent : global::System.EventArgs {
            
            private LFS_FM_RULERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULERowChangeEvent(LFS_FM_RULERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ChecklistRulesDetailsRowChangeEvent : global::System.EventArgs {
            
            private ChecklistRulesDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChecklistRulesDetailsRowChangeEvent(ChecklistRulesDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChecklistRulesDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_FM_CHECKLISTRowChangeEvent : global::System.EventArgs {
            
            private LFS_FM_CHECKLISTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_CHECKLISTRowChangeEvent(LFS_FM_CHECKLISTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_CHECKLISTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_FM_RULE_CATEGORY_UNITSRowChangeEvent : global::System.EventArgs {
            
            private LFS_FM_RULE_CATEGORY_UNITSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULE_CATEGORY_UNITSRowChangeEvent(LFS_FM_RULE_CATEGORY_UNITSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_FM_RULE_CATEGORY_UNITSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591